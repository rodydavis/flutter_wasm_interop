{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0","program":"/Users/rodydavis/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","cranelift_codegen","/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"basic-blocks\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=6264f06b421a658f","-C","extra-filename=-6264f06b421a658f","--out-dir","/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps","-L","dependency=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps","--extern","byteorder=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libbyteorder-37d1abf77ab03beb.rmeta","--extern","cranelift_bforest=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libcranelift_bforest-142e3575d65300b0.rmeta","--extern","cranelift_codegen_shared=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libcranelift_codegen_shared-fbfb932fb6b86bc3.rmeta","--extern","cranelift_entity=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libcranelift_entity-fec312bedc4ceb2b.rmeta","--extern","log=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/liblog-93eb147a2edf3ff9.rmeta","--extern","smallvec=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libsmallvec-6d3c2a19376513d1.rmeta","--extern","target_lexicon=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libtarget_lexicon-c84a4cfc62f55085.rmeta","--extern","thiserror=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libthiserror-c6b5f394b40cc1ed.rmeta","--cap-lints","allow","--cfg","feature=\"x86\"","--error-format=json","--sysroot","/Users/rodydavis/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libcranelift_codegen-6264f06b421a658f.rmeta"},"prelude":{"crate_id":{"name":"cranelift_codegen","disambiguator":[8137594953696592169,2434923929662806093]},"crate_root":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src","external_crates":[{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5459908120384850477,15760959269387734159]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11826469219384905814,12486183027959381912]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5497990426549684121,15109235050116755313]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[9495953968349266340,8510226981626586408]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[5808000563841838002,6875932327897409807]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[423181384897816611,2293857470463835221]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5608331764705855408,15392280463108098182]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14701876030349379005,4369912422515260820]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[8984243875435576741,4446548522921354]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4101421024496600006,15821692231896539213]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[3079379191059796654,13101802771042696873]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[7173097494859913114,11426318732171342333]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12351377766094969309,8390201886823579403]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2739304812783641882,6504751215723634061]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","num":15,"id":{"name":"cranelift_bforest","disambiguator":[16839861756975015430,17480968280561536471]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","num":16,"id":{"name":"cranelift_entity","disambiguator":[17753184904274736661,13260828292095518975]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/relaxation.rs","num":17,"id":{"name":"log","disambiguator":[1733674285016593233,15249908543282869660]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/relaxation.rs","num":18,"id":{"name":"cfg_if","disambiguator":[10201928301582868305,15717936632155057518]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","num":19,"id":{"name":"cranelift_codegen_shared","disambiguator":[12159334638876363809,11181374470640890765]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","num":20,"id":{"name":"target_lexicon","disambiguator":[8710467849870275380,14539867229973532926]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","num":21,"id":{"name":"thiserror","disambiguator":[644983917941971274,9005274455038075708]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","num":22,"id":{"name":"thiserror_impl","disambiguator":[162727662940899118,1051987824536435867]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/unwind.rs","num":23,"id":{"name":"byteorder","disambiguator":[1239690670661025595,7182013389202797911]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/legalizer/split.rs","num":24,"id":{"name":"smallvec","disambiguator":[11988265583603314485,13440539531608910145]}}],"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":0,"byte_end":3089,"line_start":1,"line_end":110,"column_start":1,"column_end":53}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3028},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":1987,"byte_end":1994,"line_start":56,"line_end":56,"column_start":25,"column_end":32},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3358},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2022,"byte_end":2039,"line_start":57,"line_end":57,"column_start":27,"column_end":44},"alias_span":null,"name":"legalize_function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4852},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2070,"byte_end":2087,"line_start":58,"line_end":58,"column_start":30,"column_end":47},"alias_span":null,"name":"ValueLabelsRanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8711},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2089,"byte_end":2102,"line_start":58,"line_end":58,"column_start":49,"column_end":62},"alias_span":null,"name":"ValueLocRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2801},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2130,"byte_end":2145,"line_start":59,"line_end":59,"column_start":26,"column_end":41},"alias_span":null,"name":"verify_function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2907},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2169,"byte_end":2183,"line_start":60,"line_end":60,"column_start":23,"column_end":37},"alias_span":null,"name":"write_function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":0},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2194,"byte_end":2211,"line_start":62,"line_end":62,"column_start":9,"column_end":26},"alias_span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2215,"byte_end":2222,"line_start":62,"line_end":62,"column_start":30,"column_end":37},"name":"bforest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2232,"byte_end":2248,"line_start":63,"line_end":63,"column_start":9,"column_end":25},"alias_span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2252,"byte_end":2258,"line_start":63,"line_end":63,"column_start":29,"column_end":35},"name":"entity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3346,"byte_end":3360,"line_start":12,"line_end":12,"column_start":5,"column_end":19},"alias_span":null,"name":"MemoryCodeSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3362,"byte_end":3375,"line_start":12,"line_end":12,"column_start":21,"column_end":34},"alias_span":null,"name":"NullRelocSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3377,"byte_end":3393,"line_start":12,"line_end":12,"column_start":36,"column_end":52},"alias_span":null,"name":"NullStackmapSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3395,"byte_end":3407,"line_start":12,"line_end":12,"column_start":54,"column_end":66},"alias_span":null,"name":"NullTrapSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":49},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3409,"byte_end":3418,"line_start":12,"line_end":12,"column_start":68,"column_end":77},"alias_span":null,"name":"RelocSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3420,"byte_end":3432,"line_start":12,"line_end":12,"column_start":79,"column_end":91},"alias_span":null,"name":"StackmapSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3438,"byte_end":3446,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"alias_span":null,"name":"TrapSink","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":117},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3477,"byte_end":3491,"line_start":15,"line_end":15,"column_start":27,"column_end":41},"alias_span":null,"name":"relax_branches","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3515,"byte_end":3534,"line_start":16,"line_end":16,"column_start":23,"column_end":42},"alias_span":null,"name":"shrink_instructions","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":4878},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3560,"byte_end":3568,"line_start":17,"line_end":17,"column_start":25,"column_end":33},"alias_span":null,"name":"Stackmap","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":8583},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":3749,"byte_end":3762,"line_start":21,"line_end":21,"column_start":26,"column_end":39},"alias_span":null,"name":"RegDiversions","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":479},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119960,"byte_end":119973,"line_start":31,"line_end":31,"column_start":5,"column_end":18},"alias_span":null,"name":"InsertBuilder","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":4984},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119975,"byte_end":119986,"line_start":31,"line_end":31,"column_start":20,"column_end":31},"alias_span":null,"name":"InstBuilder","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119988,"byte_end":120003,"line_start":31,"line_end":31,"column_start":33,"column_end":48},"alias_span":null,"name":"InstBuilderBase","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":473},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120005,"byte_end":120021,"line_start":31,"line_end":31,"column_start":50,"column_end":66},"alias_span":null,"name":"InstInserterBase","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120023,"byte_end":120037,"line_start":31,"line_end":31,"column_start":68,"column_end":82},"alias_span":null,"name":"ReplaceBuilder","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5357},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120072,"byte_end":120084,"line_start":33,"line_end":33,"column_start":31,"column_end":43},"alias_span":null,"name":"ConstantData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":564},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120086,"byte_end":120100,"line_start":33,"line_end":33,"column_start":45,"column_end":59},"alias_span":null,"name":"ConstantOffset","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5381},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120102,"byte_end":120114,"line_start":33,"line_end":33,"column_start":61,"column_end":73},"alias_span":null,"name":"ConstantPool","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5386},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120142,"byte_end":120155,"line_start":34,"line_end":34,"column_start":26,"column_end":39},"alias_span":null,"name":"DataFlowGraph","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5400},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120157,"byte_end":120165,"line_start":34,"line_end":34,"column_start":41,"column_end":49},"alias_span":null,"name":"ValueDef","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5605},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120203,"byte_end":120211,"line_start":36,"line_end":36,"column_start":5,"column_end":13},"alias_span":null,"name":"Constant","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5441},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120213,"byte_end":120216,"line_start":36,"line_end":36,"column_start":15,"column_end":18},"alias_span":null,"name":"Ebb","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5697},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120218,"byte_end":120225,"line_start":36,"line_end":36,"column_start":20,"column_end":27},"alias_span":null,"name":"FuncRef","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5577},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120227,"byte_end":120238,"line_start":36,"line_end":36,"column_start":29,"column_end":40},"alias_span":null,"name":"GlobalValue","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5753},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120240,"byte_end":120244,"line_start":36,"line_end":36,"column_start":42,"column_end":46},"alias_span":null,"name":"Heap","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5641},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120246,"byte_end":120255,"line_start":36,"line_end":36,"column_start":48,"column_end":57},"alias_span":null,"name":"Immediate","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5513},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120257,"byte_end":120261,"line_start":36,"line_end":36,"column_start":59,"column_end":63},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5669},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120263,"byte_end":120272,"line_start":36,"line_end":36,"column_start":65,"column_end":74},"alias_span":null,"name":"JumpTable","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5725},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120274,"byte_end":120280,"line_start":36,"line_end":36,"column_start":76,"column_end":82},"alias_span":null,"name":"SigRef","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5549},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120282,"byte_end":120291,"line_start":36,"line_end":36,"column_start":84,"column_end":93},"alias_span":null,"name":"StackSlot","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5781},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120297,"byte_end":120302,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"alias_span":null,"name":"Table","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5477},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120304,"byte_end":120309,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5873},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120348,"byte_end":120356,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"alias_span":null,"name":"AbiParam","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5893},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120358,"byte_end":120375,"line_start":40,"line_end":40,"column_start":15,"column_end":32},"alias_span":null,"name":"ArgumentExtension","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5914},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120377,"byte_end":120392,"line_start":40,"line_end":40,"column_start":34,"column_end":49},"alias_span":null,"name":"ArgumentPurpose","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5945},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120394,"byte_end":120405,"line_start":40,"line_end":40,"column_start":51,"column_end":62},"alias_span":null,"name":"ExtFuncData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5855},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120407,"byte_end":120416,"line_start":40,"line_end":40,"column_start":64,"column_end":73},"alias_span":null,"name":"Signature","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5953},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120449,"byte_end":120461,"line_start":42,"line_end":42,"column_start":29,"column_end":41},"alias_span":null,"name":"ExternalName","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6004},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120496,"byte_end":120507,"line_start":43,"line_end":43,"column_start":34,"column_end":45},"alias_span":null,"name":"FrameLayout","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":5976},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120509,"byte_end":120526,"line_start":43,"line_end":43,"column_start":47,"column_end":64},"alias_span":null,"name":"FrameLayoutChange","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":875},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120528,"byte_end":120546,"line_start":43,"line_end":43,"column_start":66,"column_end":84},"alias_span":null,"name":"FrameLayoutChanges","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6032},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120579,"byte_end":120605,"line_start":44,"line_end":44,"column_start":31,"column_end":57},"alias_span":null,"name":"DisplayFunctionAnnotations","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6011},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120607,"byte_end":120615,"line_start":44,"line_end":44,"column_start":59,"column_end":67},"alias_span":null,"name":"Function","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6039},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120650,"byte_end":120665,"line_start":45,"line_end":45,"column_start":33,"column_end":48},"alias_span":null,"name":"GlobalValueData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6057},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120693,"byte_end":120701,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"alias_span":null,"name":"HeapData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6065},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120703,"byte_end":120712,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"alias_span":null,"name":"HeapStyle","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6351},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120754,"byte_end":120769,"line_start":48,"line_end":48,"column_start":5,"column_end":20},"alias_span":null,"name":"InstructionData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":6567},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120771,"byte_end":120777,"line_start":48,"line_end":48,"column_start":22,"column_end":28},"alias_span":null,"name":"Opcode","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":1156},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120779,"byte_end":120788,"line_start":48,"line_end":48,"column_start":30,"column_end":39},"alias_span":null,"name":"ValueList","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":1157},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120790,"byte_end":120803,"line_start":48,"line_end":48,"column_start":41,"column_end":54},"alias_span":null,"name":"ValueListPool","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7015},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120805,"byte_end":120817,"line_start":48,"line_end":48,"column_start":56,"column_end":68},"alias_span":null,"name":"VariableArgs","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7066},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120852,"byte_end":120865,"line_start":50,"line_end":50,"column_start":31,"column_end":44},"alias_span":null,"name":"JumpTableData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7070},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120894,"byte_end":120900,"line_start":51,"line_end":51,"column_start":28,"column_end":34},"alias_span":null,"name":"Layout","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":1401},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120931,"byte_end":120950,"line_start":52,"line_end":52,"column_start":30,"column_end":49},"alias_span":null,"name":"get_libcall_funcref","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":1403},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120952,"byte_end":120974,"line_start":52,"line_end":52,"column_start":51,"column_end":73},"alias_span":null,"name":"get_probestack_funcref","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7100},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":120976,"byte_end":120983,"line_start":52,"line_end":52,"column_start":75,"column_end":82},"alias_span":null,"name":"LibCall","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7139},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121015,"byte_end":121023,"line_start":53,"line_end":53,"column_start":30,"column_end":38},"alias_span":null,"name":"MemFlags","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7169},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121056,"byte_end":121076,"line_start":54,"line_end":54,"column_start":32,"column_end":52},"alias_span":null,"name":"ExpandedProgramPoint","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":1468},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121078,"byte_end":121090,"line_start":54,"line_end":54,"column_start":54,"column_end":66},"alias_span":null,"name":"ProgramOrder","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7156},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121092,"byte_end":121104,"line_start":54,"line_end":54,"column_start":68,"column_end":80},"alias_span":null,"name":"ProgramPoint","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7186},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121137,"byte_end":121146,"line_start":55,"line_end":55,"column_start":31,"column_end":40},"alias_span":null,"name":"SourceLoc","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7225},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121179,"byte_end":121192,"line_start":56,"line_end":56,"column_start":32,"column_end":45},"alias_span":null,"name":"StackSlotData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7201},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121194,"byte_end":121207,"line_start":56,"line_end":56,"column_start":47,"column_end":60},"alias_span":null,"name":"StackSlotKind","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7240},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121209,"byte_end":121219,"line_start":56,"line_end":56,"column_start":62,"column_end":72},"alias_span":null,"name":"StackSlots","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7256},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121248,"byte_end":121257,"line_start":57,"line_end":57,"column_start":27,"column_end":36},"alias_span":null,"name":"TableData","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7264},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121288,"byte_end":121296,"line_start":58,"line_end":58,"column_start":30,"column_end":38},"alias_span":null,"name":"TrapCode","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7305},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121324,"byte_end":121328,"line_start":59,"line_end":59,"column_start":27,"column_end":31},"alias_span":null,"name":"Type","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7400},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121360,"byte_end":121371,"line_start":60,"line_end":60,"column_start":31,"column_end":42},"alias_span":null,"name":"ArgumentLoc","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7379},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121373,"byte_end":121381,"line_start":60,"line_end":60,"column_start":44,"column_end":52},"alias_span":null,"name":"ValueLoc","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":19,"index":3},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121418,"byte_end":121427,"line_start":61,"line_end":61,"column_start":35,"column_end":44},"alias_span":null,"name":"condcodes","value":"","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":7788},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424749,"byte_end":424757,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"alias_span":null,"name":"CallConv","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7865},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424798,"byte_end":424809,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"alias_span":null,"name":"BranchRange","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7826},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424811,"byte_end":424825,"line_start":49,"line_end":49,"column_start":18,"column_end":32},"alias_span":null,"name":"ConstraintKind","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7817},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424827,"byte_end":424844,"line_start":49,"line_end":49,"column_start":34,"column_end":51},"alias_span":null,"name":"OperandConstraint","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7852},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424846,"byte_end":424863,"line_start":49,"line_end":49,"column_start":53,"column_end":70},"alias_span":null,"name":"RecipeConstraints","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":2252},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424899,"byte_end":424908,"line_start":51,"line_end":51,"column_start":32,"column_end":41},"alias_span":null,"name":"base_size","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7888},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424910,"byte_end":424917,"line_start":51,"line_end":51,"column_start":43,"column_end":50},"alias_span":null,"name":"EncInfo","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7873},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424919,"byte_end":424927,"line_start":51,"line_end":51,"column_start":52,"column_end":60},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":2322},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424962,"byte_end":424974,"line_start":52,"line_end":52,"column_start":33,"column_end":45},"alias_span":null,"name":"regs_overlap","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":2286},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424976,"byte_end":424984,"line_start":52,"line_end":52,"column_start":47,"column_end":55},"alias_span":null,"name":"RegClass","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7894},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":424986,"byte_end":424999,"line_start":52,"line_end":52,"column_start":57,"column_end":70},"alias_span":null,"name":"RegClassIndex","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7909},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":425001,"byte_end":425008,"line_start":52,"line_end":52,"column_start":72,"column_end":79},"alias_span":null,"name":"RegInfo","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":2267},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":425010,"byte_end":425017,"line_start":52,"line_end":52,"column_start":81,"column_end":88},"alias_span":null,"name":"RegUnit","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7922},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":425048,"byte_end":425057,"line_start":53,"line_end":53,"column_start":29,"column_end":38},"alias_span":null,"name":"StackBase","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7943},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":425059,"byte_end":425072,"line_start":53,"line_end":53,"column_start":40,"column_end":53},"alias_span":null,"name":"StackBaseMask","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":7914},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":425074,"byte_end":425082,"line_start":53,"line_end":53,"column_start":55,"column_end":63},"alias_span":null,"name":"StackRef","value":"","parent":{"krate":0,"index":1737}},{"kind":"Use","ref_id":{"krate":0,"index":2592},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":628686,"byte_end":628700,"line_start":7,"line_end":7,"column_start":25,"column_end":39},"alias_span":null,"name":"add_to_current","value":"","parent":{"krate":0,"index":2545}},{"kind":"Use","ref_id":{"krate":0,"index":2590},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":628702,"byte_end":628714,"line_start":7,"line_end":7,"column_start":41,"column_end":53},"alias_span":null,"name":"take_current","value":"","parent":{"krate":0,"index":2545}},{"kind":"Use","ref_id":{"krate":0,"index":2575},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":628716,"byte_end":628725,"line_start":7,"line_end":7,"column_start":55,"column_end":64},"alias_span":null,"name":"PassTimes","value":"","parent":{"krate":0,"index":2545}},{"kind":"Use","ref_id":{"krate":0,"index":2571},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":628727,"byte_end":628738,"line_start":7,"line_end":7,"column_start":66,"column_end":77},"alias_span":null,"name":"TimingToken","value":"","parent":{"krate":0,"index":2545}},{"kind":"Use","ref_id":{"krate":0,"index":2666},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":640470,"byte_end":640481,"line_start":84,"line_end":84,"column_start":21,"column_end":32},"alias_span":null,"name":"verify_cssa","value":"","parent":{"krate":0,"index":2594}},{"kind":"Use","ref_id":{"krate":0,"index":2726},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":640507,"byte_end":640522,"line_start":85,"line_end":85,"column_start":25,"column_end":40},"alias_span":null,"name":"verify_liveness","value":"","parent":{"krate":0,"index":2594}},{"kind":"Use","ref_id":{"krate":0,"index":2748},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":640549,"byte_end":640565,"line_start":86,"line_end":86,"column_start":26,"column_end":42},"alias_span":null,"name":"verify_locations","value":"","parent":{"krate":0,"index":2594}},{"kind":"Use","ref_id":{"krate":16,"index":10},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2532,"byte_end":2545,"line_start":80,"line_end":80,"column_start":24,"column_end":37},"alias_span":null,"name":"packed_option","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8583},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/mod.rs","byte_start":1019004,"byte_end":1019017,"line_start":24,"line_end":24,"column_start":47,"column_end":60},"alias_span":null,"name":"RegDiversions","value":"","parent":{"krate":0,"index":3618}},{"kind":"Use","ref_id":{"krate":0,"index":8642},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2972,"byte_end":2984,"line_start":107,"line_end":107,"column_start":25,"column_end":37},"alias_span":null,"name":"CodegenError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4628},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2986,"byte_end":2999,"line_start":107,"line_end":107,"column_start":39,"column_end":52},"alias_span":null,"name":"CodegenResult","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":0,"byte_end":3089,"line_start":1,"line_end":110,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":195},{"krate":0,"index":224},{"krate":0,"index":318},{"krate":0,"index":330},{"krate":0,"index":411},{"krate":0,"index":452},{"krate":0,"index":1737},{"krate":0,"index":2397},{"krate":0,"index":2436},{"krate":0,"index":2480},{"krate":0,"index":2545},{"krate":0,"index":2594},{"krate":0,"index":2870},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2961},{"krate":0,"index":2979},{"krate":0,"index":2988},{"krate":0,"index":3075},{"krate":0,"index":3093},{"krate":0,"index":3098},{"krate":0,"index":3133},{"krate":0,"index":3148},{"krate":0,"index":3377},{"krate":0,"index":3416},{"krate":0,"index":3440},{"krate":0,"index":3445},{"krate":0,"index":3499},{"krate":0,"index":3522},{"krate":0,"index":3618},{"krate":0,"index":4625},{"krate":0,"index":4630},{"krate":0,"index":4687},{"krate":0,"index":4724},{"krate":0,"index":4792},{"krate":0,"index":4805},{"krate":0,"index":4823},{"krate":0,"index":4833},{"krate":0,"index":4874},{"krate":0,"index":4877}],"decl_id":null,"docs":" Cranelift code generation library.\n","sig":null,"attributes":[{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":40,"byte_end":107,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":108,"byte_end":138,"line_start":4,"line_end":4,"column_start":1,"column_end":31}},{"value":"deny(unstable_features)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":168,"byte_end":191,"line_start":5,"line_end":5,"column_start":30,"column_end":53}},{"value":"no_std","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":1646,"byte_end":1656,"line_start":41,"line_end":41,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binemit","qualname":"::binemit","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":90},{"krate":0,"index":125},{"krate":0,"index":135},{"krate":0,"index":146},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":4884},{"krate":0,"index":4915},{"krate":0,"index":4913},{"krate":0,"index":4911},{"krate":0,"index":4908},{"krate":0,"index":4909},{"krate":0,"index":4905},{"krate":0,"index":4906},{"krate":0,"index":171},{"krate":0,"index":4916},{"krate":0,"index":4921},{"krate":0,"index":4922},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":191},{"krate":0,"index":192}],"decl_id":null,"docs":" Binary machine code emission.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":11959,"byte_end":11973,"line_start":34,"line_end":34,"column_start":12,"column_end":26},"name":"MemoryCodeSink","qualname":"::binemit::memorysink::MemoryCodeSink","value":"MemoryCodeSink { info }","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45}],"decl_id":null,"docs":" A `CodeSink` that writes binary machine code directly into memory.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":45},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":12330,"byte_end":12334,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"name":"info","qualname":"::binemit::memorysink::MemoryCodeSink::info","value":"binemit::CodeInfo","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" Information about the generated code and read-only data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":12702,"byte_end":12705,"line_start":53,"line_end":53,"column_start":19,"column_end":22},"name":"new","qualname":"<MemoryCodeSink>::new","value":"fn (data: *mut u8, relocs: &'a mut dyn RelocSink, traps: &'a mut dyn TrapSink, stackmaps: &'a mut dyn StackmapSink) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new memory code sink that writes a function to the memory pointed to by `data`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":13272,"byte_end":13281,"line_start":76,"line_end":76,"column_start":11,"column_end":20},"name":"RelocSink","qualname":"::binemit::memorysink::RelocSink","value":"RelocSink","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" A trait for receiving relocations for code that is emitted directly into memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":13358,"byte_end":13367,"line_start":78,"line_end":78,"column_start":8,"column_end":17},"name":"reloc_ebb","qualname":"::binemit::memorysink::RelocSink::reloc_ebb","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: CodeOffset) -> ()","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Add a relocation referencing an EBB at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":13507,"byte_end":13521,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"reloc_external","qualname":"::binemit::memorysink::RelocSink::reloc_external","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: &ExternalName, _: Addend) -> ()","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Add a relocation referencing an external symbol at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":13645,"byte_end":13659,"line_start":84,"line_end":84,"column_start":8,"column_end":22},"name":"reloc_constant","qualname":"::binemit::memorysink::RelocSink::reloc_constant","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: ConstantOffset) -> ()","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Add a relocation referencing a constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":13775,"byte_end":13783,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"reloc_jt","qualname":"::binemit::memorysink::RelocSink::reloc_jt","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: JumpTable) -> ()","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Add a relocation referencing a jump table.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":14025,"byte_end":14033,"line_start":94,"line_end":94,"column_start":11,"column_end":19},"name":"TrapSink","qualname":"::binemit::memorysink::TrapSink","value":"TrapSink","parent":null,"children":[{"krate":0,"index":55}],"decl_id":null,"docs":" A trait for receiving trap codes and offsets.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":14095,"byte_end":14099,"line_start":96,"line_end":96,"column_start":8,"column_end":12},"name":"trap","qualname":"::binemit::memorysink::TrapSink::trap","value":"fn (&mut self, _: CodeOffset, _: SourceLoc, _: TrapCode) -> ()","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Add trap information for a specific offset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":76},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":16440,"byte_end":16453,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"NullRelocSink","qualname":"::binemit::memorysink::NullRelocSink","value":"NullRelocSink {  }","parent":null,"children":[],"decl_id":null,"docs":" A `RelocSink` implementation that does nothing, which is convenient when\n compiling code that does not relocate anything.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":16923,"byte_end":16935,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"NullTrapSink","qualname":"::binemit::memorysink::NullTrapSink","value":"NullTrapSink {  }","parent":null,"children":[],"decl_id":null,"docs":" A `TrapSink` implementation that does nothing, which is convenient when\n compiling code that does not rely on trapping semantics.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":85},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":17106,"byte_end":17118,"line_start":195,"line_end":195,"column_start":11,"column_end":23},"name":"StackmapSink","qualname":"::binemit::memorysink::StackmapSink","value":"StackmapSink","parent":null,"children":[{"krate":0,"index":86}],"decl_id":null,"docs":" A trait for emitting stackmaps.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":17228,"byte_end":17240,"line_start":197,"line_end":197,"column_start":8,"column_end":20},"name":"add_stackmap","qualname":"::binemit::memorysink::StackmapSink::add_stackmap","value":"fn (&mut self, _: CodeOffset, _: Stackmap) -> ()","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Output a bitmap of the stack representing the live reference variables at this code offset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":87},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":17343,"byte_end":17359,"line_start":201,"line_end":201,"column_start":12,"column_end":28},"name":"NullStackmapSink","qualname":"::binemit::memorysink::NullStackmapSink","value":"NullStackmapSink {  }","parent":null,"children":[],"decl_id":null,"docs":" Placeholder StackmapSink that does nothing.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/relaxation.rs","byte_start":19016,"byte_end":19030,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"relax_branches","qualname":"::binemit::relaxation::relax_branches","value":"fn (func: &mut Function, _cfg: &mut ControlFlowGraph, _domtree: &mut DominatorTree, isa: &dyn TargetIsa) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Relax branches and compute the final layout of EBB headers in `func`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/shrink.rs","byte_start":33148,"byte_end":33167,"line_start":16,"line_end":16,"column_start":8,"column_end":27},"name":"shrink_instructions","qualname":"::binemit::shrink::shrink_instructions","value":"fn (func: &mut Function, isa: &dyn TargetIsa) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pick the smallest valid encodings for instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4878},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/stackmap.rs","byte_start":35917,"byte_end":35925,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"Stackmap","qualname":"::binemit::stackmap::Stackmap","value":"Stackmap {  }","parent":null,"children":[{"krate":0,"index":4879}],"decl_id":null,"docs":" Wrapper class for longer bit vectors that cannot be represented by a single BitSet.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/stackmap.rs","byte_start":36075,"byte_end":36086,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"from_values","qualname":"<Stackmap>::from_values","value":"fn (args: &[ir::entities::Value], func: &ir::Function, isa: &dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a stackmap based on where references are located on a function's stack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/stackmap.rs","byte_start":38026,"byte_end":38036,"line_start":62,"line_end":62,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Stackmap>::from_slice","value":"fn (vec: &[bool]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a vec of Bitsets from a slice of bools.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/stackmap.rs","byte_start":38584,"byte_end":38591,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_bit","qualname":"<Stackmap>::get_bit","value":"fn (&self, bit_index: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a specified bit.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":169},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4079,"byte_end":4089,"line_start":30,"line_end":30,"column_start":10,"column_end":20},"name":"CodeOffset","qualname":"::binemit::CodeOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset in bytes from the beginning of the function.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":170},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4146,"byte_end":4152,"line_start":33,"line_end":33,"column_start":10,"column_end":16},"name":"Addend","qualname":"::binemit::Addend","value":"i64","parent":null,"children":[],"decl_id":null,"docs":" Addend to add to the symbol value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4885},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4356,"byte_end":4360,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Abs4","qualname":"::binemit::Reloc::Abs4","value":"Reloc::Abs4","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" absolute 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4887},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4390,"byte_end":4394,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"name":"Abs8","qualname":"::binemit::Reloc::Abs8","value":"Reloc::Abs8","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" absolute 8-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4889},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4431,"byte_end":4440,"line_start":44,"line_end":44,"column_start":5,"column_end":14},"name":"X86PCRel4","qualname":"::binemit::Reloc::X86PCRel4","value":"Reloc::X86PCRel4","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" x86 PC-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4891},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4503,"byte_end":4518,"line_start":46,"line_end":46,"column_start":5,"column_end":20},"name":"X86PCRelRodata4","qualname":"::binemit::Reloc::X86PCRelRodata4","value":"Reloc::X86PCRelRodata4","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" x86 PC-relative 4-byte offset to trailing rodata\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4893},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4563,"byte_end":4576,"line_start":48,"line_end":48,"column_start":5,"column_end":18},"name":"X86CallPCRel4","qualname":"::binemit::Reloc::X86CallPCRel4","value":"Reloc::X86CallPCRel4","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" x86 call to PC-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4895},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4622,"byte_end":4636,"line_start":50,"line_end":50,"column_start":5,"column_end":19},"name":"X86CallPLTRel4","qualname":"::binemit::Reloc::X86CallPLTRel4","value":"Reloc::X86CallPLTRel4","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" x86 call to PLT-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4897},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4677,"byte_end":4689,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"X86GOTPCRel4","qualname":"::binemit::Reloc::X86GOTPCRel4","value":"Reloc::X86GOTPCRel4","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" x86 GOT PC-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4899},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4721,"byte_end":4730,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"Arm32Call","qualname":"::binemit::Reloc::Arm32Call","value":"Reloc::Arm32Call","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" Arm32 call target\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4901},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4762,"byte_end":4771,"line_start":56,"line_end":56,"column_start":5,"column_end":14},"name":"Arm64Call","qualname":"::binemit::Reloc::Arm64Call","value":"Reloc::Arm64Call","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" Arm64 call target\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4903},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4804,"byte_end":4813,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"RiscvCall","qualname":"::binemit::Reloc::RiscvCall","value":"Reloc::RiscvCall","parent":{"krate":0,"index":4884},"children":[],"decl_id":null,"docs":" RISC-V call target\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4884},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4320,"byte_end":4325,"line_start":38,"line_end":38,"column_start":10,"column_end":15},"name":"Reloc","qualname":"::binemit::Reloc","value":"Reloc::{Abs4, Abs8, X86PCRel4, X86PCRelRodata4, X86CallPCRel4, X86CallPLTRel4, X86GOTPCRel4, Arm32Call, Arm64Call, RiscvCall}","parent":null,"children":[{"krate":0,"index":4885},{"krate":0,"index":4887},{"krate":0,"index":4889},{"krate":0,"index":4891},{"krate":0,"index":4893},{"krate":0,"index":4895},{"krate":0,"index":4897},{"krate":0,"index":4899},{"krate":0,"index":4901},{"krate":0,"index":4903}],"decl_id":null,"docs":" Relocation kinds for every ISA\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4916},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":5992,"byte_end":6000,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"CodeInfo","qualname":"::binemit::CodeInfo","value":"CodeInfo { code_size, jumptables_size, rodata_size, total_size }","parent":null,"children":[{"krate":0,"index":4917},{"krate":0,"index":4918},{"krate":0,"index":4919},{"krate":0,"index":4920}],"decl_id":null,"docs":" Container for information about a vector of compiled code and its supporting read-only data.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4917},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6082,"byte_end":6091,"line_start":86,"line_end":86,"column_start":9,"column_end":18},"name":"code_size","qualname":"::binemit::CodeInfo::code_size","value":"u32","parent":{"krate":0,"index":4916},"children":[],"decl_id":null,"docs":" Number of bytes of machine code (the code starts at offset 0).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4918},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6153,"byte_end":6168,"line_start":89,"line_end":89,"column_start":9,"column_end":24},"name":"jumptables_size","qualname":"::binemit::CodeInfo::jumptables_size","value":"u32","parent":{"krate":0,"index":4916},"children":[],"decl_id":null,"docs":" Number of bytes of jumptables.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4919},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6226,"byte_end":6237,"line_start":92,"line_end":92,"column_start":9,"column_end":20},"name":"rodata_size","qualname":"::binemit::CodeInfo::rodata_size","value":"u32","parent":{"krate":0,"index":4916},"children":[],"decl_id":null,"docs":" Number of bytes of rodata.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4920},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6294,"byte_end":6304,"line_start":95,"line_end":95,"column_start":9,"column_end":19},"name":"total_size","qualname":"::binemit::CodeInfo::total_size","value":"u32","parent":{"krate":0,"index":4916},"children":[],"decl_id":null,"docs":" Number of bytes in total.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6443,"byte_end":6453,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"jumptables","qualname":"<CodeInfo>::jumptables","value":"fn (&self) -> CodeOffset","parent":null,"children":[],"decl_id":null,"docs":" Offset of any relocatable jump tables, or equal to rodata if there are no jump tables.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6612,"byte_end":6618,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"rodata","qualname":"<CodeInfo>::rodata","value":"fn (&self) -> CodeOffset","parent":null,"children":[],"decl_id":null,"docs":" Offset of any copyable read-only data, or equal to total_size if there are no rodata.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":176},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6953,"byte_end":6961,"line_start":114,"line_end":114,"column_start":11,"column_end":19},"name":"CodeSink","qualname":"::binemit::CodeSink","value":"CodeSink","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190}],"decl_id":null,"docs":" Abstract interface for adding bytes to the code segment.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7005,"byte_end":7011,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"offset","qualname":"::binemit::CodeSink::offset","value":"fn (&self) -> CodeOffset","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Get the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7082,"byte_end":7086,"line_start":119,"line_end":119,"column_start":8,"column_end":12},"name":"put1","qualname":"::binemit::CodeSink::put1","value":"fn (&mut self, _: u8) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add 1 byte to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7155,"byte_end":7159,"line_start":122,"line_end":122,"column_start":8,"column_end":12},"name":"put2","qualname":"::binemit::CodeSink::put2","value":"fn (&mut self, _: u16) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add 2 bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7229,"byte_end":7233,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"put4","qualname":"::binemit::CodeSink::put4","value":"fn (&mut self, _: u32) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add 4 bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7303,"byte_end":7307,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"put8","qualname":"::binemit::CodeSink::put8","value":"fn (&mut self, _: u64) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add 8 bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7403,"byte_end":7412,"line_start":131,"line_end":131,"column_start":8,"column_end":17},"name":"reloc_ebb","qualname":"::binemit::CodeSink::reloc_ebb","value":"fn (&mut self, _: Reloc, _: CodeOffset) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add a relocation referencing an EBB at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7553,"byte_end":7567,"line_start":134,"line_end":134,"column_start":8,"column_end":22},"name":"reloc_external","qualname":"::binemit::CodeSink::reloc_external","value":"fn (&mut self, _: Reloc, _: &ExternalName, _: Addend) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add a relocation referencing an external symbol plus the addend at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7676,"byte_end":7690,"line_start":137,"line_end":137,"column_start":8,"column_end":22},"name":"reloc_constant","qualname":"::binemit::CodeSink::reloc_constant","value":"fn (&mut self, _: Reloc, _: ConstantOffset) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add a relocation referencing a constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7791,"byte_end":7799,"line_start":140,"line_end":140,"column_start":8,"column_end":16},"name":"reloc_jt","qualname":"::binemit::CodeSink::reloc_jt","value":"fn (&mut self, _: Reloc, _: JumpTable) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add a relocation referencing a jump table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":7897,"byte_end":7901,"line_start":143,"line_end":143,"column_start":8,"column_end":12},"name":"trap","qualname":"::binemit::CodeSink::trap","value":"fn (&mut self, _: TrapCode, _: SourceLoc) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add trap information for the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8018,"byte_end":8034,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"begin_jumptables","qualname":"::binemit::CodeSink::begin_jumptables","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Machine code output is complete, jump table data may follow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8125,"byte_end":8137,"line_start":149,"line_end":149,"column_start":8,"column_end":20},"name":"begin_rodata","qualname":"::binemit::CodeSink::begin_rodata","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Jump table output is complete, raw read-only data may follow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8213,"byte_end":8224,"line_start":152,"line_end":152,"column_start":8,"column_end":19},"name":"end_codegen","qualname":"::binemit::CodeSink::end_codegen","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Read-only data output is complete, we're done.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8296,"byte_end":8308,"line_start":155,"line_end":155,"column_start":8,"column_end":20},"name":"add_stackmap","qualname":"::binemit::CodeSink::add_stackmap","value":"fn (&mut self, _: &[Value], _: &Function, _: &dyn TargetIsa) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add a stackmap at the current code offset.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8418,"byte_end":8430,"line_start":160,"line_end":160,"column_start":8,"column_end":20},"name":"bad_encoding","qualname":"::binemit::bad_encoding","value":"fn (func: &Function, inst: Inst) -> !","parent":null,"children":[],"decl_id":null,"docs":" Report a bad encoding error.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8403,"byte_end":8410,"line_start":159,"line_end":159,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":8804,"byte_end":8817,"line_start":172,"line_end":172,"column_start":8,"column_end":21},"name":"emit_function","qualname":"::binemit::emit_function","value":"fn <CS, EI> (func: &Function, emit_inst: EI, sink: &mut CS, isa: &dyn TargetIsa) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emit a function to `sink`, given an instruction emitter function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":195},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cfg_printer","qualname":"::cfg_printer","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":221}],"decl_id":null,"docs":" The `CFGPrinter` utility.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":210},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":40063,"byte_end":40073,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"CFGPrinter","qualname":"::cfg_printer::CFGPrinter","value":"CFGPrinter {  }","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" A utility for pretty-printing the CFG of a `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":40263,"byte_end":40266,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<CFGPrinter>::new","value":"fn (func: &'a Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new CFGPrinter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":40462,"byte_end":40467,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"write","qualname":"<CFGPrinter>::write","value":"fn (&self, w: &mut dyn Write) -> Result","parent":null,"children":[],"decl_id":null,"docs":" Write the CFG for this function to `w`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":224},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor","qualname":"::cursor","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":4925},{"krate":0,"index":4947},{"krate":0,"index":4946},{"krate":0,"index":4942},{"krate":0,"index":4943},{"krate":0,"index":4939},{"krate":0,"index":4940},{"krate":0,"index":4937},{"krate":0,"index":227},{"krate":0,"index":266},{"krate":0,"index":271},{"krate":0,"index":276},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":297},{"krate":0,"index":304},{"krate":0,"index":312}],"decl_id":null,"docs":" Cursor library.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4926},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":42520,"byte_end":42527,"line_start":12,"line_end":12,"column_start":5,"column_end":12},"name":"Nowhere","qualname":"::cursor::CursorPosition::Nowhere","value":"CursorPosition::Nowhere","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Cursor is not pointing anywhere. No instructions can be inserted.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4928},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":42664,"byte_end":42666,"line_start":15,"line_end":15,"column_start":5,"column_end":7},"name":"At","qualname":"::cursor::CursorPosition::At","value":"CursorPosition::At(ir::Inst)","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Cursor is pointing at an existing instruction.\n New instructions will be inserted *before* the current instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4931},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":42842,"byte_end":42848,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Before","qualname":"::cursor::CursorPosition::Before","value":"CursorPosition::Before(ir::Ebb)","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Cursor is before the beginning of an EBB. No instructions can be inserted. Calling\n `next_inst()` will move to the first instruction in the EBB.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4934},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":42969,"byte_end":42974,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"After","qualname":"::cursor::CursorPosition::After","value":"CursorPosition::After(ir::Ebb)","parent":{"krate":0,"index":4925},"children":[],"decl_id":null,"docs":" Cursor is pointing after the end of an EBB.\n New instructions will be appended to the EBB.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4925},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":42425,"byte_end":42439,"line_start":10,"line_end":10,"column_start":10,"column_end":24},"name":"CursorPosition","qualname":"::cursor::CursorPosition","value":"CursorPosition::{Nowhere, At, Before, After}","parent":null,"children":[{"krate":0,"index":4926},{"krate":0,"index":4928},{"krate":0,"index":4931},{"krate":0,"index":4934}],"decl_id":null,"docs":" The possible positions of a cursor.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":227},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43087,"byte_end":43093,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"Cursor","qualname":"::cursor::Cursor","value":"Cursor","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" All cursor types implement the `Cursor` which provides common navigation operations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43144,"byte_end":43152,"line_start":27,"line_end":27,"column_start":8,"column_end":16},"name":"position","qualname":"::cursor::Cursor::position","value":"fn (&self) -> CursorPosition","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Get the current cursor position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43221,"byte_end":43233,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"set_position","qualname":"::cursor::Cursor::set_position","value":"fn (&mut self, pos: CursorPosition) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Set the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43352,"byte_end":43358,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"srcloc","qualname":"::cursor::Cursor::srcloc","value":"fn (&self) -> ir::SourceLoc","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Get the source location that should be assigned to new instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43469,"byte_end":43479,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"set_srcloc","qualname":"::cursor::Cursor::set_srcloc","value":"fn (&mut self, srcloc: ir::SourceLoc) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Set the source location that should be assigned to new instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43605,"byte_end":43611,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"layout","qualname":"::cursor::Cursor::layout","value":"fn (&self) -> &ir::Layout","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Borrow a reference to the function layout that this cursor is navigating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":43733,"byte_end":43743,"line_start":42,"line_end":42,"column_start":8,"column_end":18},"name":"layout_mut","qualname":"::cursor::Cursor::layout_mut","value":"fn (&mut self) -> &mut ir::Layout","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Borrow a mutable reference to the function layout that this cursor is navigating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":44251,"byte_end":44262,"line_start":57,"line_end":57,"column_start":8,"column_end":19},"name":"with_srcloc","qualname":"::cursor::Cursor::with_srcloc","value":"fn (mut self, srcloc: ir::SourceLoc) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Exchange this cursor for one with a set source location.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":44450,"byte_end":44461,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"at_position","qualname":"::cursor::Cursor::at_position","value":"fn (mut self, pos: CursorPosition) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at `pos`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":45032,"byte_end":45039,"line_start":87,"line_end":87,"column_start":8,"column_end":15},"name":"at_inst","qualname":"::cursor::Cursor::at_inst","value":"fn (mut self, inst: ir::Inst) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":45779,"byte_end":45803,"line_start":110,"line_end":110,"column_start":8,"column_end":32},"name":"at_first_insertion_point","qualname":"::cursor::Cursor::at_first_insertion_point","value":"fn (mut self, ebb: ir::Ebb) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the first insertion point for `ebb`.\n This differs from `at_first_inst` in that it doesn't assume that any\n instructions have been inserted into `ebb` yet.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":46408,"byte_end":46421,"line_start":131,"line_end":131,"column_start":8,"column_end":21},"name":"at_first_inst","qualname":"::cursor::Cursor::at_first_inst","value":"fn (mut self, ebb: ir::Ebb) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the first instruction in `ebb`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":47013,"byte_end":47025,"line_start":152,"line_end":152,"column_start":8,"column_end":20},"name":"at_last_inst","qualname":"::cursor::Cursor::at_last_inst","value":"fn (mut self, ebb: ir::Ebb) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the last instruction in `ebb`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":47597,"byte_end":47607,"line_start":173,"line_end":173,"column_start":8,"column_end":18},"name":"after_inst","qualname":"::cursor::Cursor::after_inst","value":"fn (mut self, inst: ir::Inst) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned after `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":48183,"byte_end":48189,"line_start":194,"line_end":194,"column_start":8,"column_end":14},"name":"at_top","qualname":"::cursor::Cursor::at_top","value":"fn (mut self, ebb: ir::Ebb) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the top of `ebb`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":48761,"byte_end":48770,"line_start":215,"line_end":215,"column_start":8,"column_end":17},"name":"at_bottom","qualname":"::cursor::Cursor::at_bottom","value":"fn (mut self, ebb: ir::Ebb) -> Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the bottom of `ebb`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":48957,"byte_end":48968,"line_start":224,"line_end":224,"column_start":8,"column_end":19},"name":"current_ebb","qualname":"::cursor::Cursor::current_ebb","value":"fn (&self) -> Option<ir::Ebb>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Get the EBB corresponding to the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":49299,"byte_end":49311,"line_start":234,"line_end":234,"column_start":8,"column_end":20},"name":"current_inst","qualname":"::cursor::Cursor::current_inst","value":"fn (&self) -> Option<ir::Inst>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Get the instruction corresponding to the current position, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":49644,"byte_end":49659,"line_start":244,"line_end":244,"column_start":8,"column_end":23},"name":"goto_after_inst","qualname":"::cursor::Cursor::goto_after_inst","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the position after a specific instruction, which must be inserted\n in the layout. New instructions will be inserted after `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":50249,"byte_end":50258,"line_start":260,"line_end":260,"column_start":8,"column_end":17},"name":"goto_inst","qualname":"::cursor::Cursor::goto_inst","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to a specific instruction which must be inserted in the layout.\n New instructions will be inserted before `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":50618,"byte_end":50644,"line_start":268,"line_end":268,"column_start":8,"column_end":34},"name":"goto_first_insertion_point","qualname":"::cursor::Cursor::goto_first_insertion_point","value":"fn (&mut self, ebb: ir::Ebb) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the position for inserting instructions at the beginning of `ebb`,\n which unlike `goto_first_inst` doesn't assume that any instructions have\n been inserted into `ebb` yet.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":50888,"byte_end":50903,"line_start":277,"line_end":277,"column_start":8,"column_end":23},"name":"goto_first_inst","qualname":"::cursor::Cursor::goto_first_inst","value":"fn (&mut self, ebb: ir::Ebb) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the first instruction in `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":51090,"byte_end":51104,"line_start":283,"line_end":283,"column_start":8,"column_end":22},"name":"goto_last_inst","qualname":"::cursor::Cursor::goto_last_inst","value":"fn (&mut self, ebb: ir::Ebb) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the last instruction in `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":51446,"byte_end":51454,"line_start":291,"line_end":291,"column_start":8,"column_end":16},"name":"goto_top","qualname":"::cursor::Cursor::goto_top","value":"fn (&mut self, ebb: ir::Ebb) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the top of `ebb` which must be inserted into the layout.\n At this position, instructions cannot be inserted, but `next_inst()` will move to the first\n instruction in `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":51760,"byte_end":51771,"line_start":298,"line_end":298,"column_start":8,"column_end":19},"name":"goto_bottom","qualname":"::cursor::Cursor::goto_bottom","value":"fn (&mut self, ebb: ir::Ebb) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the bottom of `ebb` which must be inserted into the layout.\n At this position, inserted instructions will be appended to `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":52684,"byte_end":52692,"line_start":323,"line_end":323,"column_start":8,"column_end":16},"name":"next_ebb","qualname":"::cursor::Cursor::next_ebb","value":"fn (&mut self) -> Option<ir::Ebb>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the top of the next EBB in layout order and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":53845,"byte_end":53853,"line_start":356,"line_end":356,"column_start":8,"column_end":16},"name":"prev_ebb","qualname":"::cursor::Cursor::prev_ebb","value":"fn (&mut self) -> Option<ir::Ebb>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Go to the bottom of the previous EBB in layout order and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":55788,"byte_end":55797,"line_start":409,"line_end":409,"column_start":8,"column_end":17},"name":"next_inst","qualname":"::cursor::Cursor::next_inst","value":"fn (&mut self) -> Option<ir::Inst>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Move to the next instruction in the same EBB and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":57763,"byte_end":57772,"line_start":463,"line_end":463,"column_start":8,"column_end":17},"name":"prev_inst","qualname":"::cursor::Cursor::prev_inst","value":"fn (&mut self) -> Option<ir::Inst>","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Move to the previous instruction in the same EBB and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":59228,"byte_end":59239,"line_start":502,"line_end":502,"column_start":8,"column_end":19},"name":"insert_inst","qualname":"::cursor::Cursor::insert_inst","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Insert an instruction at the current position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":59772,"byte_end":59783,"line_start":516,"line_end":516,"column_start":8,"column_end":19},"name":"remove_inst","qualname":"::cursor::Cursor::remove_inst","value":"fn (&mut self) -> ir::Inst","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Remove the instruction under the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":60183,"byte_end":60208,"line_start":528,"line_end":528,"column_start":8,"column_end":33},"name":"remove_inst_and_step_back","qualname":"::cursor::Cursor::remove_inst_and_step_back","value":"fn (&mut self) -> ir::Inst","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Remove the instruction under the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":61359,"byte_end":61369,"line_start":549,"line_end":549,"column_start":8,"column_end":18},"name":"insert_ebb","qualname":"::cursor::Cursor::insert_ebb","value":"fn (&mut self, new_ebb: ir::Ebb) -> ()","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Insert an EBB at the current position and switch to it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":266},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":62364,"byte_end":62374,"line_start":573,"line_end":573,"column_start":12,"column_end":22},"name":"FuncCursor","qualname":"::cursor::FuncCursor","value":"FuncCursor { func }","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"decl_id":null,"docs":" Function cursor.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":270},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":62475,"byte_end":62479,"line_start":578,"line_end":578,"column_start":9,"column_end":13},"name":"func","qualname":"::cursor::FuncCursor::func","value":"&'f mut ir::function::Function","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" The referenced function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":62595,"byte_end":62598,"line_start":583,"line_end":583,"column_start":12,"column_end":15},"name":"new","qualname":"<FuncCursor>::new","value":"fn (func: &'f mut ir::Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FuncCursor` pointing nowhere.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":62847,"byte_end":62857,"line_start":592,"line_end":592,"column_start":12,"column_end":22},"name":"use_srcloc","qualname":"<FuncCursor>::use_srcloc","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Use the source location of `inst` for future instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":63043,"byte_end":63046,"line_start":597,"line_end":597,"column_start":12,"column_end":15},"name":"ins","qualname":"<FuncCursor>::ins","value":"fn (&mut self) -> ir::InsertBuilder<&mut FuncCursor<'f>>","parent":null,"children":[],"decl_id":null,"docs":" Create an instruction builder that inserts an instruction at the current position.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":65475,"byte_end":65484,"line_start":674,"line_end":674,"column_start":12,"column_end":21},"name":"EncCursor","qualname":"::cursor::EncCursor","value":"EncCursor { func, isa }","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" Encoding cursor.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":295},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":65619,"byte_end":65623,"line_start":680,"line_end":680,"column_start":9,"column_end":13},"name":"func","qualname":"::cursor::EncCursor::func","value":"&'f mut ir::function::Function","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The referenced function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":296},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":65721,"byte_end":65724,"line_start":683,"line_end":683,"column_start":9,"column_end":12},"name":"isa","qualname":"::cursor::EncCursor::isa","value":"&'f (dyn isa::TargetIsa + 'f)","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The target ISA that will be used to encode instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":65835,"byte_end":65838,"line_start":688,"line_end":688,"column_start":12,"column_end":15},"name":"new","qualname":"<EncCursor>::new","value":"fn (func: &'f mut ir::Function, isa: &'f dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EncCursor` pointing nowhere.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":66158,"byte_end":66168,"line_start":699,"line_end":699,"column_start":12,"column_end":22},"name":"use_srcloc","qualname":"<EncCursor>::use_srcloc","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Use the source location of `inst` for future instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":66498,"byte_end":66501,"line_start":708,"line_end":708,"column_start":12,"column_end":15},"name":"ins","qualname":"<EncCursor>::ins","value":"fn (&mut self) -> ir::InsertBuilder<&mut EncCursor<'f>>","parent":null,"children":[],"decl_id":null,"docs":" Create an instruction builder that will insert an encoded instruction at the current\n position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":66801,"byte_end":66811,"line_start":716,"line_end":716,"column_start":12,"column_end":22},"name":"built_inst","qualname":"<EncCursor>::built_inst","value":"fn (&self) -> ir::Inst","parent":null,"children":[],"decl_id":null,"docs":" Get the last built instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":67033,"byte_end":67045,"line_start":723,"line_end":723,"column_start":12,"column_end":24},"name":"display_inst","qualname":"<EncCursor>::display_inst","value":"fn (&self, inst: ir::Inst) -> ir::dfg::DisplayInst","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display `inst`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":318},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dbg.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dbg","qualname":"::dbg","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dbg.rs","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":326}],"decl_id":null,"docs":" Debug tracing helpers.\n","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":320},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dbg.rs","byte_start":69955,"byte_end":69974,"line_start":5,"line_end":5,"column_start":12,"column_end":31},"name":"LOG_FILENAME_PREFIX","qualname":"::dbg::LOG_FILENAME_PREFIX","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Prefix added to the log file names, just before the thread name or id.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":321},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dbg.rs","byte_start":70044,"byte_end":70055,"line_start":8,"line_end":8,"column_start":12,"column_end":23},"name":"DisplayList","qualname":"::dbg::DisplayList","value":"","parent":null,"children":[],"decl_id":null,"docs":" Helper for printing lists.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":330},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dominator_tree","qualname":"::dominator_tree","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":4949},{"krate":0,"index":4954},{"krate":0,"index":4952},{"krate":0,"index":353},{"krate":0,"index":358},{"krate":0,"index":372},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":4956},{"krate":0,"index":4963},{"krate":0,"index":4961},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":398},{"krate":0,"index":402}],"decl_id":null,"docs":" A Dominator Tree represented as mappings of Ebbs to their immediate dominator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":353},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":72063,"byte_end":72076,"line_start":40,"line_end":40,"column_start":12,"column_end":25},"name":"DominatorTree","qualname":"::dominator_tree::DominatorTree","value":"DominatorTree {  }","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357}],"decl_id":null,"docs":" The dominator tree for a single function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":72413,"byte_end":72425,"line_start":55,"line_end":55,"column_start":12,"column_end":24},"name":"is_reachable","qualname":"<DominatorTree>::is_reachable","value":"fn (&self, ebb: Ebb) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is `ebb` reachable from the entry block?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":72755,"byte_end":72768,"line_start":63,"line_end":63,"column_start":12,"column_end":25},"name":"cfg_postorder","qualname":"<DominatorTree>::cfg_postorder","value":"fn (&self) -> &[Ebb]","parent":null,"children":[],"decl_id":null,"docs":" Get the CFG post-order of EBBs that was used to compute the dominator tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":73606,"byte_end":73610,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"idom","qualname":"<DominatorTree>::idom","value":"fn (&self, ebb: Ebb) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the immediate dominator of `ebb`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":74176,"byte_end":74183,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"rpo_cmp","qualname":"<DominatorTree>::rpo_cmp","value":"fn <A, B> (&self, a: A, b: B, layout: &Layout) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two program points relative to a reverse post-order traversal of the control-flow\n graph.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":74939,"byte_end":74948,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"dominates","qualname":"<DominatorTree>::dominates","value":"fn <A, B> (&self, a: A, b: B, layout: &Layout) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `a` dominates `b`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":75805,"byte_end":75819,"line_start":140,"line_end":140,"column_start":12,"column_end":26},"name":"last_dominator","qualname":"<DominatorTree>::last_dominator","value":"fn <B> (&self, a: Ebb, b: B, layout: &Layout) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Find the last instruction in `a` that dominates `b`.\n If no instructions in `a` dominate `b`, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":76969,"byte_end":76985,"line_start":173,"line_end":173,"column_start":12,"column_end":28},"name":"common_dominator","qualname":"<DominatorTree>::common_dominator","value":"fn (&self, mut a: BasicBlock, mut b: BasicBlock, layout: &Layout) -> BasicBlock","parent":null,"children":[],"decl_id":null,"docs":" Compute the common dominator of two basic blocks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":78493,"byte_end":78496,"line_start":218,"line_end":218,"column_start":12,"column_end":15},"name":"new","qualname":"<DominatorTree>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new blank dominator tree. Use `compute` to compute the dominator tree for a\n function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":78731,"byte_end":78744,"line_start":228,"line_end":228,"column_start":12,"column_end":25},"name":"with_function","qualname":"<DominatorTree>::with_function","value":"fn (func: &Function, cfg: &ControlFlowGraph) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate and compute a dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":79204,"byte_end":79211,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"compute","qualname":"<DominatorTree>::compute","value":"fn (&mut self, func: &Function, cfg: &ControlFlowGraph) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset and compute a CFG post-order and dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":79616,"byte_end":79621,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"clear","qualname":"<DominatorTree>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the data structures used to represent the dominator tree. This will leave the tree in\n a state where `is_valid()` returns false.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":80091,"byte_end":80099,"line_start":263,"line_end":263,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<DominatorTree>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the dominator tree is in a valid state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":88943,"byte_end":88962,"line_start":458,"line_end":458,"column_start":12,"column_end":31},"name":"recompute_split_ebb","qualname":"<DominatorTree>::recompute_split_ebb","value":"fn (&mut self, old_ebb: Ebb, new_ebb: Ebb, split_jump_inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" When splitting an `Ebb` using `Layout::split_ebb`, you can use this method to update\n the dominator tree locally rather than recomputing it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":91586,"byte_end":91607,"line_start":516,"line_end":516,"column_start":12,"column_end":33},"name":"DominatorTreePreorder","qualname":"::dominator_tree::DominatorTreePreorder","value":"DominatorTreePreorder {  }","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390}],"decl_id":null,"docs":" Optional pre-order information that can be computed for a dominator tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":92454,"byte_end":92457,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"name":"new","qualname":"<DominatorTreePreorder>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank `DominatorTreePreorder`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":92642,"byte_end":92649,"line_start":551,"line_end":551,"column_start":12,"column_end":19},"name":"compute","qualname":"<DominatorTreePreorder>::compute","value":"fn (&mut self, domtree: &DominatorTree, layout: &Layout) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Recompute this data structure to match `domtree`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":94641,"byte_end":94650,"line_start":600,"line_end":600,"column_start":12,"column_end":21},"name":"ChildIter","qualname":"::dominator_tree::ChildIter","value":"ChildIter {  }","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397}],"decl_id":null,"docs":" An iterator that enumerates the direct children of an EBB in the dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":95298,"byte_end":95306,"line_start":623,"line_end":623,"column_start":12,"column_end":20},"name":"children","qualname":"<DominatorTreePreorder>::children","value":"fn (&self, ebb: Ebb) -> ChildIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the direct children of `ebb` in the dominator tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":95805,"byte_end":95814,"line_start":637,"line_end":637,"column_start":12,"column_end":21},"name":"dominates","qualname":"<DominatorTreePreorder>::dominates","value":"fn (&self, a: Ebb, b: Ebb) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Fast, constant time dominance check with EBB granularity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":96062,"byte_end":96073,"line_start":644,"line_end":644,"column_start":12,"column_end":23},"name":"pre_cmp_ebb","qualname":"<DominatorTreePreorder>::pre_cmp_ebb","value":"fn (&self, a: Ebb, b: Ebb) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two EBBs according to the dominator pre-order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":96475,"byte_end":96482,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"pre_cmp","qualname":"<DominatorTreePreorder>::pre_cmp","value":"fn <A, B> (&self, a: A, b: B, layout: &Layout) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two program points according to the dominator tree pre-order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":97072,"byte_end":97083,"line_start":669,"line_end":669,"column_start":12,"column_end":23},"name":"pre_cmp_def","qualname":"<DominatorTreePreorder>::pre_cmp_def","value":"fn (&self, a: Value, b: Value, func: &Function) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two value defs according to the dominator tree pre-order.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":411},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flowgraph","qualname":"::flowgraph","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":4965},{"krate":0,"index":4975},{"krate":0,"index":4971},{"krate":0,"index":4972},{"krate":0,"index":4968},{"krate":0,"index":4969},{"krate":0,"index":421},{"krate":0,"index":4977},{"krate":0,"index":4982},{"krate":0,"index":4980},{"krate":0,"index":423},{"krate":0,"index":428},{"krate":0,"index":441},{"krate":0,"index":445},{"krate":0,"index":450}],"decl_id":null,"docs":" A control flow graph represented as mappings of extended basic blocks to their predecessors\n and successors.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4965},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":108315,"byte_end":108325,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"BasicBlock","qualname":"::flowgraph::BasicBlock","value":"BasicBlock { ebb, inst }","parent":null,"children":[{"krate":0,"index":4966},{"krate":0,"index":4967}],"decl_id":null,"docs":" A basic block denoted by its enclosing Ebb and last instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4966},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":108363,"byte_end":108366,"line_start":37,"line_end":37,"column_start":9,"column_end":12},"name":"ebb","qualname":"::flowgraph::BasicBlock::ebb","value":"ir::entities::Ebb","parent":{"krate":0,"index":4965},"children":[],"decl_id":null,"docs":" Enclosing Ebb key.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4967},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":108426,"byte_end":108430,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"inst","qualname":"::flowgraph::BasicBlock::inst","value":"ir::entities::Inst","parent":{"krate":0,"index":4965},"children":[],"decl_id":null,"docs":" Last instruction in the basic block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":108525,"byte_end":108528,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<BasicBlock>::new","value":"fn (ebb: Ebb, inst: Inst) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenient method to construct new BasicBlock.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":423},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":109865,"byte_end":109881,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"ControlFlowGraph","qualname":"::flowgraph::ControlFlowGraph","value":"ControlFlowGraph {  }","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427}],"decl_id":null,"docs":" The Control Flow Graph maintains a mapping of ebbs to their predecessors\n and successors where predecessors are basic blocks and successors are\n extended basic blocks.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":110116,"byte_end":110119,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<ControlFlowGraph>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new blank control flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":110406,"byte_end":110411,"line_start":93,"line_end":93,"column_start":12,"column_end":17},"name":"clear","qualname":"<ControlFlowGraph>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this control flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":110630,"byte_end":110643,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"with_function","qualname":"<ControlFlowGraph>::with_function","value":"fn (func: &Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate and compute the control flow graph for `func`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":110914,"byte_end":110921,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"compute","qualname":"<ControlFlowGraph>::compute","value":"fn (&mut self, func: &Function) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the control flow graph of `func`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":112967,"byte_end":112980,"line_start":160,"line_end":160,"column_start":12,"column_end":25},"name":"recompute_ebb","qualname":"<ControlFlowGraph>::recompute_ebb","value":"fn (&mut self, func: &Function, ebb: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Recompute the control flow graph of `ebb`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":113509,"byte_end":113518,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"pred_iter","qualname":"<ControlFlowGraph>::pred_iter","value":"fn (&self, ebb: Ebb) -> PredIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the CFG predecessors to `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":113696,"byte_end":113705,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"succ_iter","qualname":"<ControlFlowGraph>::succ_iter","value":"fn (&self, ebb: Ebb) -> SuccIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the CFG successors to `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":114140,"byte_end":114148,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ControlFlowGraph>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the CFG is in a valid state.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":114348,"byte_end":114356,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"PredIter","qualname":"::flowgraph::PredIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over EBB predecessors. The iterator type is `BasicBlock`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":450},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":114650,"byte_end":114658,"line_start":210,"line_end":210,"column_start":10,"column_end":18},"name":"SuccIter","qualname":"::flowgraph::SuccIter","value":"bforest::SetIter<'a, Ebb>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over EBB successors. The iterator type is `Ebb`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":452},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ir","qualname":"::ir","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":524},{"krate":0,"index":585},{"krate":0,"index":729},{"krate":0,"index":779},{"krate":0,"index":850},{"krate":0,"index":870},{"krate":0,"index":879},{"krate":0,"index":985},{"krate":0,"index":1000},{"krate":0,"index":1008},{"krate":0,"index":1134},{"krate":0,"index":1262},{"krate":0,"index":1285},{"krate":0,"index":1375},{"krate":0,"index":1409},{"krate":0,"index":1435},{"krate":0,"index":1473},{"krate":0,"index":1483},{"krate":0,"index":1543},{"krate":0,"index":1551},{"krate":0,"index":1565},{"krate":0,"index":1612},{"krate":0,"index":1652},{"krate":0,"index":1658},{"krate":0,"index":1662},{"krate":0,"index":1665},{"krate":0,"index":1678},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1689},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":7424},{"krate":0,"index":7439},{"krate":0,"index":7437},{"krate":0,"index":7433},{"krate":0,"index":7434},{"krate":0,"index":7430},{"krate":0,"index":7431},{"krate":0,"index":7427},{"krate":0,"index":7444},{"krate":0,"index":7447},{"krate":0,"index":7449},{"krate":0,"index":7440},{"krate":0,"index":7442},{"krate":0,"index":7452},{"krate":0,"index":7457},{"krate":0,"index":7455},{"krate":0,"index":7459},{"krate":0,"index":7468},{"krate":0,"index":7466}],"decl_id":null,"docs":" Representation of Cranelift IR functions.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":123685,"byte_end":123700,"line_start":20,"line_end":20,"column_start":11,"column_end":26},"name":"InstBuilderBase","qualname":"::ir::builder::InstBuilderBase","value":"InstBuilderBase<'f>: Sized","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"decl_id":null,"docs":" Base trait for instruction builders.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":123832,"byte_end":123847,"line_start":23,"line_end":23,"column_start":8,"column_end":23},"name":"data_flow_graph","qualname":"::ir::builder::InstBuilderBase::data_flow_graph","value":"fn (&self) -> &DataFlowGraph","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Get an immutable reference to the data flow graph that will hold the constructed\n instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":123989,"byte_end":124008,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"data_flow_graph_mut","qualname":"::ir::builder::InstBuilderBase::data_flow_graph_mut","value":"fn (&mut self) -> &mut DataFlowGraph","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Get a mutable reference to the data flow graph that will hold the constructed\n instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":124322,"byte_end":124327,"line_start":32,"line_end":32,"column_start":8,"column_end":13},"name":"build","qualname":"::ir::builder::InstBuilderBase::build","value":"fn (self, data: InstructionData, ctrl_typevar: Type) -> (Inst, &'f mut DataFlowGraph)","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Insert an instruction and return a reference to it, consuming the builder.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4984},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10521021,"byte_end":10521032,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"InstBuilder","qualname":"::ir::builder::InstBuilder","value":"InstBuilder<'f>: InstBuilderBase<'f>","parent":null,"children":[{"krate":0,"index":4986},{"krate":0,"index":4987},{"krate":0,"index":4988},{"krate":0,"index":4989},{"krate":0,"index":4990},{"krate":0,"index":4992},{"krate":0,"index":4994},{"krate":0,"index":4996},{"krate":0,"index":4997},{"krate":0,"index":4999},{"krate":0,"index":5000},{"krate":0,"index":5001},{"krate":0,"index":5002},{"krate":0,"index":5004},{"krate":0,"index":5006},{"krate":0,"index":5008},{"krate":0,"index":5010},{"krate":0,"index":5013},{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5018},{"krate":0,"index":5019},{"krate":0,"index":5020},{"krate":0,"index":5021},{"krate":0,"index":5024},{"krate":0,"index":5027},{"krate":0,"index":5030},{"krate":0,"index":5033},{"krate":0,"index":5036},{"krate":0,"index":5039},{"krate":0,"index":5042},{"krate":0,"index":5045},{"krate":0,"index":5048},{"krate":0,"index":5051},{"krate":0,"index":5054},{"krate":0,"index":5057},{"krate":0,"index":5060},{"krate":0,"index":5063},{"krate":0,"index":5066},{"krate":0,"index":5069},{"krate":0,"index":5072},{"krate":0,"index":5075},{"krate":0,"index":5078},{"krate":0,"index":5081},{"krate":0,"index":5084},{"krate":0,"index":5087},{"krate":0,"index":5089},{"krate":0,"index":5091},{"krate":0,"index":5093},{"krate":0,"index":5094},{"krate":0,"index":5095},{"krate":0,"index":5097},{"krate":0,"index":5098},{"krate":0,"index":5099},{"krate":0,"index":5101},{"krate":0,"index":5103},{"krate":0,"index":5105},{"krate":0,"index":5107},{"krate":0,"index":5109},{"krate":0,"index":5111},{"krate":0,"index":5113},{"krate":0,"index":5114},{"krate":0,"index":5115},{"krate":0,"index":5116},{"krate":0,"index":5118},{"krate":0,"index":5119},{"krate":0,"index":5120},{"krate":0,"index":5121},{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5126},{"krate":0,"index":5129},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5133},{"krate":0,"index":5135},{"krate":0,"index":5137},{"krate":0,"index":5138},{"krate":0,"index":5140},{"krate":0,"index":5142},{"krate":0,"index":5143},{"krate":0,"index":5144},{"krate":0,"index":5145},{"krate":0,"index":5146},{"krate":0,"index":5147},{"krate":0,"index":5148},{"krate":0,"index":5149},{"krate":0,"index":5151},{"krate":0,"index":5153},{"krate":0,"index":5155},{"krate":0,"index":5158},{"krate":0,"index":5159},{"krate":0,"index":5161},{"krate":0,"index":5162},{"krate":0,"index":5163},{"krate":0,"index":5164},{"krate":0,"index":5165},{"krate":0,"index":5166},{"krate":0,"index":5167},{"krate":0,"index":5168},{"krate":0,"index":5169},{"krate":0,"index":5170},{"krate":0,"index":5171},{"krate":0,"index":5172},{"krate":0,"index":5173},{"krate":0,"index":5174},{"krate":0,"index":5175},{"krate":0,"index":5177},{"krate":0,"index":5179},{"krate":0,"index":5181},{"krate":0,"index":5183},{"krate":0,"index":5185},{"krate":0,"index":5187},{"krate":0,"index":5189},{"krate":0,"index":5190},{"krate":0,"index":5191},{"krate":0,"index":5192},{"krate":0,"index":5193},{"krate":0,"index":5194},{"krate":0,"index":5195},{"krate":0,"index":5196},{"krate":0,"index":5197},{"krate":0,"index":5198},{"krate":0,"index":5199},{"krate":0,"index":5200},{"krate":0,"index":5201},{"krate":0,"index":5202},{"krate":0,"index":5203},{"krate":0,"index":5204},{"krate":0,"index":5205},{"krate":0,"index":5206},{"krate":0,"index":5207},{"krate":0,"index":5208},{"krate":0,"index":5210},{"krate":0,"index":5212},{"krate":0,"index":5214},{"krate":0,"index":5215},{"krate":0,"index":5216},{"krate":0,"index":5218},{"krate":0,"index":5220},{"krate":0,"index":5221},{"krate":0,"index":5222},{"krate":0,"index":5223},{"krate":0,"index":5225},{"krate":0,"index":5227},{"krate":0,"index":5229},{"krate":0,"index":5230},{"krate":0,"index":5231},{"krate":0,"index":5232},{"krate":0,"index":5233},{"krate":0,"index":5234},{"krate":0,"index":5236},{"krate":0,"index":5237},{"krate":0,"index":5238},{"krate":0,"index":5239},{"krate":0,"index":5240},{"krate":0,"index":5241},{"krate":0,"index":5242},{"krate":0,"index":5243},{"krate":0,"index":5244},{"krate":0,"index":5245},{"krate":0,"index":5246},{"krate":0,"index":5247},{"krate":0,"index":5248},{"krate":0,"index":5249},{"krate":0,"index":5250},{"krate":0,"index":5251},{"krate":0,"index":5252},{"krate":0,"index":5253},{"krate":0,"index":5255},{"krate":0,"index":5257},{"krate":0,"index":5258},{"krate":0,"index":5259},{"krate":0,"index":5260},{"krate":0,"index":5261},{"krate":0,"index":5262},{"krate":0,"index":5263},{"krate":0,"index":5264},{"krate":0,"index":5265},{"krate":0,"index":5266},{"krate":0,"index":5267},{"krate":0,"index":5268},{"krate":0,"index":5269},{"krate":0,"index":5270},{"krate":0,"index":5271},{"krate":0,"index":5272},{"krate":0,"index":5273},{"krate":0,"index":5274},{"krate":0,"index":5275},{"krate":0,"index":5276},{"krate":0,"index":5277},{"krate":0,"index":5278},{"krate":0,"index":5279},{"krate":0,"index":5280},{"krate":0,"index":5281},{"krate":0,"index":5282},{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5285},{"krate":0,"index":5286},{"krate":0,"index":5287},{"krate":0,"index":5288},{"krate":0,"index":5290},{"krate":0,"index":5291},{"krate":0,"index":5293},{"krate":0,"index":5295},{"krate":0,"index":5297},{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":5302},{"krate":0,"index":5303},{"krate":0,"index":5304},{"krate":0,"index":5305},{"krate":0,"index":5306},{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5309},{"krate":0,"index":5310},{"krate":0,"index":5311},{"krate":0,"index":5312},{"krate":0,"index":5313},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5316},{"krate":0,"index":5317},{"krate":0,"index":5318},{"krate":0,"index":5319},{"krate":0,"index":5320},{"krate":0,"index":5321},{"krate":0,"index":5322},{"krate":0,"index":5323},{"krate":0,"index":5324},{"krate":0,"index":5325},{"krate":0,"index":5326},{"krate":0,"index":5327},{"krate":0,"index":5328},{"krate":0,"index":5329},{"krate":0,"index":5330},{"krate":0,"index":5331},{"krate":0,"index":5332},{"krate":0,"index":5333},{"krate":0,"index":5334},{"krate":0,"index":5335},{"krate":0,"index":5336},{"krate":0,"index":5337},{"krate":0,"index":5338},{"krate":0,"index":5339},{"krate":0,"index":5340},{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343},{"krate":0,"index":5344},{"krate":0,"index":5345},{"krate":0,"index":5346},{"krate":0,"index":5347},{"krate":0,"index":5348},{"krate":0,"index":5349},{"krate":0,"index":5350},{"krate":0,"index":5351},{"krate":0,"index":5352},{"krate":0,"index":5353},{"krate":0,"index":5354},{"krate":0,"index":5355},{"krate":0,"index":5356}],"decl_id":null,"docs":" Convenience methods for building instructions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4986},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10521404,"byte_end":10521408,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"jump","qualname":"::ir::builder::InstBuilder::jump","value":"fn (mut self, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Jump.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10521372,"byte_end":10521396,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4987},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10522192,"byte_end":10522203,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"fallthrough","qualname":"::ir::builder::InstBuilder::fallthrough","value":"fn (mut self, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Fall through to the next EBB.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10522160,"byte_end":10522184,"line_start":48,"line_end":48,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4988},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10522882,"byte_end":10522885,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"brz","qualname":"::ir::builder::InstBuilder::brz","value":"fn (mut self, c: ir::Value, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Branch when zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10522850,"byte_end":10522874,"line_start":68,"line_end":68,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4989},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10523672,"byte_end":10523676,"line_start":91,"line_end":91,"column_start":8,"column_end":12},"name":"brnz","qualname":"::ir::builder::InstBuilder::brnz","value":"fn (mut self, c: ir::Value, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Branch when non-zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10523640,"byte_end":10523664,"line_start":90,"line_end":90,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4990},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10525028,"byte_end":10525035,"line_start":130,"line_end":130,"column_start":8,"column_end":15},"name":"br_icmp","qualname":"::ir::builder::InstBuilder::br_icmp","value":"fn <T1> (mut self, Cond: T1, x: ir::Value, y: ir::Value, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compare scalar integers and branch.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10524996,"byte_end":10525020,"line_start":129,"line_end":129,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4992},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10525997,"byte_end":10526001,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"brif","qualname":"::ir::builder::InstBuilder::brif","value":"fn <T1> (mut self, Cond: T1, f: ir::Value, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Branch when condition is true in integer CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10525965,"byte_end":10525989,"line_start":152,"line_end":152,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4994},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10526869,"byte_end":10526873,"line_start":174,"line_end":174,"column_start":8,"column_end":12},"name":"brff","qualname":"::ir::builder::InstBuilder::brff","value":"fn <T1> (mut self, Cond: T1, f: ir::Value, EBB: ir::Ebb, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Branch when condition is true in floating point CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10526837,"byte_end":10526861,"line_start":173,"line_end":173,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4996},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10528269,"byte_end":10528277,"line_start":206,"line_end":206,"column_start":8,"column_end":16},"name":"br_table","qualname":"::ir::builder::InstBuilder::br_table","value":"fn (self, x: ir::Value, EBB: ir::Ebb, JT: ir::JumpTable) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Indirect branch via jump table.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10528237,"byte_end":10528261,"line_start":205,"line_end":205,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4997},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10529150,"byte_end":10529166,"line_start":231,"line_end":231,"column_start":8,"column_end":24},"name":"jump_table_entry","qualname":"::ir::builder::InstBuilder::jump_table_entry","value":"fn <T1> (self, x: ir::Value, addr: ir::Value, Size: T1, JT: ir::JumpTable) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Get an entry from a jump table.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10529118,"byte_end":10529142,"line_start":230,"line_end":230,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4999},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10530103,"byte_end":10530118,"line_start":254,"line_end":254,"column_start":8,"column_end":23},"name":"jump_table_base","qualname":"::ir::builder::InstBuilder::jump_table_base","value":"fn (self, iAddr: crate::ir::Type, JT: ir::JumpTable) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Get the absolute base address of a jump table.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10530071,"byte_end":10530095,"line_start":253,"line_end":253,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5000},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10530623,"byte_end":10530645,"line_start":269,"line_end":269,"column_start":8,"column_end":30},"name":"indirect_jump_table_br","qualname":"::ir::builder::InstBuilder::indirect_jump_table_br","value":"fn (self, addr: ir::Value, JT: ir::JumpTable) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Branch indirectly via a jump table entry.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10530591,"byte_end":10530615,"line_start":268,"line_end":268,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5001},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10530930,"byte_end":10530939,"line_start":276,"line_end":276,"column_start":8,"column_end":17},"name":"debugtrap","qualname":"::ir::builder::InstBuilder::debugtrap","value":"fn (self) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Encodes an assembly debug trap.\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10530898,"byte_end":10530922,"line_start":275,"line_end":275,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5002},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10531170,"byte_end":10531174,"line_start":286,"line_end":286,"column_start":8,"column_end":12},"name":"trap","qualname":"::ir::builder::InstBuilder::trap","value":"fn <T1> (self, code: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Terminate execution unconditionally.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10531138,"byte_end":10531162,"line_start":285,"line_end":285,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5004},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10531575,"byte_end":10531580,"line_start":300,"line_end":300,"column_start":8,"column_end":13},"name":"trapz","qualname":"::ir::builder::InstBuilder::trapz","value":"fn <T1> (self, c: ir::Value, code: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Trap when zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10531543,"byte_end":10531567,"line_start":299,"line_end":299,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5006},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10532044,"byte_end":10532058,"line_start":314,"line_end":314,"column_start":8,"column_end":22},"name":"resumable_trap","qualname":"::ir::builder::InstBuilder::resumable_trap","value":"fn <T1> (self, code: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" A resumable trap.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10532012,"byte_end":10532036,"line_start":313,"line_end":313,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5008},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10532468,"byte_end":10532474,"line_start":328,"line_end":328,"column_start":8,"column_end":14},"name":"trapnz","qualname":"::ir::builder::InstBuilder::trapnz","value":"fn <T1> (self, c: ir::Value, code: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Trap when non-zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10532436,"byte_end":10532460,"line_start":327,"line_end":327,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5010},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10533067,"byte_end":10533073,"line_start":343,"line_end":343,"column_start":8,"column_end":14},"name":"trapif","qualname":"::ir::builder::InstBuilder::trapif","value":"fn <T1, T2> (self, Cond: T1, f: ir::Value, code: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Trap when condition is true in integer CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10533035,"byte_end":10533059,"line_start":342,"line_end":342,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5013},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10533705,"byte_end":10533711,"line_start":358,"line_end":358,"column_start":8,"column_end":14},"name":"trapff","qualname":"::ir::builder::InstBuilder::trapff","value":"fn <T1, T2> (self, Cond: T1, f: ir::Value, code: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Trap when condition is true in floating point CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10533673,"byte_end":10533697,"line_start":357,"line_end":357,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5016},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10534302,"byte_end":10534309,"line_start":374,"line_end":374,"column_start":8,"column_end":15},"name":"return_","qualname":"::ir::builder::InstBuilder::return_","value":"fn (mut self, rvals: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Return from the function.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10534270,"byte_end":10534294,"line_start":373,"line_end":373,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5017},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10534952,"byte_end":10534970,"line_start":393,"line_end":393,"column_start":8,"column_end":26},"name":"fallthrough_return","qualname":"::ir::builder::InstBuilder::fallthrough_return","value":"fn (mut self, rvals: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Return from the function by fallthrough.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10534920,"byte_end":10534944,"line_start":392,"line_end":392,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5018},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10535667,"byte_end":10535671,"line_start":416,"line_end":416,"column_start":8,"column_end":12},"name":"call","qualname":"::ir::builder::InstBuilder::call","value":"fn (mut self, FN: ir::FuncRef, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Direct function call.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10535635,"byte_end":10535659,"line_start":415,"line_end":415,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5019},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10536663,"byte_end":10536676,"line_start":445,"line_end":445,"column_start":8,"column_end":21},"name":"call_indirect","qualname":"::ir::builder::InstBuilder::call_indirect","value":"fn (mut self, SIG: ir::SigRef, callee: ir::Value, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Indirect function call.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10536631,"byte_end":10536655,"line_start":444,"line_end":444,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5020},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10537747,"byte_end":10537756,"line_start":473,"line_end":473,"column_start":8,"column_end":17},"name":"func_addr","qualname":"::ir::builder::InstBuilder::func_addr","value":"fn (self, iAddr: crate::ir::Type, FN: ir::FuncRef) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Get the address of a function.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10537715,"byte_end":10537739,"line_start":472,"line_end":472,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5021},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10538425,"byte_end":10538429,"line_start":494,"line_end":494,"column_start":8,"column_end":12},"name":"load","qualname":"::ir::builder::InstBuilder::load","value":"fn <T1, T2> (self, Mem: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load from memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10538393,"byte_end":10538417,"line_start":493,"line_end":493,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5024},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10539267,"byte_end":10539279,"line_start":517,"line_end":517,"column_start":8,"column_end":20},"name":"load_complex","qualname":"::ir::builder::InstBuilder::load_complex","value":"fn <T1, T2> (mut self, Mem: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load from memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10539235,"byte_end":10539259,"line_start":516,"line_end":516,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5027},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10540221,"byte_end":10540226,"line_start":541,"line_end":541,"column_start":8,"column_end":13},"name":"store","qualname":"::ir::builder::InstBuilder::store","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10540189,"byte_end":10540213,"line_start":540,"line_end":540,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5030},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10540979,"byte_end":10540992,"line_start":560,"line_end":560,"column_start":8,"column_end":21},"name":"store_complex","qualname":"::ir::builder::InstBuilder::store_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10540947,"byte_end":10540971,"line_start":559,"line_end":559,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5033},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10542096,"byte_end":10542102,"line_start":588,"line_end":588,"column_start":8,"column_end":14},"name":"uload8","qualname":"::ir::builder::InstBuilder::uload8","value":"fn <T1, T2> (self, iExt8: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``p + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10542064,"byte_end":10542088,"line_start":587,"line_end":587,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5036},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10542949,"byte_end":10542963,"line_start":610,"line_end":610,"column_start":8,"column_end":22},"name":"uload8_complex","qualname":"::ir::builder::InstBuilder::uload8_complex","value":"fn <T1, T2> (mut self, iExt8: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``sum(args) + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10542917,"byte_end":10542941,"line_start":609,"line_end":609,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5039},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10544021,"byte_end":10544027,"line_start":637,"line_end":637,"column_start":8,"column_end":14},"name":"sload8","qualname":"::ir::builder::InstBuilder::sload8","value":"fn <T1, T2> (self, iExt8: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``p + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10543989,"byte_end":10544013,"line_start":636,"line_end":636,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5042},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10544874,"byte_end":10544888,"line_start":659,"line_end":659,"column_start":8,"column_end":22},"name":"sload8_complex","qualname":"::ir::builder::InstBuilder::sload8_complex","value":"fn <T1, T2> (mut self, iExt8: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``sum(args) + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10544842,"byte_end":10544866,"line_start":658,"line_end":658,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5045},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10545834,"byte_end":10545841,"line_start":682,"line_end":682,"column_start":8,"column_end":15},"name":"istore8","qualname":"::ir::builder::InstBuilder::istore8","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store the low 8 bits of ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10545802,"byte_end":10545826,"line_start":681,"line_end":681,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5048},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10546594,"byte_end":10546609,"line_start":700,"line_end":700,"column_start":8,"column_end":23},"name":"istore8_complex","qualname":"::ir::builder::InstBuilder::istore8_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store the low 8 bits of ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10546562,"byte_end":10546586,"line_start":699,"line_end":699,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5051},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10547720,"byte_end":10547727,"line_start":728,"line_end":728,"column_start":8,"column_end":15},"name":"uload16","qualname":"::ir::builder::InstBuilder::uload16","value":"fn <T1, T2> (self, iExt16: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``p + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10547688,"byte_end":10547712,"line_start":727,"line_end":727,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5054},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10548582,"byte_end":10548597,"line_start":750,"line_end":750,"column_start":8,"column_end":23},"name":"uload16_complex","qualname":"::ir::builder::InstBuilder::uload16_complex","value":"fn <T1, T2> (mut self, iExt16: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``sum(args) + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10548550,"byte_end":10548574,"line_start":749,"line_end":749,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5057},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10549663,"byte_end":10549670,"line_start":777,"line_end":777,"column_start":8,"column_end":15},"name":"sload16","qualname":"::ir::builder::InstBuilder::sload16","value":"fn <T1, T2> (self, iExt16: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``p + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10549631,"byte_end":10549655,"line_start":776,"line_end":776,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5060},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10550525,"byte_end":10550540,"line_start":799,"line_end":799,"column_start":8,"column_end":23},"name":"sload16_complex","qualname":"::ir::builder::InstBuilder::sload16_complex","value":"fn <T1, T2> (mut self, iExt16: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``sum(args) + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10550493,"byte_end":10550517,"line_start":798,"line_end":798,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5063},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10551493,"byte_end":10551501,"line_start":822,"line_end":822,"column_start":8,"column_end":16},"name":"istore16","qualname":"::ir::builder::InstBuilder::istore16","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store the low 16 bits of ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10551461,"byte_end":10551485,"line_start":821,"line_end":821,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5066},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10552259,"byte_end":10552275,"line_start":840,"line_end":840,"column_start":8,"column_end":24},"name":"istore16_complex","qualname":"::ir::builder::InstBuilder::istore16_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store the low 16 bits of ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10552227,"byte_end":10552251,"line_start":839,"line_end":839,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5069},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10553302,"byte_end":10553309,"line_start":867,"line_end":867,"column_start":8,"column_end":15},"name":"uload32","qualname":"::ir::builder::InstBuilder::uload32","value":"fn <T1, T2> (self, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``p + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10553270,"byte_end":10553294,"line_start":866,"line_end":866,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5072},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10554125,"byte_end":10554140,"line_start":889,"line_end":889,"column_start":8,"column_end":23},"name":"uload32_complex","qualname":"::ir::builder::InstBuilder::uload32_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``sum(args) + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10554093,"byte_end":10554117,"line_start":888,"line_end":888,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5075},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10555104,"byte_end":10555111,"line_start":915,"line_end":915,"column_start":8,"column_end":15},"name":"sload32","qualname":"::ir::builder::InstBuilder::sload32","value":"fn <T1, T2> (self, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``p + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10555072,"byte_end":10555096,"line_start":914,"line_end":914,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5078},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10555927,"byte_end":10555942,"line_start":937,"line_end":937,"column_start":8,"column_end":23},"name":"sload32_complex","qualname":"::ir::builder::InstBuilder::sload32_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``sum(args) + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10555895,"byte_end":10555919,"line_start":936,"line_end":936,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5081},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10556878,"byte_end":10556886,"line_start":960,"line_end":960,"column_start":8,"column_end":16},"name":"istore32","qualname":"::ir::builder::InstBuilder::istore32","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store the low 32 bits of ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10556846,"byte_end":10556870,"line_start":959,"line_end":959,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5084},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10557644,"byte_end":10557660,"line_start":978,"line_end":978,"column_start":8,"column_end":24},"name":"istore32_complex","qualname":"::ir::builder::InstBuilder::istore32_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store the low 32 bits of ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10557612,"byte_end":10557636,"line_start":977,"line_end":977,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5087},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10558841,"byte_end":10558851,"line_start":1009,"line_end":1009,"column_start":8,"column_end":18},"name":"stack_load","qualname":"::ir::builder::InstBuilder::stack_load","value":"fn <T1> (self, Mem: crate::ir::Type, SS: ir::StackSlot, Offset: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load a value from a stack slot at the constant offset.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10558809,"byte_end":10558833,"line_start":1008,"line_end":1008,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5089},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10559637,"byte_end":10559648,"line_start":1030,"line_end":1030,"column_start":8,"column_end":19},"name":"stack_store","qualname":"::ir::builder::InstBuilder::stack_store","value":"fn <T1> (self, x: ir::Value, SS: ir::StackSlot, Offset: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store a value to a stack slot at a constant offset.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10559605,"byte_end":10559629,"line_start":1029,"line_end":1029,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5091},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10560429,"byte_end":10560439,"line_start":1052,"line_end":1052,"column_start":8,"column_end":18},"name":"stack_addr","qualname":"::ir::builder::InstBuilder::stack_addr","value":"fn <T1> (self, iAddr: crate::ir::Type, SS: ir::StackSlot, Offset: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Get the address of a stack slot.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10560397,"byte_end":10560421,"line_start":1051,"line_end":1051,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5093},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10560980,"byte_end":10560992,"line_start":1069,"line_end":1069,"column_start":8,"column_end":20},"name":"global_value","qualname":"::ir::builder::InstBuilder::global_value","value":"fn (self, Mem: crate::ir::Type, GV: ir::GlobalValue) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compute the value of global GV.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10560948,"byte_end":10560972,"line_start":1068,"line_end":1068,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5094},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10561475,"byte_end":10561487,"line_start":1085,"line_end":1085,"column_start":8,"column_end":20},"name":"symbol_value","qualname":"::ir::builder::InstBuilder::symbol_value","value":"fn (self, Mem: crate::ir::Type, GV: ir::GlobalValue) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compute the value of global GV, which is a symbolic value.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10561443,"byte_end":10561467,"line_start":1084,"line_end":1084,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5095},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10562461,"byte_end":10562470,"line_start":1111,"line_end":1111,"column_start":8,"column_end":17},"name":"heap_addr","qualname":"::ir::builder::InstBuilder::heap_addr","value":"fn <T1> (self, iAddr: crate::ir::Type, H: ir::Heap, p: ir::Value, Size: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bounds check and compute absolute address of heap memory.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10562429,"byte_end":10562453,"line_start":1110,"line_end":1110,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5097},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10563009,"byte_end":10563023,"line_start":1127,"line_end":1127,"column_start":8,"column_end":22},"name":"get_pinned_reg","qualname":"::ir::builder::InstBuilder::get_pinned_reg","value":"fn (self, iAddr: crate::ir::Type) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Gets the content of the pinned register, when it's enabled.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10562977,"byte_end":10563001,"line_start":1126,"line_end":1126,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5098},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10563348,"byte_end":10563362,"line_start":1138,"line_end":1138,"column_start":8,"column_end":22},"name":"set_pinned_reg","qualname":"::ir::builder::InstBuilder::set_pinned_reg","value":"fn (self, addr: ir::Value) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Sets the content of the pinned register, when it's enabled.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10563316,"byte_end":10563340,"line_start":1137,"line_end":1137,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5099},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10564397,"byte_end":10564407,"line_start":1166,"line_end":1166,"column_start":8,"column_end":18},"name":"table_addr","qualname":"::ir::builder::InstBuilder::table_addr","value":"fn <T1> (self, iAddr: crate::ir::Type, T: ir::Table, p: ir::Value, Offset: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bounds check and compute absolute address of a table entry.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10564365,"byte_end":10564389,"line_start":1165,"line_end":1165,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5101},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10565133,"byte_end":10565139,"line_start":1186,"line_end":1186,"column_start":8,"column_end":14},"name":"iconst","qualname":"::ir::builder::InstBuilder::iconst","value":"fn <T1> (self, Int: crate::ir::Type, N: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Integer constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10565101,"byte_end":10565125,"line_start":1185,"line_end":1185,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5103},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10565653,"byte_end":10565661,"line_start":1204,"line_end":1204,"column_start":8,"column_end":16},"name":"f32const","qualname":"::ir::builder::InstBuilder::f32const","value":"fn <T1> (self, N: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10565621,"byte_end":10565645,"line_start":1203,"line_end":1203,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5105},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10566170,"byte_end":10566178,"line_start":1222,"line_end":1222,"column_start":8,"column_end":16},"name":"f64const","qualname":"::ir::builder::InstBuilder::f64const","value":"fn <T1> (self, N: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10566138,"byte_end":10566162,"line_start":1221,"line_end":1221,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5107},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10566828,"byte_end":10566834,"line_start":1242,"line_end":1242,"column_start":8,"column_end":14},"name":"bconst","qualname":"::ir::builder::InstBuilder::bconst","value":"fn <T1> (self, Bool: crate::ir::Type, N: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Boolean constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10566796,"byte_end":10566820,"line_start":1241,"line_end":1241,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5109},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10567382,"byte_end":10567388,"line_start":1261,"line_end":1261,"column_start":8,"column_end":14},"name":"vconst","qualname":"::ir::builder::InstBuilder::vconst","value":"fn <T1> (self, TxN: crate::ir::Type, N: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" SIMD vector constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10567350,"byte_end":10567374,"line_start":1260,"line_end":1260,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5111},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10568242,"byte_end":10568249,"line_start":1284,"line_end":1284,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::ir::builder::InstBuilder::shuffle","value":"fn <T1> (self, a: ir::Value, b: ir::Value, mask: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" SIMD vector shuffle.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10568210,"byte_end":10568234,"line_start":1283,"line_end":1283,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5113},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10568890,"byte_end":10568894,"line_start":1303,"line_end":1303,"column_start":8,"column_end":12},"name":"null","qualname":"::ir::builder::InstBuilder::null","value":"fn (self, Ref: crate::ir::Type) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Null constant value for reference types.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10568858,"byte_end":10568882,"line_start":1302,"line_end":1302,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5114},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10569167,"byte_end":10569170,"line_start":1312,"line_end":1312,"column_start":8,"column_end":11},"name":"nop","qualname":"::ir::builder::InstBuilder::nop","value":"fn (self) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Just a dummy instruction.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10569135,"byte_end":10569159,"line_start":1311,"line_end":1311,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5115},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10569680,"byte_end":10569686,"line_start":1331,"line_end":1331,"column_start":8,"column_end":14},"name":"select","qualname":"::ir::builder::InstBuilder::select","value":"fn (self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Conditional select.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10569648,"byte_end":10569672,"line_start":1330,"line_end":1330,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5116},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10570452,"byte_end":10570460,"line_start":1351,"line_end":1351,"column_start":8,"column_end":16},"name":"selectif","qualname":"::ir::builder::InstBuilder::selectif","value":"fn <T1> (self, Any: crate::ir::Type, cc: T1, flags: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Conditional select, dependent on integer condition codes.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10570420,"byte_end":10570444,"line_start":1350,"line_end":1350,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5118},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10571296,"byte_end":10571305,"line_start":1373,"line_end":1373,"column_start":8,"column_end":17},"name":"bitselect","qualname":"::ir::builder::InstBuilder::bitselect","value":"fn (self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Conditional select of bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10571264,"byte_end":10571288,"line_start":1372,"line_end":1372,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5119},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10572185,"byte_end":10572189,"line_start":1396,"line_end":1396,"column_start":8,"column_end":12},"name":"copy","qualname":"::ir::builder::InstBuilder::copy","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Register-register copy.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10572153,"byte_end":10572177,"line_start":1395,"line_end":1395,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5120},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10572816,"byte_end":10572821,"line_start":1415,"line_end":1415,"column_start":8,"column_end":13},"name":"spill","qualname":"::ir::builder::InstBuilder::spill","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Spill a register value to a stack slot.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10572784,"byte_end":10572808,"line_start":1414,"line_end":1414,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5121},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10573457,"byte_end":10573461,"line_start":1434,"line_end":1434,"column_start":8,"column_end":12},"name":"fill","qualname":"::ir::builder::InstBuilder::fill","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load a register value from a stack slot.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10573425,"byte_end":10573449,"line_start":1433,"line_end":1433,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5122},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10574241,"byte_end":10574249,"line_start":1454,"line_end":1454,"column_start":8,"column_end":16},"name":"fill_nop","qualname":"::ir::builder::InstBuilder::fill_nop","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" This is identical to `fill`, except it has no encoding, since it is a no-op.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10574209,"byte_end":10574233,"line_start":1453,"line_end":1453,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5123},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10575258,"byte_end":10575265,"line_start":1477,"line_end":1477,"column_start":8,"column_end":15},"name":"regmove","qualname":"::ir::builder::InstBuilder::regmove","value":"fn <T1, T2> (self, x: ir::Value, src: T1, dst: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Temporarily divert ``x`` from ``src`` to ``dst``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10575226,"byte_end":10575250,"line_start":1476,"line_end":1476,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5126},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10576066,"byte_end":10576078,"line_start":1496,"line_end":1496,"column_start":8,"column_end":20},"name":"copy_special","qualname":"::ir::builder::InstBuilder::copy_special","value":"fn <T1, T2> (self, src: T1, dst: T2) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Copies the contents of ''src'' register to ''dst'' register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10576034,"byte_end":10576058,"line_start":1495,"line_end":1495,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5129},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10577009,"byte_end":10577020,"line_start":1518,"line_end":1518,"column_start":8,"column_end":19},"name":"copy_to_ssa","qualname":"::ir::builder::InstBuilder::copy_to_ssa","value":"fn <T1> (self, Any: crate::ir::Type, src: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Copies the contents of ''src'' register to ''a'' SSA name.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10576977,"byte_end":10577001,"line_start":1517,"line_end":1517,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5131},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10577722,"byte_end":10577730,"line_start":1537,"line_end":1537,"column_start":8,"column_end":16},"name":"copy_nop","qualname":"::ir::builder::InstBuilder::copy_nop","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Stack-slot-to-the-same-stack-slot copy, which is guaranteed to turn\n into a no-op.  This instruction is for use only within Cranelift itself.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10577690,"byte_end":10577714,"line_start":1536,"line_end":1536,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5132},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10578218,"byte_end":10578232,"line_start":1551,"line_end":1551,"column_start":8,"column_end":22},"name":"adjust_sp_down","qualname":"::ir::builder::InstBuilder::adjust_sp_down","value":"fn (self, delta: ir::Value) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtracts ``delta`` offset value from the stack pointer register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10578186,"byte_end":10578210,"line_start":1550,"line_end":1550,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5133},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10578804,"byte_end":10578820,"line_start":1566,"line_end":1566,"column_start":8,"column_end":24},"name":"adjust_sp_up_imm","qualname":"::ir::builder::InstBuilder::adjust_sp_up_imm","value":"fn <T1> (self, Offset: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Adds ``Offset`` immediate offset value to the stack pointer register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10578772,"byte_end":10578796,"line_start":1565,"line_end":1565,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5135},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10579408,"byte_end":10579426,"line_start":1582,"line_end":1582,"column_start":8,"column_end":26},"name":"adjust_sp_down_imm","qualname":"::ir::builder::InstBuilder::adjust_sp_down_imm","value":"fn <T1> (self, Offset: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtracts ``Offset`` immediate offset value from the stack pointer\n register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10579376,"byte_end":10579400,"line_start":1581,"line_end":1581,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5137},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10580074,"byte_end":10580082,"line_start":1601,"line_end":1601,"column_start":8,"column_end":16},"name":"ifcmp_sp","qualname":"::ir::builder::InstBuilder::ifcmp_sp","value":"fn (self, addr: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compare ``addr`` with the stack pointer and set the CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10580042,"byte_end":10580066,"line_start":1600,"line_end":1600,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5138},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10580893,"byte_end":10580901,"line_start":1622,"line_end":1622,"column_start":8,"column_end":16},"name":"regspill","qualname":"::ir::builder::InstBuilder::regspill","value":"fn <T1> (self, x: ir::Value, src: T1, SS: ir::StackSlot) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Temporarily divert ``x`` from ``src`` to ``SS``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10580861,"byte_end":10580885,"line_start":1621,"line_end":1621,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5140},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10581749,"byte_end":10581756,"line_start":1643,"line_end":1643,"column_start":8,"column_end":15},"name":"regfill","qualname":"::ir::builder::InstBuilder::regfill","value":"fn <T1> (self, x: ir::Value, SS: ir::StackSlot, dst: T1) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Temporarily divert ``x`` from ``SS`` to ``dst``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10581717,"byte_end":10581741,"line_start":1642,"line_end":1642,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5142},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10582261,"byte_end":10582270,"line_start":1656,"line_end":1656,"column_start":8,"column_end":17},"name":"safepoint","qualname":"::ir::builder::InstBuilder::safepoint","value":"fn (mut self, args: &[Value]) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" This instruction will provide live reference values at a point in\n the function. It can only be used by the compiler.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10582229,"byte_end":10582253,"line_start":1655,"line_end":1655,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5143},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10583007,"byte_end":10583013,"line_start":1680,"line_end":1680,"column_start":8,"column_end":14},"name":"vsplit","qualname":"::ir::builder::InstBuilder::vsplit","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Split a vector into two halves.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10582975,"byte_end":10582999,"line_start":1679,"line_end":1679,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5144},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10583886,"byte_end":10583893,"line_start":1705,"line_end":1705,"column_start":8,"column_end":15},"name":"vconcat","qualname":"::ir::builder::InstBuilder::vconcat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Vector concatenation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10583854,"byte_end":10583878,"line_start":1704,"line_end":1704,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5145},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10584510,"byte_end":10584517,"line_start":1726,"line_end":1726,"column_start":8,"column_end":15},"name":"vselect","qualname":"::ir::builder::InstBuilder::vselect","value":"fn (self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Vector lane select.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10584478,"byte_end":10584502,"line_start":1725,"line_end":1725,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5146},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10585075,"byte_end":10585084,"line_start":1744,"line_end":1744,"column_start":8,"column_end":17},"name":"vany_true","qualname":"::ir::builder::InstBuilder::vany_true","value":"fn (self, a: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Reduce a vector to a scalar boolean.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10585043,"byte_end":10585067,"line_start":1743,"line_end":1743,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5147},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10585609,"byte_end":10585618,"line_start":1762,"line_end":1762,"column_start":8,"column_end":17},"name":"vall_true","qualname":"::ir::builder::InstBuilder::vall_true","value":"fn (self, a: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Reduce a vector to a scalar boolean.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10585577,"byte_end":10585601,"line_start":1761,"line_end":1761,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5148},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10586115,"byte_end":10586120,"line_start":1781,"line_end":1781,"column_start":8,"column_end":13},"name":"splat","qualname":"::ir::builder::InstBuilder::splat","value":"fn (self, TxN: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Vector splat.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10586083,"byte_end":10586107,"line_start":1780,"line_end":1780,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5149},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10586687,"byte_end":10586697,"line_start":1801,"line_end":1801,"column_start":8,"column_end":18},"name":"insertlane","qualname":"::ir::builder::InstBuilder::insertlane","value":"fn <T1> (self, x: ir::Value, Idx: T1, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Insert ``y`` as lane ``Idx`` in x.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10586655,"byte_end":10586679,"line_start":1800,"line_end":1800,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5151},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10587555,"byte_end":10587566,"line_start":1824,"line_end":1824,"column_start":8,"column_end":19},"name":"extractlane","qualname":"::ir::builder::InstBuilder::extractlane","value":"fn <T1> (self, x: ir::Value, Idx: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Extract lane ``Idx`` from ``x``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10587523,"byte_end":10587547,"line_start":1823,"line_end":1823,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5153},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10589285,"byte_end":10589289,"line_start":1865,"line_end":1865,"column_start":8,"column_end":12},"name":"icmp","qualname":"::ir::builder::InstBuilder::icmp","value":"fn <T1> (self, Cond: T1, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Integer comparison.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10589253,"byte_end":10589277,"line_start":1864,"line_end":1864,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5155},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10590138,"byte_end":10590146,"line_start":1890,"line_end":1890,"column_start":8,"column_end":16},"name":"icmp_imm","qualname":"::ir::builder::InstBuilder::icmp_imm","value":"fn <T1, T2> (self, Cond: T1, x: ir::Value, Y: T2) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compare scalar integer to a constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10590106,"byte_end":10590130,"line_start":1889,"line_end":1889,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5158},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10590988,"byte_end":10590993,"line_start":1913,"line_end":1913,"column_start":8,"column_end":13},"name":"ifcmp","qualname":"::ir::builder::InstBuilder::ifcmp","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compare scalar integers and return flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10590956,"byte_end":10590980,"line_start":1912,"line_end":1912,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5159},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10591718,"byte_end":10591727,"line_start":1934,"line_end":1934,"column_start":8,"column_end":17},"name":"ifcmp_imm","qualname":"::ir::builder::InstBuilder::ifcmp_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Compare scalar integer to a constant and return flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10591686,"byte_end":10591710,"line_start":1933,"line_end":1933,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5161},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10592416,"byte_end":10592420,"line_start":1955,"line_end":1955,"column_start":8,"column_end":12},"name":"iadd","qualname":"::ir::builder::InstBuilder::iadd","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Wrapping integer addition: `a := x + y \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10592384,"byte_end":10592408,"line_start":1954,"line_end":1954,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5162},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10593171,"byte_end":10593179,"line_start":1976,"line_end":1976,"column_start":8,"column_end":16},"name":"uadd_sat","qualname":"::ir::builder::InstBuilder::uadd_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add with unsigned saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10593139,"byte_end":10593163,"line_start":1975,"line_end":1975,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5163},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10594083,"byte_end":10594091,"line_start":1999,"line_end":1999,"column_start":8,"column_end":16},"name":"sadd_sat","qualname":"::ir::builder::InstBuilder::sadd_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add with signed saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10594051,"byte_end":10594075,"line_start":1998,"line_end":1998,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5164},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10594727,"byte_end":10594731,"line_start":2019,"line_end":2019,"column_start":8,"column_end":12},"name":"isub","qualname":"::ir::builder::InstBuilder::isub","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Wrapping integer subtraction: `a := x - y \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10594695,"byte_end":10594719,"line_start":2018,"line_end":2018,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5165},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10595483,"byte_end":10595491,"line_start":2040,"line_end":2040,"column_start":8,"column_end":16},"name":"usub_sat","qualname":"::ir::builder::InstBuilder::usub_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract with unsigned saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10595451,"byte_end":10595475,"line_start":2039,"line_end":2039,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5166},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10596261,"byte_end":10596269,"line_start":2061,"line_end":2061,"column_start":8,"column_end":16},"name":"ssub_sat","qualname":"::ir::builder::InstBuilder::ssub_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract with signed saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10596229,"byte_end":10596253,"line_start":2060,"line_end":2060,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5167},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10596733,"byte_end":10596737,"line_start":2077,"line_end":2077,"column_start":8,"column_end":12},"name":"ineg","qualname":"::ir::builder::InstBuilder::ineg","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Integer negation: `a := -x \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10596701,"byte_end":10596725,"line_start":2076,"line_end":2076,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5168},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10597425,"byte_end":10597429,"line_start":2099,"line_end":2099,"column_start":8,"column_end":12},"name":"imul","qualname":"::ir::builder::InstBuilder::imul","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Wrapping integer multiplication: `a := x y \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10597393,"byte_end":10597417,"line_start":2098,"line_end":2098,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5169},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10598089,"byte_end":10598095,"line_start":2120,"line_end":2120,"column_start":8,"column_end":14},"name":"umulhi","qualname":"::ir::builder::InstBuilder::umulhi","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned integer multiplication, producing the high half of a\n double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10598057,"byte_end":10598081,"line_start":2119,"line_end":2119,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5170},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10598755,"byte_end":10598761,"line_start":2141,"line_end":2141,"column_start":8,"column_end":14},"name":"smulhi","qualname":"::ir::builder::InstBuilder::smulhi","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed integer multiplication, producing the high half of a\n double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10598723,"byte_end":10598747,"line_start":2140,"line_end":2140,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5171},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10599353,"byte_end":10599357,"line_start":2160,"line_end":2160,"column_start":8,"column_end":12},"name":"udiv","qualname":"::ir::builder::InstBuilder::udiv","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned integer division: `a := \\lfloor {x \\over y} \\rfloor`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10599321,"byte_end":10599345,"line_start":2159,"line_end":2159,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5172},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10600116,"byte_end":10600120,"line_start":2182,"line_end":2182,"column_start":8,"column_end":12},"name":"sdiv","qualname":"::ir::builder::InstBuilder::sdiv","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed integer division rounded toward zero: `a := sign(xy)\n \\lfloor {|x| \\over |y|}\\rfloor`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10600084,"byte_end":10600108,"line_start":2181,"line_end":2181,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5173},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10600675,"byte_end":10600679,"line_start":2201,"line_end":2201,"column_start":8,"column_end":12},"name":"urem","qualname":"::ir::builder::InstBuilder::urem","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned integer remainder.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10600643,"byte_end":10600667,"line_start":2200,"line_end":2200,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5174},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10601273,"byte_end":10601277,"line_start":2220,"line_end":2220,"column_start":8,"column_end":12},"name":"srem","qualname":"::ir::builder::InstBuilder::srem","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed integer remainder. The result has the sign of the dividend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10601241,"byte_end":10601265,"line_start":2219,"line_end":2219,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5175},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10601918,"byte_end":10601926,"line_start":2242,"line_end":2242,"column_start":8,"column_end":16},"name":"iadd_imm","qualname":"::ir::builder::InstBuilder::iadd_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add immediate integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10601886,"byte_end":10601910,"line_start":2241,"line_end":2241,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5177},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10602574,"byte_end":10602582,"line_start":2263,"line_end":2263,"column_start":8,"column_end":16},"name":"imul_imm","qualname":"::ir::builder::InstBuilder::imul_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Integer multiplication by immediate constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10602542,"byte_end":10602566,"line_start":2262,"line_end":2262,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5179},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10603195,"byte_end":10603203,"line_start":2283,"line_end":2283,"column_start":8,"column_end":16},"name":"udiv_imm","qualname":"::ir::builder::InstBuilder::udiv_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned integer division by an immediate constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10603163,"byte_end":10603187,"line_start":2282,"line_end":2282,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5181},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10603945,"byte_end":10603953,"line_start":2305,"line_end":2305,"column_start":8,"column_end":16},"name":"sdiv_imm","qualname":"::ir::builder::InstBuilder::sdiv_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed integer division by an immediate constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10603913,"byte_end":10603937,"line_start":2304,"line_end":2304,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5183},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10604565,"byte_end":10604573,"line_start":2325,"line_end":2325,"column_start":8,"column_end":16},"name":"urem_imm","qualname":"::ir::builder::InstBuilder::urem_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned integer remainder with immediate divisor.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10604533,"byte_end":10604557,"line_start":2324,"line_end":2324,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5185},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10605183,"byte_end":10605191,"line_start":2345,"line_end":2345,"column_start":8,"column_end":16},"name":"srem_imm","qualname":"::ir::builder::InstBuilder::srem_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed integer remainder with immediate divisor.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10605151,"byte_end":10605175,"line_start":2344,"line_end":2344,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5187},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10606023,"byte_end":10606032,"line_start":2370,"line_end":2370,"column_start":8,"column_end":17},"name":"irsub_imm","qualname":"::ir::builder::InstBuilder::irsub_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Immediate reverse wrapping subtraction: `a := Y - x \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10605991,"byte_end":10606015,"line_start":2369,"line_end":2369,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5189},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10606840,"byte_end":10606848,"line_start":2398,"line_end":2398,"column_start":8,"column_end":16},"name":"iadd_cin","qualname":"::ir::builder::InstBuilder::iadd_cin","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add integers with carry in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10606808,"byte_end":10606832,"line_start":2397,"line_end":2397,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5190},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10607744,"byte_end":10607754,"line_start":2426,"line_end":2426,"column_start":8,"column_end":18},"name":"iadd_ifcin","qualname":"::ir::builder::InstBuilder::iadd_ifcin","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add integers with carry in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10607712,"byte_end":10607736,"line_start":2425,"line_end":2425,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5191},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10608555,"byte_end":10608564,"line_start":2454,"line_end":2454,"column_start":8,"column_end":17},"name":"iadd_cout","qualname":"::ir::builder::InstBuilder::iadd_cout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add integers with carry out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10608523,"byte_end":10608547,"line_start":2453,"line_end":2453,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5192},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10609523,"byte_end":10609534,"line_start":2484,"line_end":2484,"column_start":8,"column_end":19},"name":"iadd_ifcout","qualname":"::ir::builder::InstBuilder::iadd_ifcout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add integers with carry out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10609491,"byte_end":10609515,"line_start":2483,"line_end":2483,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5193},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10610446,"byte_end":10610456,"line_start":2514,"line_end":2514,"column_start":8,"column_end":18},"name":"iadd_carry","qualname":"::ir::builder::InstBuilder::iadd_carry","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add integers with carry in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10610414,"byte_end":10610438,"line_start":2513,"line_end":2513,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5194},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10611625,"byte_end":10611637,"line_start":2546,"line_end":2546,"column_start":8,"column_end":20},"name":"iadd_ifcarry","qualname":"::ir::builder::InstBuilder::iadd_ifcarry","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Add integers with carry in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10611593,"byte_end":10611617,"line_start":2545,"line_end":2545,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5195},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10612496,"byte_end":10612504,"line_start":2574,"line_end":2574,"column_start":8,"column_end":16},"name":"isub_bin","qualname":"::ir::builder::InstBuilder::isub_bin","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10612464,"byte_end":10612488,"line_start":2573,"line_end":2573,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5196},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10613409,"byte_end":10613419,"line_start":2602,"line_end":2602,"column_start":8,"column_end":18},"name":"isub_ifbin","qualname":"::ir::builder::InstBuilder::isub_ifbin","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10613377,"byte_end":10613401,"line_start":2601,"line_end":2601,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5197},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10614228,"byte_end":10614237,"line_start":2630,"line_end":2630,"column_start":8,"column_end":17},"name":"isub_bout","qualname":"::ir::builder::InstBuilder::isub_bout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract integers with borrow out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10614196,"byte_end":10614220,"line_start":2629,"line_end":2629,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5198},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10615198,"byte_end":10615209,"line_start":2660,"line_end":2660,"column_start":8,"column_end":19},"name":"isub_ifbout","qualname":"::ir::builder::InstBuilder::isub_ifbout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract integers with borrow out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10615166,"byte_end":10615190,"line_start":2659,"line_end":2659,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5199},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10616130,"byte_end":10616141,"line_start":2690,"line_end":2690,"column_start":8,"column_end":19},"name":"isub_borrow","qualname":"::ir::builder::InstBuilder::isub_borrow","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10616098,"byte_end":10616122,"line_start":2689,"line_end":2689,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5200},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10617313,"byte_end":10617326,"line_start":2722,"line_end":2722,"column_start":8,"column_end":21},"name":"isub_ifborrow","qualname":"::ir::builder::InstBuilder::isub_ifborrow","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10617281,"byte_end":10617305,"line_start":2721,"line_end":2721,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5201},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10617964,"byte_end":10617968,"line_start":2740,"line_end":2740,"column_start":8,"column_end":12},"name":"band","qualname":"::ir::builder::InstBuilder::band","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise and.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10617932,"byte_end":10617956,"line_start":2739,"line_end":2739,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5202},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10618509,"byte_end":10618512,"line_start":2757,"line_end":2757,"column_start":8,"column_end":11},"name":"bor","qualname":"::ir::builder::InstBuilder::bor","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise or.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10618477,"byte_end":10618501,"line_start":2756,"line_end":2756,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5203},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10619053,"byte_end":10619057,"line_start":2774,"line_end":2774,"column_start":8,"column_end":12},"name":"bxor","qualname":"::ir::builder::InstBuilder::bxor","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise xor.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10619021,"byte_end":10619045,"line_start":2773,"line_end":2773,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5204},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10619533,"byte_end":10619537,"line_start":2790,"line_end":2790,"column_start":8,"column_end":12},"name":"bnot","qualname":"::ir::builder::InstBuilder::bnot","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10619501,"byte_end":10619525,"line_start":2789,"line_end":2789,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5205},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10620100,"byte_end":10620108,"line_start":2809,"line_end":2809,"column_start":8,"column_end":16},"name":"band_not","qualname":"::ir::builder::InstBuilder::band_not","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise and not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10620068,"byte_end":10620092,"line_start":2808,"line_end":2808,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5206},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10620691,"byte_end":10620698,"line_start":2828,"line_end":2828,"column_start":8,"column_end":15},"name":"bor_not","qualname":"::ir::builder::InstBuilder::bor_not","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise or not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10620659,"byte_end":10620683,"line_start":2827,"line_end":2827,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5207},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10621281,"byte_end":10621289,"line_start":2847,"line_end":2847,"column_start":8,"column_end":16},"name":"bxor_not","qualname":"::ir::builder::InstBuilder::bxor_not","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise xor not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10621249,"byte_end":10621273,"line_start":2846,"line_end":2846,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5208},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10621938,"byte_end":10621946,"line_start":2869,"line_end":2869,"column_start":8,"column_end":16},"name":"band_imm","qualname":"::ir::builder::InstBuilder::band_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise and with immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10621906,"byte_end":10621930,"line_start":2868,"line_end":2868,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5210},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10622648,"byte_end":10622655,"line_start":2892,"line_end":2892,"column_start":8,"column_end":15},"name":"bor_imm","qualname":"::ir::builder::InstBuilder::bor_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise or with immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10622616,"byte_end":10622640,"line_start":2891,"line_end":2891,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5212},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10623358,"byte_end":10623366,"line_start":2915,"line_end":2915,"column_start":8,"column_end":16},"name":"bxor_imm","qualname":"::ir::builder::InstBuilder::bxor_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bitwise xor with immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10623326,"byte_end":10623350,"line_start":2914,"line_end":2914,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5214},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10623953,"byte_end":10623957,"line_start":2935,"line_end":2935,"column_start":8,"column_end":12},"name":"rotl","qualname":"::ir::builder::InstBuilder::rotl","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Rotate left.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10623921,"byte_end":10623945,"line_start":2934,"line_end":2934,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5215},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10624487,"byte_end":10624491,"line_start":2954,"line_end":2954,"column_start":8,"column_end":12},"name":"rotr","qualname":"::ir::builder::InstBuilder::rotr","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Rotate right.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10624455,"byte_end":10624479,"line_start":2953,"line_end":2953,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5216},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10624979,"byte_end":10624987,"line_start":2971,"line_end":2971,"column_start":8,"column_end":16},"name":"rotl_imm","qualname":"::ir::builder::InstBuilder::rotl_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Rotate left by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10624947,"byte_end":10624971,"line_start":2970,"line_end":2970,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5218},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10625534,"byte_end":10625542,"line_start":2989,"line_end":2989,"column_start":8,"column_end":16},"name":"rotr_imm","qualname":"::ir::builder::InstBuilder::rotr_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Rotate right by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10625502,"byte_end":10625526,"line_start":2988,"line_end":2988,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5220},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10626426,"byte_end":10626430,"line_start":3017,"line_end":3017,"column_start":8,"column_end":12},"name":"ishl","qualname":"::ir::builder::InstBuilder::ishl","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Integer shift left. Shift the bits in ``x`` towards the MSB by ``y``\n places. Shift in zero bits to the LSB.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10626394,"byte_end":10626418,"line_start":3016,"line_end":3016,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5221},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10627311,"byte_end":10627315,"line_start":3045,"line_end":3045,"column_start":8,"column_end":12},"name":"ushr","qualname":"::ir::builder::InstBuilder::ushr","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned shift right. Shift bits in ``x`` towards the LSB by ``y``\n places, shifting in zero bits to the MSB. Also called a *logical\n shift*.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10627279,"byte_end":10627303,"line_start":3044,"line_end":3044,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5222},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10628003,"byte_end":10628007,"line_start":3066,"line_end":3066,"column_start":8,"column_end":12},"name":"sshr","qualname":"::ir::builder::InstBuilder::sshr","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed shift right. Shift bits in ``x`` towards the LSB by ``y``\n places, shifting in sign bits to the MSB. Also called an *arithmetic\n shift*.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10627971,"byte_end":10627995,"line_start":3065,"line_end":3065,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5223},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10628567,"byte_end":10628575,"line_start":3085,"line_end":3085,"column_start":8,"column_end":16},"name":"ishl_imm","qualname":"::ir::builder::InstBuilder::ishl_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Integer shift left by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10628535,"byte_end":10628559,"line_start":3084,"line_end":3084,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5225},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10629202,"byte_end":10629210,"line_start":3105,"line_end":3105,"column_start":8,"column_end":16},"name":"ushr_imm","qualname":"::ir::builder::InstBuilder::ushr_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned shift right by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10629170,"byte_end":10629194,"line_start":3104,"line_end":3104,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5227},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10629835,"byte_end":10629843,"line_start":3125,"line_end":3125,"column_start":8,"column_end":16},"name":"sshr_imm","qualname":"::ir::builder::InstBuilder::sshr_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed shift right by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10629803,"byte_end":10629827,"line_start":3124,"line_end":3124,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5229},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10630377,"byte_end":10630383,"line_start":3144,"line_end":3144,"column_start":8,"column_end":14},"name":"bitrev","qualname":"::ir::builder::InstBuilder::bitrev","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Reverse the bits of a integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10630345,"byte_end":10630369,"line_start":3143,"line_end":3143,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5230},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10630973,"byte_end":10630976,"line_start":3164,"line_end":3164,"column_start":8,"column_end":11},"name":"clz","qualname":"::ir::builder::InstBuilder::clz","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Count leading zero bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10630941,"byte_end":10630965,"line_start":3163,"line_end":3163,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5231},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10631598,"byte_end":10631601,"line_start":3184,"line_end":3184,"column_start":8,"column_end":11},"name":"cls","qualname":"::ir::builder::InstBuilder::cls","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Count leading sign bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10631566,"byte_end":10631590,"line_start":3183,"line_end":3183,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5232},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10632185,"byte_end":10632188,"line_start":3204,"line_end":3204,"column_start":8,"column_end":11},"name":"ctz","qualname":"::ir::builder::InstBuilder::ctz","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Count trailing zeros.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10632153,"byte_end":10632177,"line_start":3203,"line_end":3203,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5233},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10632642,"byte_end":10632648,"line_start":3222,"line_end":3222,"column_start":8,"column_end":14},"name":"popcnt","qualname":"::ir::builder::InstBuilder::popcnt","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Population count","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10632610,"byte_end":10632634,"line_start":3221,"line_end":3221,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5234},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10636215,"byte_end":10636219,"line_start":3298,"line_end":3298,"column_start":8,"column_end":12},"name":"fcmp","qualname":"::ir::builder::InstBuilder::fcmp","value":"fn <T1> (self, Cond: T1, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point comparison.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10636183,"byte_end":10636207,"line_start":3297,"line_end":3297,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5236},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10637077,"byte_end":10637082,"line_start":3320,"line_end":3320,"column_start":8,"column_end":13},"name":"ffcmp","qualname":"::ir::builder::InstBuilder::ffcmp","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point comparison returning flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10637045,"byte_end":10637069,"line_start":3319,"line_end":3319,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5237},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10637601,"byte_end":10637605,"line_start":3337,"line_end":3337,"column_start":8,"column_end":12},"name":"fadd","qualname":"::ir::builder::InstBuilder::fadd","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point addition.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10637569,"byte_end":10637593,"line_start":3336,"line_end":3336,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5238},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10638126,"byte_end":10638130,"line_start":3354,"line_end":3354,"column_start":8,"column_end":12},"name":"fsub","qualname":"::ir::builder::InstBuilder::fsub","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point subtraction.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10638094,"byte_end":10638118,"line_start":3353,"line_end":3353,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5239},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10638654,"byte_end":10638658,"line_start":3371,"line_end":3371,"column_start":8,"column_end":12},"name":"fmul","qualname":"::ir::builder::InstBuilder::fmul","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point multiplication.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10638622,"byte_end":10638646,"line_start":3370,"line_end":3370,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5240},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10639344,"byte_end":10639348,"line_start":3392,"line_end":3392,"column_start":8,"column_end":12},"name":"fdiv","qualname":"::ir::builder::InstBuilder::fdiv","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point division.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10639312,"byte_end":10639336,"line_start":3391,"line_end":3391,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5241},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10639815,"byte_end":10639819,"line_start":3408,"line_end":3408,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::ir::builder::InstBuilder::sqrt","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point square root.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10639783,"byte_end":10639807,"line_start":3407,"line_end":3407,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5242},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10640482,"byte_end":10640485,"line_start":3429,"line_end":3429,"column_start":8,"column_end":11},"name":"fma","qualname":"::ir::builder::InstBuilder::fma","value":"fn (self, x: ir::Value, y: ir::Value, z: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point fused multiply-and-add.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10640450,"byte_end":10640474,"line_start":3428,"line_end":3428,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5243},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10641018,"byte_end":10641022,"line_start":3447,"line_end":3447,"column_start":8,"column_end":12},"name":"fneg","qualname":"::ir::builder::InstBuilder::fneg","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point negation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10640986,"byte_end":10641010,"line_start":3446,"line_end":3446,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5244},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10641525,"byte_end":10641529,"line_start":3465,"line_end":3465,"column_start":8,"column_end":12},"name":"fabs","qualname":"::ir::builder::InstBuilder::fabs","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point absolute value.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10641493,"byte_end":10641517,"line_start":3464,"line_end":3464,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5245},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10642166,"byte_end":10642175,"line_start":3485,"line_end":3485,"column_start":8,"column_end":17},"name":"fcopysign","qualname":"::ir::builder::InstBuilder::fcopysign","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point copy sign.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10642134,"byte_end":10642158,"line_start":3484,"line_end":3484,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5246},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10642767,"byte_end":10642771,"line_start":3504,"line_end":3504,"column_start":8,"column_end":12},"name":"fmin","qualname":"::ir::builder::InstBuilder::fmin","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point minimum, propagating NaNs.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10642735,"byte_end":10642759,"line_start":3503,"line_end":3503,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5247},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10643357,"byte_end":10643361,"line_start":3523,"line_end":3523,"column_start":8,"column_end":12},"name":"fmax","qualname":"::ir::builder::InstBuilder::fmax","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point maximum, propagating NaNs.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10643325,"byte_end":10643349,"line_start":3522,"line_end":3522,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5248},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10643858,"byte_end":10643862,"line_start":3539,"line_end":3539,"column_start":8,"column_end":12},"name":"ceil","qualname":"::ir::builder::InstBuilder::ceil","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards positive infinity.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10643826,"byte_end":10643850,"line_start":3538,"line_end":3538,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5249},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10644341,"byte_end":10644346,"line_start":3555,"line_end":3555,"column_start":8,"column_end":13},"name":"floor","qualname":"::ir::builder::InstBuilder::floor","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards negative infinity.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10644309,"byte_end":10644333,"line_start":3554,"line_end":3554,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5250},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10644813,"byte_end":10644818,"line_start":3571,"line_end":3571,"column_start":8,"column_end":13},"name":"trunc","qualname":"::ir::builder::InstBuilder::trunc","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10644781,"byte_end":10644805,"line_start":3570,"line_end":3570,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5251},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10645314,"byte_end":10645321,"line_start":3588,"line_end":3588,"column_start":8,"column_end":15},"name":"nearest","qualname":"::ir::builder::InstBuilder::nearest","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards nearest with ties to\n even.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10645282,"byte_end":10645306,"line_start":3587,"line_end":3587,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5252},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10645843,"byte_end":10645850,"line_start":3607,"line_end":3607,"column_start":8,"column_end":15},"name":"is_null","qualname":"::ir::builder::InstBuilder::is_null","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Reference verification.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10645811,"byte_end":10645835,"line_start":3606,"line_end":3606,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5253},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10646597,"byte_end":10646603,"line_start":3628,"line_end":3628,"column_start":8,"column_end":14},"name":"trueif","qualname":"::ir::builder::InstBuilder::trueif","value":"fn <T1> (self, Cond: T1, f: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Test integer CPU flags for a specific condition.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10646565,"byte_end":10646589,"line_start":3627,"line_end":3627,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5255},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10647388,"byte_end":10647394,"line_start":3649,"line_end":3649,"column_start":8,"column_end":14},"name":"trueff","qualname":"::ir::builder::InstBuilder::trueff","value":"fn <T1> (self, Cond: T1, f: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Test floating point CPU flags for a specific condition.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10647356,"byte_end":10647380,"line_start":3648,"line_end":3648,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5257},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10648118,"byte_end":10648125,"line_start":3670,"line_end":3670,"column_start":8,"column_end":15},"name":"bitcast","qualname":"::ir::builder::InstBuilder::bitcast","value":"fn (self, MemTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Reinterpret the bits in `x` as a different type.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10648086,"byte_end":10648110,"line_start":3669,"line_end":3669,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5258},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10649158,"byte_end":10649169,"line_start":3694,"line_end":3694,"column_start":8,"column_end":19},"name":"raw_bitcast","qualname":"::ir::builder::InstBuilder::raw_bitcast","value":"fn (self, AnyTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Cast the bits in `x` as a different type of the same bit width.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10649126,"byte_end":10649150,"line_start":3693,"line_end":3693,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5259},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10650009,"byte_end":10650025,"line_start":3714,"line_end":3714,"column_start":8,"column_end":24},"name":"scalar_to_vector","qualname":"::ir::builder::InstBuilder::scalar_to_vector","value":"fn (self, TxN: crate::ir::Type, s: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Scalar To Vector -- move a value out of a scalar register and into a vector register; the\n scalar will be moved to the lowest-order bits of the vector register. Note that this\n instruction is intended as a low-level legalization instruction and frontends should prefer\n insertlane; on certain architectures, scalar_to_vector may zero the highest-order bits for some\n types (e.g. integers) but not for others (e.g. floats).","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10649977,"byte_end":10650001,"line_start":3713,"line_end":3713,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5260},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10650798,"byte_end":10650805,"line_start":3734,"line_end":3734,"column_start":8,"column_end":15},"name":"breduce","qualname":"::ir::builder::InstBuilder::breduce","value":"fn (self, BoolTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a smaller boolean type in the platform-defined way.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10650766,"byte_end":10650790,"line_start":3733,"line_end":3733,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5261},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10651575,"byte_end":10651582,"line_start":3754,"line_end":3754,"column_start":8,"column_end":15},"name":"bextend","qualname":"::ir::builder::InstBuilder::bextend","value":"fn (self, BoolTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a larger boolean type in the platform-defined way.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10651543,"byte_end":10651567,"line_start":3753,"line_end":3753,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5262},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10652206,"byte_end":10652210,"line_start":3773,"line_end":3773,"column_start":8,"column_end":12},"name":"bint","qualname":"::ir::builder::InstBuilder::bint","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to an integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10652174,"byte_end":10652198,"line_start":3772,"line_end":3772,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5263},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10652844,"byte_end":10652849,"line_start":3792,"line_end":3792,"column_start":8,"column_end":13},"name":"bmask","qualname":"::ir::builder::InstBuilder::bmask","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to an integer mask.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10652812,"byte_end":10652836,"line_start":3791,"line_end":3791,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5264},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10653782,"byte_end":10653789,"line_start":3816,"line_end":3816,"column_start":8,"column_end":15},"name":"ireduce","qualname":"::ir::builder::InstBuilder::ireduce","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a smaller integer type by dropping high bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10653750,"byte_end":10653774,"line_start":3815,"line_end":3815,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5265},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10654746,"byte_end":10654753,"line_start":3840,"line_end":3840,"column_start":8,"column_end":15},"name":"uextend","qualname":"::ir::builder::InstBuilder::uextend","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a larger integer type by zero-extending.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10654714,"byte_end":10654738,"line_start":3839,"line_end":3839,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5266},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10655719,"byte_end":10655726,"line_start":3864,"line_end":3864,"column_start":8,"column_end":15},"name":"sextend","qualname":"::ir::builder::InstBuilder::sextend","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a larger integer type by sign-extending.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10655687,"byte_end":10655711,"line_start":3863,"line_end":3863,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5267},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10656729,"byte_end":10656737,"line_start":3890,"line_end":3890,"column_start":8,"column_end":16},"name":"fpromote","qualname":"::ir::builder::InstBuilder::fpromote","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a larger floating point format.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10656697,"byte_end":10656721,"line_start":3889,"line_end":3889,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5268},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10657754,"byte_end":10657761,"line_start":3916,"line_end":3916,"column_start":8,"column_end":15},"name":"fdemote","qualname":"::ir::builder::InstBuilder::fdemote","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert `x` to a smaller floating point format.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10657722,"byte_end":10657746,"line_start":3915,"line_end":3915,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5269},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10658606,"byte_end":10658618,"line_start":3938,"line_end":3938,"column_start":8,"column_end":20},"name":"fcvt_to_uint","qualname":"::ir::builder::InstBuilder::fcvt_to_uint","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert floating point to unsigned integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10658574,"byte_end":10658598,"line_start":3937,"line_end":3937,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5270},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10659275,"byte_end":10659291,"line_start":3956,"line_end":3956,"column_start":8,"column_end":24},"name":"fcvt_to_uint_sat","qualname":"::ir::builder::InstBuilder::fcvt_to_uint_sat","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert floating point to unsigned integer as fcvt_to_uint does, but\n saturates the input instead of trapping. NaN and negative values are\n converted to 0.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10659243,"byte_end":10659267,"line_start":3955,"line_end":3955,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5271},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10660131,"byte_end":10660143,"line_start":3978,"line_end":3978,"column_start":8,"column_end":20},"name":"fcvt_to_sint","qualname":"::ir::builder::InstBuilder::fcvt_to_sint","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert floating point to signed integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10660099,"byte_end":10660123,"line_start":3977,"line_end":3977,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5272},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10660777,"byte_end":10660793,"line_start":3995,"line_end":3995,"column_start":8,"column_end":24},"name":"fcvt_to_sint_sat","qualname":"::ir::builder::InstBuilder::fcvt_to_sint_sat","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert floating point to signed integer as fcvt_to_sint does, but\n saturates the input instead of trapping. NaN values are converted to 0.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10660745,"byte_end":10660769,"line_start":3994,"line_end":3994,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5273},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10661535,"byte_end":10661549,"line_start":4016,"line_end":4016,"column_start":8,"column_end":22},"name":"fcvt_from_uint","qualname":"::ir::builder::InstBuilder::fcvt_from_uint","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert unsigned integer to floating point.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10661503,"byte_end":10661527,"line_start":4015,"line_end":4015,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5274},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10662289,"byte_end":10662303,"line_start":4037,"line_end":4037,"column_start":8,"column_end":22},"name":"fcvt_from_sint","qualname":"::ir::builder::InstBuilder::fcvt_from_sint","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert signed integer to floating point.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10662257,"byte_end":10662281,"line_start":4036,"line_end":4036,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5275},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10663011,"byte_end":10663017,"line_start":4059,"line_end":4059,"column_start":8,"column_end":14},"name":"isplit","qualname":"::ir::builder::InstBuilder::isplit","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Split an integer into low and high parts.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10662979,"byte_end":10663003,"line_start":4058,"line_end":4058,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5276},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10663793,"byte_end":10663800,"line_start":4081,"line_end":4081,"column_start":8,"column_end":15},"name":"iconcat","qualname":"::ir::builder::InstBuilder::iconcat","value":"fn (self, lo: ir::Value, hi: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Concatenate low and high bits to form a larger integer type.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10663761,"byte_end":10663785,"line_start":4080,"line_end":4080,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5277},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10664633,"byte_end":10664645,"line_start":4107,"line_end":4107,"column_start":8,"column_end":20},"name":"x86_udivmodx","qualname":"::ir::builder::InstBuilder::x86_udivmodx","value":"fn (self, nlo: ir::Value, nhi: ir::Value, d: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Extended unsigned division.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10664601,"byte_end":10664625,"line_start":4106,"line_end":4106,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5278},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10665558,"byte_end":10665570,"line_start":4134,"line_end":4134,"column_start":8,"column_end":20},"name":"x86_sdivmodx","qualname":"::ir::builder::InstBuilder::x86_sdivmodx","value":"fn (self, nlo: ir::Value, nhi: ir::Value, d: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Extended signed division.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10665526,"byte_end":10665550,"line_start":4133,"line_end":4133,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5279},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10666355,"byte_end":10666364,"line_start":4156,"line_end":4156,"column_start":8,"column_end":17},"name":"x86_umulx","qualname":"::ir::builder::InstBuilder::x86_umulx","value":"fn (self, argL: ir::Value, argR: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unsigned integer multiplication, producing a double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10666323,"byte_end":10666347,"line_start":4155,"line_end":4155,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5280},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10667131,"byte_end":10667140,"line_start":4178,"line_end":4178,"column_start":8,"column_end":17},"name":"x86_smulx","qualname":"::ir::builder::InstBuilder::x86_smulx","value":"fn (self, argL: ir::Value, argR: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Signed integer multiplication, producing a double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10667099,"byte_end":10667123,"line_start":4177,"line_end":4177,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5281},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10668109,"byte_end":10668120,"line_start":4202,"line_end":4202,"column_start":8,"column_end":19},"name":"x86_cvtt2si","qualname":"::ir::builder::InstBuilder::x86_cvtt2si","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Convert with truncation floating point to signed integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10668077,"byte_end":10668101,"line_start":4201,"line_end":4201,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5282},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10668900,"byte_end":10668908,"line_start":4225,"line_end":4225,"column_start":8,"column_end":16},"name":"x86_fmin","qualname":"::ir::builder::InstBuilder::x86_fmin","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point minimum with x86 semantics.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10668868,"byte_end":10668892,"line_start":4224,"line_end":4224,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5283},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10669751,"byte_end":10669759,"line_start":4249,"line_end":4249,"column_start":8,"column_end":16},"name":"x86_fmax","qualname":"::ir::builder::InstBuilder::x86_fmax","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Floating point maximum with x86 semantics.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10669719,"byte_end":10669743,"line_start":4248,"line_end":4248,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5284},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10670374,"byte_end":10670382,"line_start":4266,"line_end":4266,"column_start":8,"column_end":16},"name":"x86_push","qualname":"::ir::builder::InstBuilder::x86_push","value":"fn (self, x: ir::Value) -> Inst","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Pushes a value onto the stack.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10670342,"byte_end":10670366,"line_start":4265,"line_end":4265,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5285},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10671048,"byte_end":10671055,"line_start":4287,"line_end":4287,"column_start":8,"column_end":15},"name":"x86_pop","qualname":"::ir::builder::InstBuilder::x86_pop","value":"fn (self, iWord: crate::ir::Type) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Pops a value from the stack.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10671016,"byte_end":10671040,"line_start":4286,"line_end":4286,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5286},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10671951,"byte_end":10671958,"line_start":4310,"line_end":4310,"column_start":8,"column_end":15},"name":"x86_bsr","qualname":"::ir::builder::InstBuilder::x86_bsr","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bit Scan Reverse -- returns the bit-index of the most significant 1\n in the word. Result is undefined if the argument is zero. However, it\n sets the Z flag depending on the argument, so it is at least easy to\n detect and handle that case.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10671919,"byte_end":10671943,"line_start":4309,"line_end":4309,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5287},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10672709,"byte_end":10672716,"line_start":4330,"line_end":4330,"column_start":8,"column_end":15},"name":"x86_bsf","qualname":"::ir::builder::InstBuilder::x86_bsf","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Bit Scan Forwards -- returns the bit-index of the least significant 1\n in the word. Is otherwise identical to 'bsr', just above.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10672677,"byte_end":10672701,"line_start":4329,"line_end":4329,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5288},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10673518,"byte_end":10673528,"line_start":4349,"line_end":4349,"column_start":8,"column_end":18},"name":"x86_pshufd","qualname":"::ir::builder::InstBuilder::x86_pshufd","value":"fn <T1> (self, a: ir::Value, i: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Packed Shuffle Doublewords -- copies data from either memory or lanes in an extended\n register and re-orders the data according to the passed immediate byte.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10673486,"byte_end":10673510,"line_start":4348,"line_end":4348,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5290},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10674238,"byte_end":10674248,"line_start":4368,"line_end":4368,"column_start":8,"column_end":18},"name":"x86_pshufb","qualname":"::ir::builder::InstBuilder::x86_pshufb","value":"fn (self, a: ir::Value, b: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Packed Shuffle Bytes -- re-orders data in an extended register using a shuffle\n mask from either memory or another extended register","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10674206,"byte_end":10674230,"line_start":4367,"line_end":4367,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5291},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10674829,"byte_end":10674838,"line_start":4387,"line_end":4387,"column_start":8,"column_end":17},"name":"x86_pextr","qualname":"::ir::builder::InstBuilder::x86_pextr","value":"fn <T1> (self, x: ir::Value, Idx: T1) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Extract lane ``Idx`` from ``x``.\n The lane index, ``Idx``, is an immediate value, not an SSA value. It\n must indicate a valid lane index for the type of ``x``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10674797,"byte_end":10674821,"line_start":4386,"line_end":4386,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5293},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10675614,"byte_end":10675623,"line_start":4408,"line_end":4408,"column_start":8,"column_end":17},"name":"x86_pinsr","qualname":"::ir::builder::InstBuilder::x86_pinsr","value":"fn <T1> (self, x: ir::Value, Idx: T1, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Insert ``y`` into ``x`` at lane ``Idx``.\n The lane index, ``Idx``, is an immediate value, not an SSA value. It\n must indicate a valid lane index for the type of ``x``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10675582,"byte_end":10675606,"line_start":4407,"line_end":4407,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5295},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10676437,"byte_end":10676449,"line_start":4429,"line_end":4429,"column_start":8,"column_end":20},"name":"x86_insertps","qualname":"::ir::builder::InstBuilder::x86_insertps","value":"fn <T1> (self, x: ir::Value, Idx: T1, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Insert a lane of ``y`` into ``x`` at using ``Idx`` to encode both which lane the value is\n extracted from and which it is inserted to. This is similar to x86_pinsr but inserts\n floats, which are already stored in an XMM register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10676405,"byte_end":10676429,"line_start":4428,"line_end":4428,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5297},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10677106,"byte_end":10677115,"line_start":4447,"line_end":4447,"column_start":8,"column_end":17},"name":"x86_movsd","qualname":"::ir::builder::InstBuilder::x86_movsd","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Move the low 64 bits of the float vector ``y`` to the low 64 bits of float vector ``x``","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10677074,"byte_end":10677098,"line_start":4446,"line_end":4446,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5298},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10677689,"byte_end":10677700,"line_start":4464,"line_end":4464,"column_start":8,"column_end":19},"name":"x86_movlhps","qualname":"::ir::builder::InstBuilder::x86_movlhps","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Move the low 64 bits of the float vector ``y`` to the high 64 bits of float vector ``x``","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10677657,"byte_end":10677681,"line_start":4463,"line_end":4463,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5299},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10678380,"byte_end":10678388,"line_start":4483,"line_end":4483,"column_start":8,"column_end":16},"name":"x86_psll","qualname":"::ir::builder::InstBuilder::x86_psll","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Shift Packed Data Left Logical -- This implements the behavior of the shared instruction\n ``ishl`` but alters the shift operand to live in an XMM register as expected by the PSLL*\n family of instructions.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10678348,"byte_end":10678372,"line_start":4482,"line_end":4482,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5300},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10679066,"byte_end":10679074,"line_start":4502,"line_end":4502,"column_start":8,"column_end":16},"name":"x86_psrl","qualname":"::ir::builder::InstBuilder::x86_psrl","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Shift Packed Data Right Logical -- This implements the behavior of the shared instruction\n ``ushr`` but alters the shift operand to live in an XMM register as expected by the PSRL*\n family of instructions.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10679034,"byte_end":10679058,"line_start":4501,"line_end":4501,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5301},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10679755,"byte_end":10679763,"line_start":4521,"line_end":4521,"column_start":8,"column_end":16},"name":"x86_psra","qualname":"::ir::builder::InstBuilder::x86_psra","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Shift Packed Data Right Arithmetic -- This implements the behavior of the shared\n instruction ``sshr`` but alters the shift operand to live in an XMM register as expected by\n the PSRA* family of instructions.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10679723,"byte_end":10679747,"line_start":4520,"line_end":4520,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5302},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10680711,"byte_end":10680720,"line_start":4543,"line_end":4543,"column_start":8,"column_end":17},"name":"x86_ptest","qualname":"::ir::builder::InstBuilder::x86_ptest","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Logical Compare -- PTEST will set the ZF flag if all bits in the result are 0 of the\n bitwise AND of the first source operand (first operand) and the second source operand\n (second operand). PTEST sets the CF flag if all bits in the result are 0 of the bitwise\n AND of the second source operand (second operand) and the logical NOT of the destination\n operand (first operand).","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10680679,"byte_end":10680703,"line_start":4542,"line_end":4542,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5303},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10681343,"byte_end":10681352,"line_start":4561,"line_end":4561,"column_start":8,"column_end":17},"name":"x86_pmaxs","qualname":"::ir::builder::InstBuilder::x86_pmaxs","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Maximum of Packed Signed Integers -- Compare signed integers in the first and second\n operand and return the maximum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10681311,"byte_end":10681335,"line_start":4560,"line_end":4560,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5304},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10681979,"byte_end":10681988,"line_start":4579,"line_end":4579,"column_start":8,"column_end":17},"name":"x86_pmaxu","qualname":"::ir::builder::InstBuilder::x86_pmaxu","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Maximum of Packed Unsigned Integers -- Compare unsigned integers in the first and second\n operand and return the maximum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10681947,"byte_end":10681971,"line_start":4578,"line_end":4578,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5305},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10682611,"byte_end":10682620,"line_start":4597,"line_end":4597,"column_start":8,"column_end":17},"name":"x86_pmins","qualname":"::ir::builder::InstBuilder::x86_pmins","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Minimum of Packed Signed Integers -- Compare signed integers in the first and second\n operand and return the minimum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10682579,"byte_end":10682603,"line_start":4596,"line_end":4596,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5306},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10683247,"byte_end":10683256,"line_start":4615,"line_end":4615,"column_start":8,"column_end":17},"name":"x86_pminu","qualname":"::ir::builder::InstBuilder::x86_pminu","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Minimum of Packed Unsigned Integers -- Compare unsigned integers in the first and second\n operand and return the minimum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10683215,"byte_end":10683239,"line_start":4614,"line_end":4614,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5307},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10683550,"byte_end":10683556,"line_start":4623,"line_end":4623,"column_start":8,"column_end":14},"name":"Binary","qualname":"::ir::builder::InstBuilder::Binary","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Binary(imms=(), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10683518,"byte_end":10683542,"line_start":4622,"line_end":4622,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5308},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10683919,"byte_end":10683928,"line_start":4633,"line_end":4633,"column_start":8,"column_end":17},"name":"BinaryImm","qualname":"::ir::builder::InstBuilder::BinaryImm","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10683887,"byte_end":10683911,"line_start":4632,"line_end":4632,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5309},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10684308,"byte_end":10684314,"line_start":4644,"line_end":4644,"column_start":8,"column_end":14},"name":"Branch","qualname":"::ir::builder::InstBuilder::Branch","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Ebb, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Branch(imms=(destination: ir::Ebb), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10684276,"byte_end":10684300,"line_start":4643,"line_end":4643,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5310},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10684731,"byte_end":10684742,"line_start":4655,"line_end":4655,"column_start":8,"column_end":19},"name":"BranchFloat","qualname":"::ir::builder::InstBuilder::BranchFloat","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, destination: ir::Ebb, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BranchFloat(imms=(cond: ir::condcodes::FloatCC, destination: ir::Ebb), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10684699,"byte_end":10684723,"line_start":4654,"line_end":4654,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5311},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10685209,"byte_end":10685219,"line_start":4667,"line_end":4667,"column_start":8,"column_end":18},"name":"BranchIcmp","qualname":"::ir::builder::InstBuilder::BranchIcmp","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, destination: ir::Ebb, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination: ir::Ebb), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10685177,"byte_end":10685201,"line_start":4666,"line_end":4666,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5312},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10685682,"byte_end":10685691,"line_start":4679,"line_end":4679,"column_start":8,"column_end":17},"name":"BranchInt","qualname":"::ir::builder::InstBuilder::BranchInt","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, destination: ir::Ebb, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BranchInt(imms=(cond: ir::condcodes::IntCC, destination: ir::Ebb), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10685650,"byte_end":10685674,"line_start":4678,"line_end":4678,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5313},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10686149,"byte_end":10686160,"line_start":4691,"line_end":4691,"column_start":8,"column_end":19},"name":"BranchTable","qualname":"::ir::builder::InstBuilder::BranchTable","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Ebb, table: ir::JumpTable, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BranchTable(imms=(destination: ir::Ebb, table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10686117,"byte_end":10686141,"line_start":4690,"line_end":4690,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5314},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10686594,"byte_end":10686609,"line_start":4703,"line_end":4703,"column_start":8,"column_end":23},"name":"BranchTableBase","qualname":"::ir::builder::InstBuilder::BranchTableBase","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, table: ir::JumpTable) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BranchTableBase(imms=(table: ir::JumpTable), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10686562,"byte_end":10686586,"line_start":4702,"line_end":4702,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5315},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10686993,"byte_end":10687009,"line_start":4713,"line_end":4713,"column_start":8,"column_end":24},"name":"BranchTableEntry","qualname":"::ir::builder::InstBuilder::BranchTableEntry","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Uimm8, table: ir::JumpTable, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table: ir::JumpTable), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10686961,"byte_end":10686985,"line_start":4712,"line_end":4712,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5316},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10687458,"byte_end":10687462,"line_start":4725,"line_end":4725,"column_start":8,"column_end":12},"name":"Call","qualname":"::ir::builder::InstBuilder::Call","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, func_ref: ir::FuncRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Call(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10687426,"byte_end":10687450,"line_start":4724,"line_end":4724,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5317},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10687845,"byte_end":10687857,"line_start":4736,"line_end":4736,"column_start":8,"column_end":20},"name":"CallIndirect","qualname":"::ir::builder::InstBuilder::CallIndirect","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, sig_ref: ir::SigRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10687813,"byte_end":10687837,"line_start":4735,"line_end":4735,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5318},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10688240,"byte_end":10688248,"line_start":4747,"line_end":4747,"column_start":8,"column_end":16},"name":"CondTrap","qualname":"::ir::builder::InstBuilder::CondTrap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" CondTrap(imms=(code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10688208,"byte_end":10688232,"line_start":4746,"line_end":4746,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5319},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10688641,"byte_end":10688652,"line_start":4758,"line_end":4758,"column_start":8,"column_end":19},"name":"CopySpecial","qualname":"::ir::builder::InstBuilder::CopySpecial","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit, dst: isa::RegUnit) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10688609,"byte_end":10688633,"line_start":4757,"line_end":4757,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5320},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10689025,"byte_end":10689034,"line_start":4769,"line_end":4769,"column_start":8,"column_end":17},"name":"CopyToSsa","qualname":"::ir::builder::InstBuilder::CopyToSsa","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" CopyToSsa(imms=(src: isa::RegUnit), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10688993,"byte_end":10689017,"line_start":4768,"line_end":4768,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5321},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10689381,"byte_end":10689392,"line_start":4779,"line_end":4779,"column_start":8,"column_end":19},"name":"ExtractLane","qualname":"::ir::builder::InstBuilder::ExtractLane","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, lane: ir::immediates::Uimm8, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10689349,"byte_end":10689373,"line_start":4778,"line_end":4778,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5322},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10689790,"byte_end":10689802,"line_start":4790,"line_end":4790,"column_start":8,"column_end":20},"name":"FloatCompare","qualname":"::ir::builder::InstBuilder::FloatCompare","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10689758,"byte_end":10689782,"line_start":4789,"line_end":4789,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5323},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10690221,"byte_end":10690230,"line_start":4801,"line_end":4801,"column_start":8,"column_end":17},"name":"FloatCond","qualname":"::ir::builder::InstBuilder::FloatCond","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10690189,"byte_end":10690213,"line_start":4800,"line_end":4800,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5324},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10690648,"byte_end":10690661,"line_start":4812,"line_end":4812,"column_start":8,"column_end":21},"name":"FloatCondTrap","qualname":"::ir::builder::InstBuilder::FloatCondTrap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10690616,"byte_end":10690640,"line_start":4811,"line_end":4811,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5325},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10691089,"byte_end":10691097,"line_start":4824,"line_end":4824,"column_start":8,"column_end":16},"name":"FuncAddr","qualname":"::ir::builder::InstBuilder::FuncAddr","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, func_ref: ir::FuncRef) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10691057,"byte_end":10691081,"line_start":4823,"line_end":4823,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5326},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10691465,"byte_end":10691473,"line_start":4834,"line_end":4834,"column_start":8,"column_end":16},"name":"HeapAddr","qualname":"::ir::builder::InstBuilder::HeapAddr","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, heap: ir::Heap, imm: ir::immediates::Uimm32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" HeapAddr(imms=(heap: ir::Heap, imm: ir::immediates::Uimm32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10691433,"byte_end":10691457,"line_start":4833,"line_end":4833,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5327},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10691893,"byte_end":10691905,"line_start":4846,"line_end":4846,"column_start":8,"column_end":20},"name":"IndirectJump","qualname":"::ir::builder::InstBuilder::IndirectJump","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, table: ir::JumpTable, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" IndirectJump(imms=(table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10691861,"byte_end":10691885,"line_start":4845,"line_end":4845,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5328},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10692295,"byte_end":10692305,"line_start":4857,"line_end":4857,"column_start":8,"column_end":18},"name":"InsertLane","qualname":"::ir::builder::InstBuilder::InsertLane","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, lane: ir::immediates::Uimm8, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10692263,"byte_end":10692287,"line_start":4856,"line_end":4856,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5329},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10692720,"byte_end":10692730,"line_start":4868,"line_end":4868,"column_start":8,"column_end":18},"name":"IntCompare","qualname":"::ir::builder::InstBuilder::IntCompare","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10692688,"byte_end":10692712,"line_start":4867,"line_end":4867,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5330},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10693175,"byte_end":10693188,"line_start":4879,"line_end":4879,"column_start":8,"column_end":21},"name":"IntCompareImm","qualname":"::ir::builder::InstBuilder::IntCompareImm","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10693143,"byte_end":10693167,"line_start":4878,"line_end":4878,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5331},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10693625,"byte_end":10693632,"line_start":4891,"line_end":4891,"column_start":8,"column_end":15},"name":"IntCond","qualname":"::ir::builder::InstBuilder::IntCond","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10693593,"byte_end":10693617,"line_start":4890,"line_end":4890,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5332},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10694042,"byte_end":10694053,"line_start":4902,"line_end":4902,"column_start":8,"column_end":19},"name":"IntCondTrap","qualname":"::ir::builder::InstBuilder::IntCondTrap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" IntCondTrap(imms=(cond: ir::condcodes::IntCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10694010,"byte_end":10694034,"line_start":4901,"line_end":4901,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5333},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10694483,"byte_end":10694492,"line_start":4914,"line_end":4914,"column_start":8,"column_end":17},"name":"IntSelect","qualname":"::ir::builder::InstBuilder::IntSelect","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10694451,"byte_end":10694475,"line_start":4913,"line_end":4913,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5334},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10694912,"byte_end":10694916,"line_start":4925,"line_end":4925,"column_start":8,"column_end":12},"name":"Jump","qualname":"::ir::builder::InstBuilder::Jump","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Ebb, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Jump(imms=(destination: ir::Ebb), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10694880,"byte_end":10694904,"line_start":4924,"line_end":4924,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5335},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10695327,"byte_end":10695331,"line_start":4936,"line_end":4936,"column_start":8,"column_end":12},"name":"Load","qualname":"::ir::builder::InstBuilder::Load","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Load(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10695295,"byte_end":10695319,"line_start":4935,"line_end":4935,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5336},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10695793,"byte_end":10695804,"line_start":4948,"line_end":4948,"column_start":8,"column_end":19},"name":"LoadComplex","qualname":"::ir::builder::InstBuilder::LoadComplex","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" LoadComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10695761,"byte_end":10695785,"line_start":4947,"line_end":4947,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5337},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10696220,"byte_end":10696228,"line_start":4960,"line_end":4960,"column_start":8,"column_end":16},"name":"MultiAry","qualname":"::ir::builder::InstBuilder::MultiAry","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" MultiAry(imms=(), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10696188,"byte_end":10696212,"line_start":4959,"line_end":4959,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5338},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10696546,"byte_end":10696553,"line_start":4970,"line_end":4970,"column_start":8,"column_end":15},"name":"NullAry","qualname":"::ir::builder::InstBuilder::NullAry","value":"fn (self, opcode: Opcode, ctrl_typevar: Type) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" NullAry(imms=(), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10696514,"byte_end":10696538,"line_start":4969,"line_end":4969,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5339},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10696868,"byte_end":10696875,"line_start":4979,"line_end":4979,"column_start":8,"column_end":15},"name":"RegFill","qualname":"::ir::builder::InstBuilder::RegFill","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: ir::StackSlot, dst: isa::RegUnit, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10696836,"byte_end":10696860,"line_start":4978,"line_end":4978,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5340},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10697298,"byte_end":10697305,"line_start":4991,"line_end":4991,"column_start":8,"column_end":15},"name":"RegMove","qualname":"::ir::builder::InstBuilder::RegMove","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit, dst: isa::RegUnit, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10697266,"byte_end":10697290,"line_start":4990,"line_end":4990,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5341},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10697729,"byte_end":10697737,"line_start":5003,"line_end":5003,"column_start":8,"column_end":16},"name":"RegSpill","qualname":"::ir::builder::InstBuilder::RegSpill","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit, dst: ir::StackSlot, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10697697,"byte_end":10697721,"line_start":5002,"line_end":5002,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5342},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10698144,"byte_end":10698151,"line_start":5015,"line_end":5015,"column_start":8,"column_end":15},"name":"Shuffle","qualname":"::ir::builder::InstBuilder::Shuffle","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, mask: ir::Immediate, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Shuffle(imms=(mask: ir::Immediate), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10698112,"byte_end":10698136,"line_start":5014,"line_end":5014,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5343},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10698587,"byte_end":10698596,"line_start":5026,"line_end":5026,"column_start":8,"column_end":17},"name":"StackLoad","qualname":"::ir::builder::InstBuilder::StackLoad","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, stack_slot: ir::StackSlot, offset: ir::immediates::Offset32) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" StackLoad(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10698555,"byte_end":10698579,"line_start":5025,"line_end":5025,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5344},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10699043,"byte_end":10699053,"line_start":5037,"line_end":5037,"column_start":8,"column_end":18},"name":"StackStore","qualname":"::ir::builder::InstBuilder::StackStore","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, stack_slot: ir::StackSlot, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" StackStore(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10699011,"byte_end":10699035,"line_start":5036,"line_end":5036,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5345},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10699526,"byte_end":10699531,"line_start":5049,"line_end":5049,"column_start":8,"column_end":13},"name":"Store","qualname":"::ir::builder::InstBuilder::Store","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Store(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10699494,"byte_end":10699518,"line_start":5048,"line_end":5048,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5346},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10700017,"byte_end":10700029,"line_start":5061,"line_end":5061,"column_start":8,"column_end":20},"name":"StoreComplex","qualname":"::ir::builder::InstBuilder::StoreComplex","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" StoreComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10699985,"byte_end":10700009,"line_start":5060,"line_end":5060,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5347},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10700497,"byte_end":10700506,"line_start":5073,"line_end":5073,"column_start":8,"column_end":17},"name":"TableAddr","qualname":"::ir::builder::InstBuilder::TableAddr","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, table: ir::Table, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" TableAddr(imms=(table: ir::Table, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10700465,"byte_end":10700489,"line_start":5072,"line_end":5072,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5348},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10700913,"byte_end":10700920,"line_start":5085,"line_end":5085,"column_start":8,"column_end":15},"name":"Ternary","qualname":"::ir::builder::InstBuilder::Ternary","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Ternary(imms=(), vals=3)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10700881,"byte_end":10700905,"line_start":5084,"line_end":5084,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5349},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10701290,"byte_end":10701294,"line_start":5095,"line_end":5095,"column_start":8,"column_end":12},"name":"Trap","qualname":"::ir::builder::InstBuilder::Trap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Trap(imms=(code: ir::TrapCode), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10701258,"byte_end":10701282,"line_start":5094,"line_end":5094,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5350},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10701605,"byte_end":10701610,"line_start":5105,"line_end":5105,"column_start":8,"column_end":13},"name":"Unary","qualname":"::ir::builder::InstBuilder::Unary","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Unary(imms=(), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10701573,"byte_end":10701597,"line_start":5104,"line_end":5104,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5351},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10701933,"byte_end":10701942,"line_start":5115,"line_end":5115,"column_start":8,"column_end":17},"name":"UnaryBool","qualname":"::ir::builder::InstBuilder::UnaryBool","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: bool) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" UnaryBool(imms=(imm: bool), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10701901,"byte_end":10701925,"line_start":5114,"line_end":5114,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5352},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10702282,"byte_end":10702292,"line_start":5125,"line_end":5125,"column_start":8,"column_end":18},"name":"UnaryConst","qualname":"::ir::builder::InstBuilder::UnaryConst","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, constant_handle: ir::Constant) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" UnaryConst(imms=(constant_handle: ir::Constant), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10702250,"byte_end":10702274,"line_start":5124,"line_end":5124,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5353},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10702671,"byte_end":10702687,"line_start":5135,"line_end":5135,"column_start":8,"column_end":24},"name":"UnaryGlobalValue","qualname":"::ir::builder::InstBuilder::UnaryGlobalValue","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, global_value: ir::GlobalValue) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" UnaryGlobalValue(imms=(global_value: ir::GlobalValue), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10702639,"byte_end":10702663,"line_start":5134,"line_end":5134,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5354},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10703062,"byte_end":10703073,"line_start":5145,"line_end":5145,"column_start":8,"column_end":19},"name":"UnaryIeee32","qualname":"::ir::builder::InstBuilder::UnaryIeee32","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee32) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10703030,"byte_end":10703054,"line_start":5144,"line_end":5144,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5355},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10703432,"byte_end":10703443,"line_start":5155,"line_end":5155,"column_start":8,"column_end":19},"name":"UnaryIeee64","qualname":"::ir::builder::InstBuilder::UnaryIeee64","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee64) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10703400,"byte_end":10703424,"line_start":5154,"line_end":5154,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5356},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10703798,"byte_end":10703806,"line_start":5165,"line_end":5165,"column_start":8,"column_end":16},"name":"UnaryImm","qualname":"::ir::builder::InstBuilder::UnaryImm","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10703766,"byte_end":10703790,"line_start":5164,"line_end":5164,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":125262,"byte_end":125278,"line_start":51,"line_end":51,"column_start":11,"column_end":27},"name":"InstInserterBase","qualname":"::ir::builder::InstInserterBase","value":"InstInserterBase<'f>: Sized","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477}],"decl_id":null,"docs":" Base trait for instruction inserters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":125358,"byte_end":125373,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"data_flow_graph","qualname":"::ir::builder::InstInserterBase::data_flow_graph","value":"fn (&self) -> &DataFlowGraph","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Get an immutable reference to the data flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":125464,"byte_end":125483,"line_start":56,"line_end":56,"column_start":8,"column_end":27},"name":"data_flow_graph_mut","qualname":"::ir::builder::InstInserterBase::data_flow_graph_mut","value":"fn (&mut self) -> &mut DataFlowGraph","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Get a mutable reference to the data flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":125585,"byte_end":125602,"line_start":59,"line_end":59,"column_start":8,"column_end":25},"name":"insert_built_inst","qualname":"::ir::builder::InstInserterBase::insert_built_inst","value":"fn (self, inst: Inst, ctrl_typevar: Type) -> &'f mut DataFlowGraph","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Insert a new instruction which belongs to the DFG.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":125997,"byte_end":126010,"line_start":69,"line_end":69,"column_start":12,"column_end":25},"name":"InsertBuilder","qualname":"::ir::builder::InsertBuilder","value":"InsertBuilder {  }","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483}],"decl_id":null,"docs":" Builder that inserts an instruction at the current position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":126320,"byte_end":126323,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<InsertBuilder>::new","value":"fn (inserter: IIB) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder which inserts instructions at `pos`.\n The `dfg` and `pos.layout` references should be from the same `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":126827,"byte_end":126839,"line_start":91,"line_end":91,"column_start":12,"column_end":24},"name":"with_results","qualname":"<InsertBuilder>::with_results","value":"fn <Array> (self, reuse: Array) -> InsertReuseBuilder<'f, IIB, Array>","parent":null,"children":[],"decl_id":null,"docs":" Reuse result values in `reuse`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":127463,"byte_end":127474,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"with_result","qualname":"<InsertBuilder>::with_result","value":"fn (self, v: Value) -> InsertReuseBuilder<'f, IIB, [Option<Value>; 1]>","parent":null,"children":[],"decl_id":null,"docs":" Reuse a single result value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":498},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":128505,"byte_end":128523,"line_start":137,"line_end":137,"column_start":12,"column_end":30},"name":"InsertReuseBuilder","qualname":"::ir::builder::InsertReuseBuilder","value":"InsertReuseBuilder {  }","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504}],"decl_id":null,"docs":" Builder that inserts a new instruction like `InsertBuilder`, but reusing result values.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":512},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":130043,"byte_end":130057,"line_start":181,"line_end":181,"column_start":12,"column_end":26},"name":"ReplaceBuilder","qualname":"::ir::builder::ReplaceBuilder","value":"ReplaceBuilder {  }","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"decl_id":null,"docs":" Instruction builder that replaces an existing instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":130218,"byte_end":130221,"line_start":188,"line_end":188,"column_start":12,"column_end":15},"name":"new","qualname":"<ReplaceBuilder>::new","value":"fn (dfg: &'f mut DataFlowGraph, inst: Inst) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `ReplaceBuilder` that will overwrite `inst`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":524},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constant","qualname":"::ir::constant","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":5357},{"krate":0,"index":5374},{"krate":0,"index":5371},{"krate":0,"index":5368},{"krate":0,"index":5369},{"krate":0,"index":5364},{"krate":0,"index":5365},{"krate":0,"index":5362},{"krate":0,"index":5360},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":564},{"krate":0,"index":5376},{"krate":0,"index":5379},{"krate":0,"index":565},{"krate":0,"index":5381},{"krate":0,"index":5384},{"krate":0,"index":569}],"decl_id":null,"docs":" Constants","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5357},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":133836,"byte_end":133848,"line_start":28,"line_end":28,"column_start":12,"column_end":24},"name":"ConstantData","qualname":"::ir::constant::ConstantData","value":"","parent":null,"children":[],"decl_id":null,"docs":" This type describes the actual constant data. Note that the bytes stored in this structure are\n expected to be in little-endian order; this is due to ease-of-use when interacting with\n WebAssembly values, which are [little-endian by design].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134422,"byte_end":134425,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<ConstantData>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of bytes in the constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134521,"byte_end":134529,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ConstantData>::into_vec","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Convert the data to a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134625,"byte_end":134629,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"iter","qualname":"<ConstantData>::iter","value":"fn (&self) -> Iter<u8>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the constant's bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134735,"byte_end":134741,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"append","qualname":"<ConstantData>::append","value":"fn (mut self, bytes: impl IntoBytes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add new bytes to the constant data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":135032,"byte_end":135041,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"expand_to","qualname":"<ConstantData>::expand_to","value":"fn (mut self, expected_size: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Expand the size of the constant data to `expected_size` number of bytes by adding zeroes\n in the high-order byte slots.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":564},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":137971,"byte_end":137985,"line_start":161,"line_end":161,"column_start":10,"column_end":24},"name":"ConstantOffset","qualname":"::ir::constant::ConstantOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" This type describes an offset in bytes within a constant pool.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5376},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":138510,"byte_end":138527,"line_start":170,"line_end":170,"column_start":12,"column_end":29},"name":"ConstantPoolEntry","qualname":"::ir::constant::ConstantPoolEntry","value":"ConstantPoolEntry {  }","parent":null,"children":[{"krate":0,"index":5377},{"krate":0,"index":5378}],"decl_id":null,"docs":" Inner type for storing data and offset together in the constant pool. The offset is optional\n because it must be set relative to the function code size (i.e. constants are emitted after the\n function body); because the function is not yet compiled when constants are inserted,\n [`set_offset`](crate::ir::ConstantPool::set_offset) must be called once a constant's offset\n from the beginning of the function is known (see\n [`relaxation.rs`](crate::binemit::relaxation)).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":138768,"byte_end":138771,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"len","qualname":"<ConstantPoolEntry>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the constant at this entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":138891,"byte_end":138901,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<ConstantPoolEntry>::set_offset","value":"fn (&mut self, offset: ConstantOffset) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assign a new offset to the constant at this entry.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5381},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":139182,"byte_end":139194,"line_start":194,"line_end":194,"column_start":12,"column_end":24},"name":"ConstantPool","qualname":"::ir::constant::ConstantPool","value":"ConstantPool {  }","parent":null,"children":[{"krate":0,"index":5382},{"krate":0,"index":5383}],"decl_id":null,"docs":" Maintains the mapping between a constant handle (i.e.  [`Constant`](crate::ir::Constant)) and\n its constant data (i.e.  [`ConstantData`](crate::ir::ConstantData)).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":139657,"byte_end":139660,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"new","qualname":"<ConstantPool>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new constant pool instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":139856,"byte_end":139861,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"clear","qualname":"<ConstantPool>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Empty the constant pool of all data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":140191,"byte_end":140197,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"insert","qualname":"<ConstantPool>::insert","value":"fn (&mut self, constant_value: ConstantData) -> Constant","parent":null,"children":[],"decl_id":null,"docs":" Insert constant data into the pool, returning a handle for later referencing; when constant\n data is inserted that is a duplicate of previous constant data, the existing handle will be\n returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":140788,"byte_end":140791,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"get","qualname":"<ConstantPool>::get","value":"fn (&self, constant_handle: Constant) -> &ConstantData","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the constant data given a handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":141187,"byte_end":141197,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<ConstantPool>::set_offset","value":"fn (&mut self, constant_handle: Constant, constant_offset: ConstantOffset) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assign an offset to a given constant, where the offset is the number of bytes from the\n beginning of the function to the beginning of the constant data inside the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":141852,"byte_end":141862,"line_start":256,"line_end":256,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<ConstantPool>::get_offset","value":"fn (&self, constant_handle: Constant) -> ConstantOffset","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the offset of a given constant, where the offset is the number of bytes from the\n beginning of the function to the beginning of the constant data inside the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":142432,"byte_end":142436,"line_start":271,"line_end":271,"column_start":12,"column_end":16},"name":"iter","qualname":"<ConstantPool>::iter","value":"fn (&self) -> impl Iterator<Item = (&Constant, &ConstantData)>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the constants in insertion order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":142659,"byte_end":142670,"line_start":276,"line_end":276,"column_start":12,"column_end":23},"name":"entries_mut","qualname":"<ConstantPool>::entries_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut ConstantPoolEntry>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over mutable entries in the constant pool in insertion order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":142846,"byte_end":142849,"line_start":281,"line_end":281,"column_start":12,"column_end":15},"name":"len","qualname":"<ConstantPool>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of constants in the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":142999,"byte_end":143008,"line_start":286,"line_end":286,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<ConstantPool>::byte_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the combined size of all of the constant values in the pool.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":585},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dfg","qualname":"::ir::dfg","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":597},{"krate":0,"index":602},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":623},{"krate":0,"index":5386},{"krate":0,"index":5398},{"krate":0,"index":624},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":645},{"krate":0,"index":5400},{"krate":0,"index":5419},{"krate":0,"index":5418},{"krate":0,"index":5416},{"krate":0,"index":5412},{"krate":0,"index":5413},{"krate":0,"index":5409},{"krate":0,"index":5410},{"krate":0,"index":658},{"krate":0,"index":5421},{"krate":0,"index":5435},{"krate":0,"index":5433},{"krate":0,"index":663},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":5437},{"krate":0,"index":5439},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":716},{"krate":0,"index":719}],"decl_id":null,"docs":" Data flow graph tracking Instructions, Values, and EBBs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5386},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":150424,"byte_end":150437,"line_start":31,"line_end":31,"column_start":12,"column_end":25},"name":"DataFlowGraph","qualname":"::ir::dfg::DataFlowGraph","value":"DataFlowGraph { value_lists, signatures, old_signatures, ext_funcs, values_labels, constants, immediates }","parent":null,"children":[{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5394},{"krate":0,"index":5395},{"krate":0,"index":5396},{"krate":0,"index":5397}],"decl_id":null,"docs":" A data flow graph defines all instructions and extended basic blocks in a function as well as\n the data flow dependencies between them. The DFG also tracks values which can be either\n instruction results or EBB parameters.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5390},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":151522,"byte_end":151533,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"name":"value_lists","qualname":"::ir::dfg::DataFlowGraph::value_lists","value":"cranelift_entity::list::ListPool<ir::entities::Value>","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" Memory pool of value lists.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5392},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":151808,"byte_end":151818,"line_start":63,"line_end":63,"column_start":9,"column_end":19},"name":"signatures","qualname":"::ir::dfg::DataFlowGraph::signatures","value":"cranelift_entity::primary::PrimaryMap<ir::entities::SigRef, ir::extfunc::Signature>","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" Function signature table. These signatures are referenced by indirect call instructions as\n well as the external function references.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5393},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":151939,"byte_end":151953,"line_start":66,"line_end":66,"column_start":9,"column_end":23},"name":"old_signatures","qualname":"::ir::dfg::DataFlowGraph::old_signatures","value":"cranelift_entity::map::SecondaryMap<ir::entities::SigRef, core::option::Option<ir::extfunc::Signature>>","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" The pre-legalization signature for each entry in `signatures`, if any.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5394},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152092,"byte_end":152101,"line_start":69,"line_end":69,"column_start":9,"column_end":18},"name":"ext_funcs","qualname":"::ir::dfg::DataFlowGraph::ext_funcs","value":"cranelift_entity::primary::PrimaryMap<ir::entities::FuncRef, ir::extfunc::ExtFuncData>","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" External function references. These are functions that can be called directly.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5395},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152174,"byte_end":152187,"line_start":72,"line_end":72,"column_start":9,"column_end":22},"name":"values_labels","qualname":"::ir::dfg::DataFlowGraph::values_labels","value":"core::option::Option<std::collections::HashMap<ir::entities::Value, ir::ValueLabelAssignments>>","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" Saves Value labels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5396},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152288,"byte_end":152297,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"name":"constants","qualname":"::ir::dfg::DataFlowGraph::constants","value":"ir::constant::ConstantPool","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" Constants used within the function\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5397},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152401,"byte_end":152411,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"name":"immediates","qualname":"::ir::dfg::DataFlowGraph::immediates","value":"cranelift_entity::primary::PrimaryMap<ir::entities::Immediate, ir::constant::ConstantData>","parent":{"krate":0,"index":5386},"children":[],"decl_id":null,"docs":" Stores large immediates that otherwise will not fit on InstructionData\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152529,"byte_end":152532,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<DataFlowGraph>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `DataFlowGraph`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":153071,"byte_end":153076,"line_start":100,"line_end":100,"column_start":12,"column_end":17},"name":"clear","qualname":"<DataFlowGraph>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear everything.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":153672,"byte_end":153681,"line_start":118,"line_end":118,"column_start":12,"column_end":21},"name":"num_insts","qualname":"<DataFlowGraph>::num_insts","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of instructions created in this function, whether they are currently\n inserted in the layout or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":153811,"byte_end":153824,"line_start":123,"line_end":123,"column_start":12,"column_end":25},"name":"inst_is_valid","qualname":"<DataFlowGraph>::inst_is_valid","value":"fn (&self, inst: Inst) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given instruction reference is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":154129,"byte_end":154137,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"num_ebbs","qualname":"<DataFlowGraph>::num_ebbs","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of extended basic blocks created in this function, whether they are\n currently inserted in the layout or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":154258,"byte_end":154270,"line_start":136,"line_end":136,"column_start":12,"column_end":24},"name":"ebb_is_valid","qualname":"<DataFlowGraph>::ebb_is_valid","value":"fn (&self, ebb: Ebb) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given ebb reference is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":154388,"byte_end":154398,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"num_values","qualname":"<DataFlowGraph>::num_values","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":154509,"byte_end":154527,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"collect_debug_info","qualname":"<DataFlowGraph>::collect_debug_info","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Starts collection of debug information.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":635},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":155512,"byte_end":155518,"line_start":184,"line_end":184,"column_start":12,"column_end":18},"name":"Values","qualname":"::ir::dfg::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":637}],"decl_id":null,"docs":" Iterator over all Values in a DFG\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":156372,"byte_end":156378,"line_start":223,"line_end":223,"column_start":12,"column_end":18},"name":"values","qualname":"<DataFlowGraph>::values","value":"fn <'a> (&'a self) -> Values","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":156534,"byte_end":156548,"line_start":230,"line_end":230,"column_start":12,"column_end":26},"name":"value_is_valid","qualname":"<DataFlowGraph>::value_is_valid","value":"fn (&self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a value reference is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":156659,"byte_end":156669,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"value_type","qualname":"<DataFlowGraph>::value_type","value":"fn (&self, v: Value) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the type of a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":157043,"byte_end":157052,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"value_def","qualname":"<DataFlowGraph>::value_def","value":"fn (&self, v: Value) -> ValueDef","parent":null,"children":[],"decl_id":null,"docs":" Get the definition of a value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":157945,"byte_end":157962,"line_start":265,"line_end":265,"column_start":12,"column_end":29},"name":"value_is_attached","qualname":"<DataFlowGraph>::value_is_attached","value":"fn (&self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if `v` is an attached instruction result / EBB parameter.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":158396,"byte_end":158411,"line_start":277,"line_end":277,"column_start":12,"column_end":27},"name":"resolve_aliases","qualname":"<DataFlowGraph>::resolve_aliases","value":"fn (&self, value: Value) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Resolve value aliases.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":158681,"byte_end":158709,"line_start":285,"line_end":285,"column_start":12,"column_end":40},"name":"resolve_aliases_in_arguments","qualname":"<DataFlowGraph>::resolve_aliases_in_arguments","value":"fn (&mut self, inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resolve all aliases among inst's arguments.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":159268,"byte_end":159283,"line_start":300,"line_end":300,"column_start":12,"column_end":27},"name":"change_to_alias","qualname":"<DataFlowGraph>::change_to_alias","value":"fn (&mut self, dest: Value, src: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Turn a value into an alias of another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":160526,"byte_end":160546,"line_start":334,"line_end":334,"column_start":12,"column_end":32},"name":"replace_with_aliases","qualname":"<DataFlowGraph>::replace_with_aliases","value":"fn (&mut self, dest_inst: Inst, src_inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the results of one instruction with aliases to the results of another.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5401},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":161904,"byte_end":161910,"line_start":377,"line_end":377,"column_start":5,"column_end":11},"name":"Result","qualname":"::ir::dfg::ValueDef::Result","value":"ValueDef::Result(Inst, usize)","parent":{"krate":0,"index":5400},"children":[],"decl_id":null,"docs":" Value is the n'th result of an instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5405},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":161976,"byte_end":161981,"line_start":379,"line_end":379,"column_start":5,"column_end":10},"name":"Param","qualname":"::ir::dfg::ValueDef::Param","value":"ValueDef::Param(Ebb, usize)","parent":{"krate":0,"index":5400},"children":[],"decl_id":null,"docs":" Value is the n'th parameter to an EBB.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5400},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":161837,"byte_end":161845,"line_start":375,"line_end":375,"column_start":10,"column_end":18},"name":"ValueDef","qualname":"::ir::dfg::ValueDef","value":"ValueDef::{Result, Param}","parent":null,"children":[{"krate":0,"index":5401},{"krate":0,"index":5405}],"decl_id":null,"docs":" Where did a value come from?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":162095,"byte_end":162106,"line_start":384,"line_end":384,"column_start":12,"column_end":23},"name":"unwrap_inst","qualname":"<ValueDef>::unwrap_inst","value":"fn (&self) -> Inst","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the instruction where the value was defined, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":162345,"byte_end":162355,"line_start":392,"line_end":392,"column_start":12,"column_end":22},"name":"unwrap_ebb","qualname":"<ValueDef>::unwrap_ebb","value":"fn (&self) -> Ebb","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the EBB there the parameter is defined, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":162579,"byte_end":162581,"line_start":400,"line_end":400,"column_start":12,"column_end":14},"name":"pp","qualname":"<ValueDef>::pp","value":"fn (self) -> ir::ExpandedProgramPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the program point where the value was defined.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":162833,"byte_end":162836,"line_start":408,"line_end":408,"column_start":12,"column_end":15},"name":"num","qualname":"<ValueDef>::num","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number component of this definition.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":163762,"byte_end":163771,"line_start":437,"line_end":437,"column_start":12,"column_end":21},"name":"make_inst","qualname":"<DataFlowGraph>::make_inst","value":"fn (&mut self, data: InstructionData) -> Inst","parent":null,"children":[],"decl_id":null,"docs":" Create a new instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":163982,"byte_end":163994,"line_start":444,"line_end":444,"column_start":12,"column_end":24},"name":"display_inst","qualname":"<DataFlowGraph>::display_inst","value":"fn <'a, I> (&'a self, inst: Inst, isa: I) -> DisplayInst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an object that displays `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":164233,"byte_end":164242,"line_start":453,"line_end":453,"column_start":12,"column_end":21},"name":"inst_args","qualname":"<DataFlowGraph>::inst_args","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get all value arguments on `inst` as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":164410,"byte_end":164423,"line_start":458,"line_end":458,"column_start":12,"column_end":25},"name":"inst_args_mut","qualname":"<DataFlowGraph>::inst_args_mut","value":"fn (&mut self, inst: Inst) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get all value arguments on `inst` as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":164605,"byte_end":164620,"line_start":463,"line_end":463,"column_start":12,"column_end":27},"name":"inst_fixed_args","qualname":"<DataFlowGraph>::inst_fixed_args","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the fixed value arguments on `inst` as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":164919,"byte_end":164938,"line_start":472,"line_end":472,"column_start":12,"column_end":31},"name":"inst_fixed_args_mut","qualname":"<DataFlowGraph>::inst_fixed_args_mut","value":"fn (&mut self, inst: Inst) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the fixed value arguments on `inst` as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":165248,"byte_end":165266,"line_start":481,"line_end":481,"column_start":12,"column_end":30},"name":"inst_variable_args","qualname":"<DataFlowGraph>::inst_variable_args","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the variable value arguments on `inst` as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":165568,"byte_end":165590,"line_start":490,"line_end":490,"column_start":12,"column_end":34},"name":"inst_variable_args_mut","qualname":"<DataFlowGraph>::inst_variable_args_mut","value":"fn (&mut self, inst: Inst) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the variable value arguments on `inst` as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":166622,"byte_end":166639,"line_start":510,"line_end":510,"column_start":12,"column_end":29},"name":"make_inst_results","qualname":"<DataFlowGraph>::make_inst_results","value":"fn (&mut self, inst: Inst, ctrl_typevar: Type) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Create result values for an instruction that produces multiple results.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":167119,"byte_end":167144,"line_start":519,"line_end":519,"column_start":12,"column_end":37},"name":"make_inst_results_reusing","qualname":"<DataFlowGraph>::make_inst_results_reusing","value":"fn <I> (&mut self, inst: Inst, ctrl_typevar: Type, reuse: I) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Create result values for `inst`, reusing the provided detached values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":169044,"byte_end":169051,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"replace","qualname":"<DataFlowGraph>::replace","value":"fn (&mut self, inst: Inst) -> ReplaceBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a `ReplaceBuilder` that will replace `inst` with a new instruction in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":169394,"byte_end":169408,"line_start":576,"line_end":576,"column_start":12,"column_end":26},"name":"detach_results","qualname":"<DataFlowGraph>::detach_results","value":"fn (&mut self, inst: Inst) -> ValueList","parent":null,"children":[],"decl_id":null,"docs":" Detach the list of result values from `inst` and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":169725,"byte_end":169738,"line_start":584,"line_end":584,"column_start":12,"column_end":25},"name":"clear_results","qualname":"<DataFlowGraph>::clear_results","value":"fn (&mut self, inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the list of result values from `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":170177,"byte_end":170190,"line_start":594,"line_end":594,"column_start":12,"column_end":25},"name":"attach_result","qualname":"<DataFlowGraph>::attach_result","value":"fn (&mut self, inst: Inst, res: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Attach an existing value to the result value list for `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":170891,"byte_end":170905,"line_start":613,"line_end":613,"column_start":12,"column_end":26},"name":"replace_result","qualname":"<DataFlowGraph>::replace_result","value":"fn (&mut self, old_value: Value, new_type: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Replace an instruction result with a new value of type `new_type`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":171823,"byte_end":171836,"line_start":641,"line_end":641,"column_start":12,"column_end":25},"name":"append_result","qualname":"<DataFlowGraph>::append_result","value":"fn (&mut self, inst: Inst, ty: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Append a new instruction result value to `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":172327,"byte_end":172342,"line_start":655,"line_end":655,"column_start":12,"column_end":27},"name":"append_inst_arg","qualname":"<DataFlowGraph>::append_inst_arg","value":"fn (&mut self, inst: Inst, new_arg: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append a new value argument to an instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":172795,"byte_end":172807,"line_start":666,"line_end":666,"column_start":12,"column_end":24},"name":"first_result","qualname":"<DataFlowGraph>::first_result","value":"fn (&self, inst: Inst) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Get the first result of an instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":173027,"byte_end":173038,"line_start":673,"line_end":673,"column_start":12,"column_end":23},"name":"has_results","qualname":"<DataFlowGraph>::has_results","value":"fn (&self, inst: Inst) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if `inst` has any result values currently.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":173175,"byte_end":173187,"line_start":678,"line_end":678,"column_start":12,"column_end":24},"name":"inst_results","qualname":"<DataFlowGraph>::inst_results","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Return all the results of an instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":173427,"byte_end":173441,"line_start":684,"line_end":684,"column_start":12,"column_end":26},"name":"call_signature","qualname":"<DataFlowGraph>::call_signature","value":"fn (&self, inst: Inst) -> Option<SigRef>","parent":null,"children":[],"decl_id":null,"docs":" Get the call signature of a direct or indirect call instruction.\n Returns `None` if `inst` is not a call instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":173773,"byte_end":173787,"line_start":693,"line_end":693,"column_start":12,"column_end":26},"name":"analyze_branch","qualname":"<DataFlowGraph>::analyze_branch","value":"fn (&self, inst: Inst) -> BranchInfo","parent":null,"children":[],"decl_id":null,"docs":" Check if `inst` is a branch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":174299,"byte_end":174318,"line_start":704,"line_end":704,"column_start":12,"column_end":31},"name":"compute_result_type","qualname":"<DataFlowGraph>::compute_result_type","value":"fn (&self, inst: Inst, result_idx: usize, ctrl_typevar: Type) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Compute the type of an instruction result from opcode constraints and call signatures.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":175109,"byte_end":175121,"line_start":727,"line_end":727,"column_start":12,"column_end":24},"name":"ctrl_typevar","qualname":"<DataFlowGraph>::ctrl_typevar","value":"fn (&self, inst: Inst) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the controlling type variable, or `INVALID` if `inst` isn't polymorphic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176320,"byte_end":176328,"line_start":765,"line_end":765,"column_start":12,"column_end":20},"name":"make_ebb","qualname":"<DataFlowGraph>::make_ebb","value":"fn (&mut self) -> Ebb","parent":null,"children":[],"decl_id":null,"docs":" Create a new basic block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176453,"byte_end":176467,"line_start":770,"line_end":770,"column_start":12,"column_end":26},"name":"num_ebb_params","qualname":"<DataFlowGraph>::num_ebb_params","value":"fn (&self, ebb: Ebb) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of parameters on `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176604,"byte_end":176614,"line_start":775,"line_end":775,"column_start":12,"column_end":22},"name":"ebb_params","qualname":"<DataFlowGraph>::ebb_params","value":"fn (&self, ebb: Ebb) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the parameters on `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176774,"byte_end":176790,"line_start":780,"line_end":780,"column_start":12,"column_end":28},"name":"append_ebb_param","qualname":"<DataFlowGraph>::append_ebb_param","value":"fn (&mut self, ebb: Ebb, ty: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Append a parameter with type `ty` to `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":177649,"byte_end":177670,"line_start":799,"line_end":799,"column_start":12,"column_end":33},"name":"swap_remove_ebb_param","qualname":"<DataFlowGraph>::swap_remove_ebb_param","value":"fn (&mut self, val: Value) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Removes `val` from `ebb`'s parameters by swapping it with the last parameter on `ebb`.\n Returns the position of `val` before removal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":178649,"byte_end":178665,"line_start":825,"line_end":825,"column_start":12,"column_end":28},"name":"remove_ebb_param","qualname":"<DataFlowGraph>::remove_ebb_param","value":"fn (&mut self, val: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes `val` from `ebb`'s parameters by a standard linear time list removal which\n preserves ordering. Also updates the values' data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":179865,"byte_end":179881,"line_start":859,"line_end":859,"column_start":12,"column_end":28},"name":"attach_ebb_param","qualname":"<DataFlowGraph>::attach_ebb_param","value":"fn (&mut self, ebb: Ebb, param: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append an existing value to `ebb`'s parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":180790,"byte_end":180807,"line_start":880,"line_end":880,"column_start":12,"column_end":29},"name":"replace_ebb_param","qualname":"<DataFlowGraph>::replace_ebb_param","value":"fn (&mut self, old_value: Value, new_type: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Replace an EBB parameter with a new value of type `ty`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":181718,"byte_end":181735,"line_start":902,"line_end":902,"column_start":12,"column_end":29},"name":"detach_ebb_params","qualname":"<DataFlowGraph>::detach_ebb_params","value":"fn (&mut self, ebb: Ebb) -> ValueList","parent":null,"children":[],"decl_id":null,"docs":" Detach all the parameters from `ebb` and return them as a `ValueList`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":182354,"byte_end":182365,"line_start":927,"line_end":927,"column_start":12,"column_end":23},"name":"DisplayInst","qualname":"::ir::dfg::DisplayInst","value":"","parent":null,"children":[],"decl_id":null,"docs":" Object that can display an instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":184085,"byte_end":184113,"line_start":975,"line_end":975,"column_start":12,"column_end":40},"name":"make_inst_results_for_parser","qualname":"<DataFlowGraph>::make_inst_results_for_parser","value":"fn (&mut self, inst: Inst, ctrl_typevar: Type, reuse: &[Value]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Create result values for `inst`, reusing the provided detached values.\n This is similar to `make_inst_results_reusing` except it's only for use\n in the parser, which needs to reuse previously invalid values.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":184066,"byte_end":184073,"line_start":974,"line_end":974,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":185466,"byte_end":185493,"line_start":1010,"line_end":1010,"column_start":12,"column_end":39},"name":"append_ebb_param_for_parser","qualname":"<DataFlowGraph>::append_ebb_param_for_parser","value":"fn (&mut self, ebb: Ebb, ty: Type, val: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Similar to `append_ebb_param`, append a parameter with type `ty` to\n `ebb`, but using value `val`. This is only for use by the parser to\n create parameters with specific values.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":185447,"byte_end":185454,"line_start":1009,"line_end":1009,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":185981,"byte_end":186015,"line_start":1023,"line_end":1023,"column_start":12,"column_end":46},"name":"make_value_alias_for_serialization","qualname":"<DataFlowGraph>::make_value_alias_for_serialization","value":"fn (&mut self, src: Value, dest: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create a new value alias. This is only for use by the parser to create\n aliases with specific values, and the printer for testing.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":185962,"byte_end":185969,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":186801,"byte_end":186835,"line_start":1042,"line_end":1042,"column_start":12,"column_end":46},"name":"value_alias_dest_for_serialization","qualname":"<DataFlowGraph>::value_alias_dest_for_serialization","value":"fn (&self, v: Value) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" If `v` is already defined as an alias, return its destination value.\n Otherwise return None. This allows the parser to coalesce identical\n alias definitions, and the printer to identify an alias's immediate target.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":186782,"byte_end":186789,"line_start":1041,"line_end":1041,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":187172,"byte_end":187197,"line_start":1053,"line_end":1053,"column_start":12,"column_end":37},"name":"set_alias_type_for_parser","qualname":"<DataFlowGraph>::set_alias_type_for_parser","value":"fn (&mut self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compute the type of an alias. This is only for use in the parser.\n Returns false if an alias cycle was encountered.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":187153,"byte_end":187160,"line_start":1052,"line_end":1052,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":187805,"byte_end":187834,"line_start":1071,"line_end":1071,"column_start":12,"column_end":41},"name":"make_invalid_value_for_parser","qualname":"<DataFlowGraph>::make_invalid_value_for_parser","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create an invalid value, to pad the index space. This is only for use by\n the parser to pad out the value index space.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":187786,"byte_end":187793,"line_start":1070,"line_end":1070,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":188158,"byte_end":188183,"line_start":1082,"line_end":1082,"column_start":12,"column_end":37},"name":"value_is_valid_for_parser","qualname":"<DataFlowGraph>::value_is_valid_for_parser","value":"fn (&self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a value reference is valid, while being aware of aliases which\n may be unresolved while parsing.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":188139,"byte_end":188146,"line_start":1081,"line_end":1081,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":729},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"entities","qualname":"::ir::entities","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":5441},{"krate":0,"index":5464},{"krate":0,"index":5462},{"krate":0,"index":5458},{"krate":0,"index":5459},{"krate":0,"index":5455},{"krate":0,"index":5456},{"krate":0,"index":5452},{"krate":0,"index":5446},{"krate":0,"index":5444},{"krate":0,"index":5469},{"krate":0,"index":5472},{"krate":0,"index":5474},{"krate":0,"index":5465},{"krate":0,"index":5467},{"krate":0,"index":733},{"krate":0,"index":5477},{"krate":0,"index":5500},{"krate":0,"index":5498},{"krate":0,"index":5494},{"krate":0,"index":5495},{"krate":0,"index":5491},{"krate":0,"index":5492},{"krate":0,"index":5488},{"krate":0,"index":5482},{"krate":0,"index":5480},{"krate":0,"index":5505},{"krate":0,"index":5508},{"krate":0,"index":5510},{"krate":0,"index":5501},{"krate":0,"index":5503},{"krate":0,"index":735},{"krate":0,"index":5513},{"krate":0,"index":5536},{"krate":0,"index":5534},{"krate":0,"index":5530},{"krate":0,"index":5531},{"krate":0,"index":5527},{"krate":0,"index":5528},{"krate":0,"index":5524},{"krate":0,"index":5518},{"krate":0,"index":5516},{"krate":0,"index":5541},{"krate":0,"index":5544},{"krate":0,"index":5546},{"krate":0,"index":5537},{"krate":0,"index":5539},{"krate":0,"index":5549},{"krate":0,"index":5564},{"krate":0,"index":5562},{"krate":0,"index":5558},{"krate":0,"index":5559},{"krate":0,"index":5555},{"krate":0,"index":5556},{"krate":0,"index":5552},{"krate":0,"index":5569},{"krate":0,"index":5572},{"krate":0,"index":5574},{"krate":0,"index":5565},{"krate":0,"index":5567},{"krate":0,"index":737},{"krate":0,"index":5577},{"krate":0,"index":5592},{"krate":0,"index":5590},{"krate":0,"index":5586},{"krate":0,"index":5587},{"krate":0,"index":5583},{"krate":0,"index":5584},{"krate":0,"index":5580},{"krate":0,"index":5597},{"krate":0,"index":5600},{"krate":0,"index":5602},{"krate":0,"index":5593},{"krate":0,"index":5595},{"krate":0,"index":739},{"krate":0,"index":5605},{"krate":0,"index":5628},{"krate":0,"index":5626},{"krate":0,"index":5622},{"krate":0,"index":5623},{"krate":0,"index":5619},{"krate":0,"index":5620},{"krate":0,"index":5616},{"krate":0,"index":5614},{"krate":0,"index":5608},{"krate":0,"index":5633},{"krate":0,"index":5636},{"krate":0,"index":5638},{"krate":0,"index":5629},{"krate":0,"index":5631},{"krate":0,"index":741},{"krate":0,"index":5641},{"krate":0,"index":5656},{"krate":0,"index":5654},{"krate":0,"index":5650},{"krate":0,"index":5651},{"krate":0,"index":5647},{"krate":0,"index":5648},{"krate":0,"index":5644},{"krate":0,"index":5661},{"krate":0,"index":5664},{"krate":0,"index":5666},{"krate":0,"index":5657},{"krate":0,"index":5659},{"krate":0,"index":743},{"krate":0,"index":5669},{"krate":0,"index":5684},{"krate":0,"index":5682},{"krate":0,"index":5678},{"krate":0,"index":5679},{"krate":0,"index":5675},{"krate":0,"index":5676},{"krate":0,"index":5672},{"krate":0,"index":5689},{"krate":0,"index":5692},{"krate":0,"index":5694},{"krate":0,"index":5685},{"krate":0,"index":5687},{"krate":0,"index":745},{"krate":0,"index":5697},{"krate":0,"index":5712},{"krate":0,"index":5710},{"krate":0,"index":5706},{"krate":0,"index":5707},{"krate":0,"index":5703},{"krate":0,"index":5704},{"krate":0,"index":5700},{"krate":0,"index":5717},{"krate":0,"index":5720},{"krate":0,"index":5722},{"krate":0,"index":5713},{"krate":0,"index":5715},{"krate":0,"index":747},{"krate":0,"index":5725},{"krate":0,"index":5740},{"krate":0,"index":5738},{"krate":0,"index":5734},{"krate":0,"index":5735},{"krate":0,"index":5731},{"krate":0,"index":5732},{"krate":0,"index":5728},{"krate":0,"index":5745},{"krate":0,"index":5748},{"krate":0,"index":5750},{"krate":0,"index":5741},{"krate":0,"index":5743},{"krate":0,"index":749},{"krate":0,"index":5753},{"krate":0,"index":5768},{"krate":0,"index":5766},{"krate":0,"index":5762},{"krate":0,"index":5763},{"krate":0,"index":5759},{"krate":0,"index":5760},{"krate":0,"index":5756},{"krate":0,"index":5773},{"krate":0,"index":5776},{"krate":0,"index":5778},{"krate":0,"index":5769},{"krate":0,"index":5771},{"krate":0,"index":751},{"krate":0,"index":5781},{"krate":0,"index":5796},{"krate":0,"index":5794},{"krate":0,"index":5790},{"krate":0,"index":5791},{"krate":0,"index":5787},{"krate":0,"index":5788},{"krate":0,"index":5784},{"krate":0,"index":5801},{"krate":0,"index":5804},{"krate":0,"index":5806},{"krate":0,"index":5797},{"krate":0,"index":5799},{"krate":0,"index":753},{"krate":0,"index":5809},{"krate":0,"index":5854},{"krate":0,"index":5852},{"krate":0,"index":5848},{"krate":0,"index":5849},{"krate":0,"index":5845},{"krate":0,"index":5846},{"krate":0,"index":5842},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777}],"decl_id":null,"docs":" Cranelift IR entity references.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5441},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":197192,"byte_end":197195,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"Ebb","qualname":"::ir::entities::Ebb","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an [extended basic\n block](https://en.wikipedia.org/wiki/Extended_basic_block) in a\n [`Function`](super::function::Function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":197405,"byte_end":197416,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Ebb>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new EBB reference from its number. This corresponds to the `ebbNN` representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5477},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":198284,"byte_end":198289,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"Value","qualname":"::ir::entities::Value","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an SSA value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":198506,"byte_end":198517,"line_start":73,"line_end":73,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Value>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a value from its number representation.\n This is the number in the `vNN` notation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5513},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":199422,"byte_end":199426,"line_start":95,"line_end":95,"column_start":12,"column_end":16},"name":"Inst","qualname":"::ir::entities::Inst","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an instruction in a [`Function`](super::Function).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5549},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":200138,"byte_end":200147,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"StackSlot","qualname":"::ir::entities::StackSlot","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a stack slot.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":200327,"byte_end":200338,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"with_number","qualname":"<StackSlot>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new stack slot reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5577},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":201601,"byte_end":201612,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"GlobalValue","qualname":"::ir::entities::GlobalValue","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a global value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":201798,"byte_end":201809,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"with_number","qualname":"<GlobalValue>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new global value reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5605},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":202259,"byte_end":202267,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"Constant","qualname":"::ir::entities::Constant","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a constant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":202439,"byte_end":202450,"line_start":175,"line_end":175,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Constant>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a const reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5641},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":202998,"byte_end":203007,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"Immediate","qualname":"::ir::entities::Immediate","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an immediate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":203184,"byte_end":203195,"line_start":198,"line_end":198,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Immediate>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create an immediate reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5669},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":204095,"byte_end":204104,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"JumpTable","qualname":"::ir::entities::JumpTable","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [jump table](https://en.wikipedia.org/wiki/Branch_table).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":204284,"byte_end":204295,"line_start":226,"line_end":226,"column_start":12,"column_end":23},"name":"with_number","qualname":"<JumpTable>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new jump table reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5697},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":205589,"byte_end":205596,"line_start":252,"line_end":252,"column_start":12,"column_end":19},"name":"FuncRef","qualname":"::ir::entities::FuncRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to another [`Function`](super::Function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":205779,"byte_end":205790,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"with_number","qualname":"<FuncRef>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new external function reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5725},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":206836,"byte_end":206842,"line_start":281,"line_end":281,"column_start":12,"column_end":18},"name":"SigRef","qualname":"::ir::entities::SigRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a function [`Signature`](super::Signature).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":207025,"byte_end":207036,"line_start":288,"line_end":288,"column_start":12,"column_end":23},"name":"with_number","qualname":"<SigRef>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new function signature reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5753},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":207605,"byte_end":207609,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"name":"Heap","qualname":"::ir::entities::Heap","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [heap](https://en.wikipedia.org/wiki/Memory_management#DYNAMIC).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":207775,"byte_end":207786,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Heap>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new heap reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5781},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":208539,"byte_end":208544,"line_start":328,"line_end":328,"column_start":12,"column_end":17},"name":"Table","qualname":"::ir::entities::Table","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [WebAssembly\n table](https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format#WebAssembly_tables).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":208714,"byte_end":208725,"line_start":335,"line_end":335,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Table>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new table reference from its number.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5810},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209052,"byte_end":209060,"line_start":348,"line_end":348,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::entities::AnyEntity::Function","value":"AnyEntity::Function","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" The whole function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5812},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209099,"byte_end":209102,"line_start":350,"line_end":350,"column_start":5,"column_end":8},"name":"Ebb","qualname":"::ir::entities::AnyEntity::Ebb","value":"AnyEntity::Ebb(Ebb)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" An extended basic block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5815},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209137,"byte_end":209141,"line_start":352,"line_end":352,"column_start":5,"column_end":9},"name":"Inst","qualname":"::ir::entities::AnyEntity::Inst","value":"AnyEntity::Inst(Inst)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" An instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5818},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209175,"byte_end":209180,"line_start":354,"line_end":354,"column_start":5,"column_end":10},"name":"Value","qualname":"::ir::entities::AnyEntity::Value","value":"AnyEntity::Value(Value)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" An SSA value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5821},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209215,"byte_end":209224,"line_start":356,"line_end":356,"column_start":5,"column_end":14},"name":"StackSlot","qualname":"::ir::entities::AnyEntity::StackSlot","value":"AnyEntity::StackSlot(StackSlot)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" A stack slot.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5824},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209265,"byte_end":209276,"line_start":358,"line_end":358,"column_start":5,"column_end":16},"name":"GlobalValue","qualname":"::ir::entities::AnyEntity::GlobalValue","value":"AnyEntity::GlobalValue(GlobalValue)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" A Global value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5827},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209317,"byte_end":209326,"line_start":360,"line_end":360,"column_start":5,"column_end":14},"name":"JumpTable","qualname":"::ir::entities::AnyEntity::JumpTable","value":"AnyEntity::JumpTable(JumpTable)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" A jump table.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5830},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209373,"byte_end":209380,"line_start":362,"line_end":362,"column_start":5,"column_end":12},"name":"FuncRef","qualname":"::ir::entities::AnyEntity::FuncRef","value":"AnyEntity::FuncRef(FuncRef)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" An external function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5833},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209430,"byte_end":209436,"line_start":364,"line_end":364,"column_start":5,"column_end":11},"name":"SigRef","qualname":"::ir::entities::AnyEntity::SigRef","value":"AnyEntity::SigRef(SigRef)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" A function call signature.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5836},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209466,"byte_end":209470,"line_start":366,"line_end":366,"column_start":5,"column_end":9},"name":"Heap","qualname":"::ir::entities::AnyEntity::Heap","value":"AnyEntity::Heap(Heap)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" A heap.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5839},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209499,"byte_end":209504,"line_start":368,"line_end":368,"column_start":5,"column_end":10},"name":"Table","qualname":"::ir::entities::AnyEntity::Table","value":"AnyEntity::Table(Table)","parent":{"krate":0,"index":5809},"children":[],"decl_id":null,"docs":" A table.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5809},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209008,"byte_end":209017,"line_start":346,"line_end":346,"column_start":10,"column_end":19},"name":"AnyEntity","qualname":"::ir::entities::AnyEntity","value":"AnyEntity::{Function, Ebb, Inst, Value, StackSlot, GlobalValue, JumpTable, FuncRef, SigRef, Heap, Table}","parent":null,"children":[{"krate":0,"index":5810},{"krate":0,"index":5812},{"krate":0,"index":5815},{"krate":0,"index":5818},{"krate":0,"index":5821},{"krate":0,"index":5824},{"krate":0,"index":5827},{"krate":0,"index":5830},{"krate":0,"index":5833},{"krate":0,"index":5836},{"krate":0,"index":5839}],"decl_id":null,"docs":" An opaque reference to any of the entities defined in this module that can appear in CLIF IR.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5855},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213024,"byte_end":213033,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Signature","qualname":"::ir::extfunc::Signature","value":"Signature { params, returns, call_conv }","parent":null,"children":[{"krate":0,"index":5856},{"krate":0,"index":5857},{"krate":0,"index":5858}],"decl_id":null,"docs":" Function signature.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5856},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213090,"byte_end":213096,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"name":"params","qualname":"::ir::extfunc::Signature::params","value":"alloc::vec::Vec<ir::extfunc::AbiParam>","parent":{"krate":0,"index":5855},"children":[],"decl_id":null,"docs":" The arguments passed to the function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5857},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213164,"byte_end":213171,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"name":"returns","qualname":"::ir::extfunc::Signature::returns","value":"alloc::vec::Vec<ir::extfunc::AbiParam>","parent":{"krate":0,"index":5855},"children":[],"decl_id":null,"docs":" Values returned from the function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5858},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213225,"byte_end":213234,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"name":"call_conv","qualname":"::ir::extfunc::Signature::call_conv","value":"isa::call_conv::CallConv","parent":{"krate":0,"index":5855},"children":[],"decl_id":null,"docs":" Calling convention.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213315,"byte_end":213318,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Signature>::new","value":"fn (call_conv: CallConv) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213564,"byte_end":213569,"line_start":43,"line_end":43,"column_start":12,"column_end":17},"name":"clear","qualname":"<Signature>::clear","value":"fn (&mut self, call_conv: CallConv) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the signature so it is identical to a fresh one returned by `new()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213795,"byte_end":213802,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"display","qualname":"<Signature>::display","value":"fn <'a, R> (&'a self, regs: R) -> DisplaySignature<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display `self` with correct register names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":214015,"byte_end":214034,"line_start":55,"line_end":55,"column_start":12,"column_end":31},"name":"special_param_index","qualname":"<Signature>::special_param_index","value":"fn (&self, purpose: ArgumentPurpose) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the index of a presumed unique special-purpose parameter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":214243,"byte_end":214263,"line_start":60,"line_end":60,"column_start":12,"column_end":32},"name":"special_return_index","qualname":"<Signature>::special_return_index","value":"fn (&self, purpose: ArgumentPurpose) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the index of a presumed unique special-purpose parameter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":214493,"byte_end":214511,"line_start":66,"line_end":66,"column_start":12,"column_end":30},"name":"uses_special_param","qualname":"<Signature>::uses_special_param","value":"fn (&self, purpose: ArgumentPurpose) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this signature have a parameter whose `ArgumentPurpose` is\n `purpose`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":214705,"byte_end":214724,"line_start":71,"line_end":71,"column_start":12,"column_end":31},"name":"uses_special_return","qualname":"<Signature>::uses_special_return","value":"fn (&self, purpose: ArgumentPurpose) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this signature have a return whose `ArgumentPurpose` is `purpose`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":214900,"byte_end":214918,"line_start":76,"line_end":76,"column_start":12,"column_end":30},"name":"num_special_params","qualname":"<Signature>::num_special_params","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many special parameters does this function have?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":215136,"byte_end":215155,"line_start":84,"line_end":84,"column_start":12,"column_end":31},"name":"num_special_returns","qualname":"<Signature>::num_special_returns","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many special returns does this function have?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":215385,"byte_end":215409,"line_start":92,"line_end":92,"column_start":12,"column_end":36},"name":"uses_struct_return_param","qualname":"<Signature>::uses_struct_return_param","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this signature take an struct return pointer parameter?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":215602,"byte_end":215617,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"is_multi_return","qualname":"<Signature>::is_multi_return","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this return more than one normal value? (Pre-struct return\n legalization)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":215877,"byte_end":215893,"line_start":108,"line_end":108,"column_start":12,"column_end":28},"name":"DisplaySignature","qualname":"::ir::extfunc::DisplaySignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper type capable of displaying a `Signature` with correct register names.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5873},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217073,"byte_end":217081,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"AbiParam","qualname":"::ir::extfunc::AbiParam","value":"AbiParam { value_type, purpose, extension, location }","parent":null,"children":[{"krate":0,"index":5874},{"krate":0,"index":5875},{"krate":0,"index":5876},{"krate":0,"index":5877}],"decl_id":null,"docs":" Function parameter or return value descriptor.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5874},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217128,"byte_end":217138,"line_start":149,"line_end":149,"column_start":9,"column_end":19},"name":"value_type","qualname":"::ir::extfunc::AbiParam::value_type","value":"ir::types::Type","parent":{"krate":0,"index":5873},"children":[],"decl_id":null,"docs":" Type of the argument value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5875},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217204,"byte_end":217211,"line_start":151,"line_end":151,"column_start":9,"column_end":16},"name":"purpose","qualname":"::ir::extfunc::AbiParam::purpose","value":"ir::extfunc::ArgumentPurpose","parent":{"krate":0,"index":5873},"children":[],"decl_id":null,"docs":" Special purpose of argument, or `Normal`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5876},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217296,"byte_end":217305,"line_start":153,"line_end":153,"column_start":9,"column_end":18},"name":"extension","qualname":"::ir::extfunc::AbiParam::extension","value":"ir::extfunc::ArgumentExtension","parent":{"krate":0,"index":5873},"children":[],"decl_id":null,"docs":" Method for extending argument to a full register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5877},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217455,"byte_end":217463,"line_start":157,"line_end":157,"column_start":9,"column_end":17},"name":"location","qualname":"::ir::extfunc::AbiParam::location","value":"ir::valueloc::ArgumentLoc","parent":{"krate":0,"index":5873},"children":[],"decl_id":null,"docs":" ABI-specific location of this argument, or `Unassigned` for arguments that have not yet\n been legalized.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217555,"byte_end":217558,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<AbiParam>::new","value":"fn (vt: Type) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a parameter with default flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217877,"byte_end":217884,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"name":"special","qualname":"<AbiParam>::special","value":"fn (vt: Type, purpose: ArgumentPurpose) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a special-purpose parameter that is not (yet) bound to a specific register.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":218172,"byte_end":218183,"line_start":182,"line_end":182,"column_start":12,"column_end":23},"name":"special_reg","qualname":"<AbiParam>::special_reg","value":"fn (vt: Type, purpose: ArgumentPurpose, regunit: RegUnit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a parameter for a special-purpose register.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":218501,"byte_end":218505,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"uext","qualname":"<AbiParam>::uext","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a parameter with the `uext` flag set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":218785,"byte_end":218789,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"sext","qualname":"<AbiParam>::sext","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a parameter type with the `sext` flag set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":219078,"byte_end":219085,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"display","qualname":"<AbiParam>::display","value":"fn <'a, R> (&'a self, regs: R) -> DisplayAbiParam<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display `self` with correct register names.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":831},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":219308,"byte_end":219323,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"DisplayAbiParam","qualname":"::ir::extfunc::DisplayAbiParam","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper type capable of displaying a `AbiParam` with correct register names.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5894},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":220415,"byte_end":220419,"line_start":251,"line_end":251,"column_start":5,"column_end":9},"name":"None","qualname":"::ir::extfunc::ArgumentExtension::None","value":"ArgumentExtension::None","parent":{"krate":0,"index":5893},"children":[],"decl_id":null,"docs":" No extension, high bits are indeterminate.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5896},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":220482,"byte_end":220486,"line_start":253,"line_end":253,"column_start":5,"column_end":9},"name":"Uext","qualname":"::ir::extfunc::ArgumentExtension::Uext","value":"ArgumentExtension::Uext","parent":{"krate":0,"index":5893},"children":[],"decl_id":null,"docs":" Unsigned extension: high bits in register are 0.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5898},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":220560,"byte_end":220564,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Sext","qualname":"::ir::extfunc::ArgumentExtension::Sext","value":"ArgumentExtension::Sext","parent":{"krate":0,"index":5893},"children":[],"decl_id":null,"docs":" Signed extension: high bits in register replicate sign bit.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5893},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":220340,"byte_end":220357,"line_start":249,"line_end":249,"column_start":10,"column_end":27},"name":"ArgumentExtension","qualname":"::ir::extfunc::ArgumentExtension","value":"ArgumentExtension::{None, Uext, Sext}","parent":null,"children":[{"krate":0,"index":5894},{"krate":0,"index":5896},{"krate":0,"index":5898}],"decl_id":null,"docs":" Function argument extension options.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5915},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":221109,"byte_end":221115,"line_start":268,"line_end":268,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::extfunc::ArgumentPurpose::Normal","value":"ArgumentPurpose::Normal","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" A normal user program value passed to or from a function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5917},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":221610,"byte_end":221622,"line_start":278,"line_end":278,"column_start":5,"column_end":17},"name":"StructReturn","qualname":"::ir::extfunc::ArgumentPurpose::StructReturn","value":"ArgumentPurpose::StructReturn","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" Struct return pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5919},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":221993,"byte_end":221997,"line_start":287,"line_end":287,"column_start":5,"column_end":9},"name":"Link","qualname":"::ir::extfunc::ArgumentPurpose::Link","value":"ArgumentPurpose::Link","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" The link register.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5921},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":222255,"byte_end":222267,"line_start":295,"line_end":295,"column_start":5,"column_end":17},"name":"FramePointer","qualname":"::ir::extfunc::ArgumentPurpose::FramePointer","value":"ArgumentPurpose::FramePointer","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" The frame pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5923},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":222483,"byte_end":222494,"line_start":301,"line_end":301,"column_start":5,"column_end":16},"name":"CalleeSaved","qualname":"::ir::extfunc::ArgumentPurpose::CalleeSaved","value":"ArgumentPurpose::CalleeSaved","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" A callee-saved register.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5925},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":222695,"byte_end":222704,"line_start":307,"line_end":307,"column_start":5,"column_end":14},"name":"VMContext","qualname":"::ir::extfunc::ArgumentPurpose::VMContext","value":"ArgumentPurpose::VMContext","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" A VM context pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5927},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":222948,"byte_end":222959,"line_start":313,"line_end":313,"column_start":5,"column_end":16},"name":"SignatureId","qualname":"::ir::extfunc::ArgumentPurpose::SignatureId","value":"ArgumentPurpose::SignatureId","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" A signature identifier.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5929},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":223149,"byte_end":223159,"line_start":319,"line_end":319,"column_start":5,"column_end":15},"name":"StackLimit","qualname":"::ir::extfunc::ArgumentPurpose::StackLimit","value":"ArgumentPurpose::StackLimit","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" A stack limit pointer.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5914},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":221021,"byte_end":221036,"line_start":266,"line_end":266,"column_start":10,"column_end":25},"name":"ArgumentPurpose","qualname":"::ir::extfunc::ArgumentPurpose","value":"ArgumentPurpose::{Normal, StructReturn, Link, FramePointer, CalleeSaved, VMContext, SignatureId, StackLimit}","parent":null,"children":[{"krate":0,"index":5915},{"krate":0,"index":5917},{"krate":0,"index":5919},{"krate":0,"index":5921},{"krate":0,"index":5923},{"krate":0,"index":5925},{"krate":0,"index":5927},{"krate":0,"index":5929}],"decl_id":null,"docs":" The special purpose of a function argument.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5945},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":224203,"byte_end":224214,"line_start":361,"line_end":361,"column_start":12,"column_end":23},"name":"ExtFuncData","qualname":"::ir::extfunc::ExtFuncData","value":"ExtFuncData { name, signature, colocated }","parent":null,"children":[{"krate":0,"index":5946},{"krate":0,"index":5947},{"krate":0,"index":5948}],"decl_id":null,"docs":" An external function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5946},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":224264,"byte_end":224268,"line_start":363,"line_end":363,"column_start":9,"column_end":13},"name":"name","qualname":"::ir::extfunc::ExtFuncData::name","value":"ir::extname::ExternalName","parent":{"krate":0,"index":5945},"children":[],"decl_id":null,"docs":" Name of the external function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5947},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":224328,"byte_end":224337,"line_start":365,"line_end":365,"column_start":9,"column_end":18},"name":"signature","qualname":"::ir::extfunc::ExtFuncData::signature","value":"ir::entities::SigRef","parent":{"krate":0,"index":5945},"children":[],"decl_id":null,"docs":" Call signature of function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5948},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":224621,"byte_end":224630,"line_start":369,"line_end":369,"column_start":9,"column_end":18},"name":"colocated","qualname":"::ir::extfunc::ExtFuncData::colocated","value":"bool","parent":{"krate":0,"index":5945},"children":[],"decl_id":null,"docs":" Will this function be defined nearby, such that it will always be a certain distance away,\n after linking? If so, references to it can avoid going through a GOT or PLT. Note that\n symbols meant to be preemptible cannot be considered colocated.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":5954},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":228366,"byte_end":228370,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"User","qualname":"::ir::extname::ExternalName::User","value":"ExternalName::User { namespace, index }","parent":{"krate":0,"index":5953},"children":[],"decl_id":null,"docs":" A name in a user-defined symbol table. Cranelift does not interpret\n these numbers in any way.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":5957},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":228598,"byte_end":228606,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"TestCase","qualname":"::ir::extname::ExternalName::TestCase","value":"ExternalName::TestCase { length, ascii }","parent":{"krate":0,"index":5953},"children":[],"decl_id":null,"docs":" A test case function name of up to 10 ascii characters. This is\n not intended to be used outside test cases.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5961},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":228823,"byte_end":228830,"line_start":44,"line_end":44,"column_start":5,"column_end":12},"name":"LibCall","qualname":"::ir::extname::ExternalName::LibCall","value":"ExternalName::LibCall(LibCall)","parent":{"krate":0,"index":5953},"children":[],"decl_id":null,"docs":" A well-known runtime library function.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5953},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":228237,"byte_end":228249,"line_start":26,"line_end":26,"column_start":10,"column_end":22},"name":"ExternalName","qualname":"::ir::extname::ExternalName","value":"ExternalName::{User, TestCase, LibCall}","parent":null,"children":[{"krate":0,"index":5954},{"krate":0,"index":5957},{"krate":0,"index":5961}],"decl_id":null,"docs":" The name of an external is either a reference to a user-defined symbol\n table, or a short sequence of ascii bytes so that test cases do not have\n to keep track of a symbol table.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":229281,"byte_end":229289,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"testcase","qualname":"<ExternalName>::testcase","value":"fn <T> (v: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new external name from a sequence of bytes. Caller is expected\n to guarantee bytes are only ascii alphanumeric or `_`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":229960,"byte_end":229964,"line_start":80,"line_end":80,"column_start":12,"column_end":16},"name":"user","qualname":"<ExternalName>::user","value":"fn (namespace: u32, index: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new external name from user-provided integer indices.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":5977},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":232641,"byte_end":232659,"line_start":13,"line_end":13,"column_start":5,"column_end":23},"name":"CallFrameAddressAt","qualname":"::ir::framelayout::FrameLayoutChange::CallFrameAddressAt","value":"FrameLayoutChange::CallFrameAddressAt { reg, offset }","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":" Base CallFrameAddress (CFA) pointer moved to different register/offset.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":5980},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":232795,"byte_end":232800,"line_start":20,"line_end":20,"column_start":5,"column_end":10},"name":"RegAt","qualname":"::ir::framelayout::FrameLayoutChange::RegAt","value":"FrameLayoutChange::RegAt { reg, cfa_offset }","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":" Register saved at.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":5983},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":232975,"byte_end":232990,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"ReturnAddressAt","qualname":"::ir::framelayout::FrameLayoutChange::ReturnAddressAt","value":"FrameLayoutChange::ReturnAddressAt { cfa_offset }","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":" Return address saved at.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5985},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233294,"byte_end":233302,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"Preserve","qualname":"::ir::framelayout::FrameLayoutChange::Preserve","value":"FrameLayoutChange::Preserve","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":" The entire frame layout must be preserved somewhere to be restored at a corresponding\n `Restore` change.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5987},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233491,"byte_end":233498,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"Restore","qualname":"::ir::framelayout::FrameLayoutChange::Restore","value":"FrameLayoutChange::Restore","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":" Restore the entire frame layout from a corresponding prior `Preserve` frame change.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5976},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":232537,"byte_end":232554,"line_start":11,"line_end":11,"column_start":10,"column_end":27},"name":"FrameLayoutChange","qualname":"::ir::framelayout::FrameLayoutChange","value":"FrameLayoutChange::{CallFrameAddressAt, RegAt, ReturnAddressAt, Preserve, Restore}","parent":null,"children":[{"krate":0,"index":5977},{"krate":0,"index":5980},{"krate":0,"index":5983},{"krate":0,"index":5985},{"krate":0,"index":5987}],"decl_id":null,"docs":" Change in the frame layout information.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":875},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233545,"byte_end":233563,"line_start":43,"line_end":43,"column_start":10,"column_end":28},"name":"FrameLayoutChanges","qualname":"::ir::framelayout::FrameLayoutChanges","value":"Box<[FrameLayoutChange]>","parent":null,"children":[],"decl_id":null,"docs":" Set of frame layout changes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6004},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233689,"byte_end":233700,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"FrameLayout","qualname":"::ir::framelayout::FrameLayout","value":"FrameLayout { initial, instructions }","parent":null,"children":[{"krate":0,"index":6005},{"krate":0,"index":6006}],"decl_id":null,"docs":" Frame items layout for (prologue/epilogue) instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6005},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233741,"byte_end":233748,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"name":"initial","qualname":"::ir::framelayout::FrameLayout::initial","value":"alloc::boxed::Box<[ir::framelayout::FrameLayoutChange]>","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" Initial frame layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6006},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233911,"byte_end":233923,"line_start":53,"line_end":53,"column_start":9,"column_end":21},"name":"instructions","qualname":"::ir::framelayout::FrameLayout::instructions","value":"std::collections::HashMap<ir::entities::Inst, alloc::boxed::Box<[ir::framelayout::FrameLayoutChange]>>","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" Instruction frame layout (changes). Because the map will not be dense,\n a HashMap is used instead of a SecondaryMap.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":234033,"byte_end":234036,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<FrameLayout>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create instance of FrameLayout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":234218,"byte_end":234223,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"clear","qualname":"<FrameLayout>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the structure.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":879},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"function","qualname":"::ir::function","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":890},{"krate":0,"index":906},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":6011},{"krate":0,"index":6030},{"krate":0,"index":929},{"krate":0,"index":6032},{"krate":0,"index":6036},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":980}],"decl_id":null,"docs":" Intermediate representation of a function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6011},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235439,"byte_end":235447,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"Function","qualname":"::ir::function::Function","value":"Function { name, signature, old_signature, stack_slots, global_values, heaps, tables, jump_tables, dfg, layout, encodings, locations, entry_diversions, offsets, jt_offsets, srclocs, prologue_end, frame_layout }","parent":null,"children":[{"krate":0,"index":6012},{"krate":0,"index":6013},{"krate":0,"index":6014},{"krate":0,"index":6015},{"krate":0,"index":6016},{"krate":0,"index":6017},{"krate":0,"index":6018},{"krate":0,"index":6019},{"krate":0,"index":6020},{"krate":0,"index":6021},{"krate":0,"index":6022},{"krate":0,"index":6023},{"krate":0,"index":6024},{"krate":0,"index":6025},{"krate":0,"index":6026},{"krate":0,"index":6027},{"krate":0,"index":6028},{"krate":0,"index":6029}],"decl_id":null,"docs":" A function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6012},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235519,"byte_end":235523,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"name","qualname":"::ir::function::Function::name","value":"ir::extname::ExternalName","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Name of this function. Mostly used by `.clif` files.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6013},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235584,"byte_end":235593,"line_start":35,"line_end":35,"column_start":9,"column_end":18},"name":"signature","qualname":"::ir::function::Function::signature","value":"ir::extfunc::Signature","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Signature of this function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6014},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235712,"byte_end":235725,"line_start":39,"line_end":39,"column_start":9,"column_end":22},"name":"old_signature","qualname":"::ir::function::Function::old_signature","value":"core::option::Option<ir::extfunc::Signature>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" The old signature of this function, before the most recent legalization,\n if any.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6015},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235803,"byte_end":235814,"line_start":42,"line_end":42,"column_start":9,"column_end":20},"name":"stack_slots","qualname":"::ir::function::Function::stack_slots","value":"ir::stackslot::StackSlots","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Stack slots allocated in this function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6016},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235871,"byte_end":235884,"line_start":45,"line_end":45,"column_start":9,"column_end":22},"name":"global_values","qualname":"::ir::function::Function::global_values","value":"cranelift_entity::primary::PrimaryMap<ir::entities::GlobalValue, ir::globalvalue::GlobalValueData>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Global values referenced.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6017},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":235971,"byte_end":235976,"line_start":48,"line_end":48,"column_start":9,"column_end":14},"name":"heaps","qualname":"::ir::function::Function::heaps","value":"cranelift_entity::primary::PrimaryMap<ir::entities::Heap, ir::heap::HeapData>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Heaps referenced.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6018},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236050,"byte_end":236056,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"name":"tables","qualname":"::ir::function::Function::tables","value":"cranelift_entity::primary::PrimaryMap<ir::entities::Table, ir::table::TableData>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Tables referenced.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6019},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236148,"byte_end":236159,"line_start":54,"line_end":54,"column_start":9,"column_end":20},"name":"jump_tables","qualname":"::ir::function::Function::jump_tables","value":"cranelift_entity::primary::PrimaryMap<ir::entities::JumpTable, ir::jumptable::JumpTableData>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Jump tables used in this function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6020},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236278,"byte_end":236281,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"name":"dfg","qualname":"::ir::function::Function::dfg","value":"ir::dfg::DataFlowGraph","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Data flow graph containing the primary definition of all instructions, EBBs and values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6021},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236369,"byte_end":236375,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"name":"layout","qualname":"::ir::function::Function::layout","value":"ir::layout::Layout","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Layout of EBBs and instructions in the function body.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6022},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236522,"byte_end":236531,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"encodings","qualname":"::ir::function::Function::encodings","value":"cranelift_entity::map::SecondaryMap<ir::entities::Inst, isa::encoding::Encoding>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Encoding recipe and bits for the legal instructions.\n Illegal instructions have the `Encoding::default()` value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6023},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236599,"byte_end":236608,"line_start":67,"line_end":67,"column_start":9,"column_end":18},"name":"locations","qualname":"::ir::function::Function::locations","value":"cranelift_entity::map::SecondaryMap<ir::entities::Value, ir::valueloc::ValueLoc>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Location assigned to every value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6024},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":236905,"byte_end":236921,"line_start":73,"line_end":73,"column_start":9,"column_end":25},"name":"entry_diversions","qualname":"::ir::function::Function::entry_diversions","value":"regalloc::diversion::EntryRegDiversions","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Non-default locations assigned to value at the entry of basic blocks.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6025},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":237233,"byte_end":237240,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"name":"offsets","qualname":"::ir::function::Function::offsets","value":"cranelift_entity::map::SecondaryMap<ir::entities::Ebb, u32>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Code offsets of the EBB headers.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6026},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":237307,"byte_end":237317,"line_start":83,"line_end":83,"column_start":9,"column_end":19},"name":"jt_offsets","qualname":"::ir::function::Function::jt_offsets","value":"cranelift_entity::map::SecondaryMap<ir::entities::JumpTable, u32>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Code offsets of Jump Table headers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6027},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":237524,"byte_end":237531,"line_start":89,"line_end":89,"column_start":9,"column_end":16},"name":"srclocs","qualname":"::ir::function::Function::srclocs","value":"cranelift_entity::map::SecondaryMap<ir::entities::Inst, ir::sourceloc::SourceLoc>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Source locations.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6028},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":237731,"byte_end":237743,"line_start":94,"line_end":94,"column_start":9,"column_end":21},"name":"prologue_end","qualname":"::ir::function::Function::prologue_end","value":"core::option::Option<ir::entities::Inst>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Instruction that marks the end (inclusive) of the function's prologue.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6029},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":238022,"byte_end":238034,"line_start":101,"line_end":101,"column_start":9,"column_end":21},"name":"frame_layout","qualname":"::ir::function::Function::frame_layout","value":"core::option::Option<ir::framelayout::FrameLayout>","parent":{"krate":0,"index":6011},"children":[],"decl_id":null,"docs":" Frame layout for the instructions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":238148,"byte_end":238167,"line_start":106,"line_end":106,"column_start":12,"column_end":31},"name":"with_name_signature","qualname":"<Function>::with_name_signature","value":"fn (name: ExternalName, sig: Signature) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a function with the given name and signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":239011,"byte_end":239016,"line_start":130,"line_end":130,"column_start":12,"column_end":17},"name":"clear","qualname":"<Function>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":239653,"byte_end":239656,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"new","qualname":"<Function>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty, anonymous function with a Fast calling convention.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":239863,"byte_end":239880,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"create_jump_table","qualname":"<Function>::create_jump_table","value":"fn (&mut self, data: JumpTableData) -> JumpTable","parent":null,"children":[],"decl_id":null,"docs":" Creates a jump table in the function, to be used by `br_table` instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":240109,"byte_end":240126,"line_start":161,"line_end":161,"column_start":12,"column_end":29},"name":"create_stack_slot","qualname":"<Function>::create_stack_slot","value":"fn (&mut self, data: StackSlotData) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Creates a stack slot in the function, to be used by `stack_load`, `stack_store` and\n `stack_addr` instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":240317,"byte_end":240333,"line_start":166,"line_end":166,"column_start":12,"column_end":28},"name":"import_signature","qualname":"<Function>::import_signature","value":"fn (&mut self, signature: Signature) -> SigRef","parent":null,"children":[],"decl_id":null,"docs":" Adds a signature which can later be used to declare an external function import.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":240486,"byte_end":240501,"line_start":171,"line_end":171,"column_start":12,"column_end":27},"name":"import_function","qualname":"<Function>::import_function","value":"fn (&mut self, data: ExtFuncData) -> FuncRef","parent":null,"children":[],"decl_id":null,"docs":" Declare an external function import.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":240661,"byte_end":240680,"line_start":176,"line_end":176,"column_start":12,"column_end":31},"name":"create_global_value","qualname":"<Function>::create_global_value","value":"fn (&mut self, data: GlobalValueData) -> GlobalValue","parent":null,"children":[],"decl_id":null,"docs":" Declares a global value accessible to the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":240840,"byte_end":240851,"line_start":181,"line_end":181,"column_start":12,"column_end":23},"name":"create_heap","qualname":"<Function>::create_heap","value":"fn (&mut self, data: HeapData) -> Heap","parent":null,"children":[],"decl_id":null,"docs":" Declares a heap accessible to the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":240990,"byte_end":241002,"line_start":186,"line_end":186,"column_start":12,"column_end":24},"name":"create_table","qualname":"<Function>::create_table","value":"fn (&mut self, data: TableData) -> Table","parent":null,"children":[],"decl_id":null,"docs":" Declares a table accessible to the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":241186,"byte_end":241193,"line_start":191,"line_end":191,"column_start":12,"column_end":19},"name":"display","qualname":"<Function>::display","value":"fn <'a, I> (&'a self, isa: I) -> DisplayFunction<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this function with correct ISA-specific annotations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":241462,"byte_end":241474,"line_start":199,"line_end":199,"column_start":12,"column_end":24},"name":"display_with","qualname":"<Function>::display_with","value":"fn <'a> (&'a self, annotations: DisplayFunctionAnnotations<'a>) -> DisplayFunction<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this function with correct ISA-specific annotations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":241822,"byte_end":241835,"line_start":209,"line_end":209,"column_start":12,"column_end":25},"name":"special_param","qualname":"<Function>::special_param","value":"fn (&self, purpose: ir::ArgumentPurpose) -> Option<ir::Value>","parent":null,"children":[],"decl_id":null,"docs":" Find a presumed unique special-purpose function parameter value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":242621,"byte_end":242633,"line_start":225,"line_end":225,"column_start":12,"column_end":24},"name":"inst_offsets","qualname":"<Function>::inst_offsets","value":"fn <'a> (&'a self, ebb: Ebb, encinfo: &EncInfo) -> InstOffsetIter<'a>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the instructions in `ebb`, including offsets and encoded instruction\n sizes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":243252,"byte_end":243267,"line_start":243,"line_end":243,"column_start":12,"column_end":27},"name":"update_encoding","qualname":"<Function>::update_encoding","value":"fn (&mut self, inst: ir::Inst, isa: &dyn TargetIsa) -> Result<(), Legalize>","parent":null,"children":[],"decl_id":null,"docs":" Wrapper around `encode` which assigns `inst` the resulting encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":243532,"byte_end":243538,"line_start":249,"line_end":249,"column_start":12,"column_end":18},"name":"encode","qualname":"<Function>::encode","value":"fn (&self, inst: ir::Inst, isa: &dyn TargetIsa) -> Result<Encoding, Legalize>","parent":null,"children":[],"decl_id":null,"docs":" Wrapper around `TargetIsa::encode` for encoding an existing instruction\n in the `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":243753,"byte_end":243771,"line_start":254,"line_end":254,"column_start":12,"column_end":30},"name":"collect_debug_info","qualname":"<Function>::collect_debug_info","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Starts collection of debug information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":244035,"byte_end":244060,"line_start":261,"line_end":261,"column_start":12,"column_end":37},"name":"change_branch_destination","qualname":"<Function>::change_branch_destination","value":"fn (&mut self, inst: Inst, new_dest: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Changes the destination of a jump or branch instruction.\n Does nothing if called with a non-jump or non-branch instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":244457,"byte_end":244469,"line_start":272,"line_end":272,"column_start":12,"column_end":24},"name":"is_ebb_basic","qualname":"<Function>::is_ebb_basic","value":"fn (&self, ebb: Ebb) -> Result<(), (Inst, &'static str)>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the specified EBB can be encoded as a basic block.","sig":null,"attributes":[{"value":"cfg(feature = \"basic-blocks\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":244413,"byte_end":244445,"line_start":271,"line_end":271,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":245448,"byte_end":245455,"line_start":295,"line_end":295,"column_start":12,"column_end":19},"name":"is_leaf","qualname":"<Function>::is_leaf","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the function is function that doesn't call any other functions. This is not\n to be confused with a \"leaf function\" in Windows terminology.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6032},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":245736,"byte_end":245762,"line_start":304,"line_end":304,"column_start":12,"column_end":38},"name":"DisplayFunctionAnnotations","qualname":"::ir::function::DisplayFunctionAnnotations","value":"DisplayFunctionAnnotations { isa, value_ranges }","parent":null,"children":[{"krate":0,"index":6034},{"krate":0,"index":6035}],"decl_id":null,"docs":" Additional annotations for function display.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6034},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":245809,"byte_end":245812,"line_start":306,"line_end":306,"column_start":9,"column_end":12},"name":"isa","qualname":"::ir::function::DisplayFunctionAnnotations::isa","value":"core::option::Option<&'a (dyn isa::TargetIsa + 'a)>","parent":{"krate":0,"index":6032},"children":[],"decl_id":null,"docs":" Enable ISA annotations.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6035},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":245891,"byte_end":245903,"line_start":309,"line_end":309,"column_start":9,"column_end":21},"name":"value_ranges","qualname":"::ir::function::DisplayFunctionAnnotations::value_ranges","value":"core::option::Option<&'a std::collections::HashMap<ir::ValueLabel, alloc::vec::Vec<value_label::ValueLocRange>>>","parent":{"krate":0,"index":6032},"children":[],"decl_id":null,"docs":" Enable value labels annotations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246291,"byte_end":246306,"line_start":322,"line_end":322,"column_start":12,"column_end":27},"name":"DisplayFunction","qualname":"::ir::function::DisplayFunction","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper type capable of displaying a `Function` with correct ISA annotations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":972},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246963,"byte_end":246977,"line_start":343,"line_end":343,"column_start":12,"column_end":26},"name":"InstOffsetIter","qualname":"::ir::function::InstOffsetIter","value":"InstOffsetIter {  }","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979}],"decl_id":null,"docs":" Iterator returning instruction offsets and sizes: `(offset, inst, size)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6040},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":247973,"byte_end":247982,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"VMContext","qualname":"::ir::globalvalue::GlobalValueData::VMContext","value":"GlobalValueData::VMContext","parent":{"krate":0,"index":6039},"children":[],"decl_id":null,"docs":" Value is the address of the VM context struct.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6042},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":248390,"byte_end":248394,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::globalvalue::GlobalValueData::Load","value":"GlobalValueData::Load { base, offset, global_type, readonly }","parent":{"krate":0,"index":6039},"children":[],"decl_id":null,"docs":" Value is pointed to by another global value.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6047},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":248854,"byte_end":248861,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"IAddImm","qualname":"::ir::globalvalue::GlobalValueData::IAddImm","value":"GlobalValueData::IAddImm { base, offset, global_type }","parent":{"krate":0,"index":6039},"children":[],"decl_id":null,"docs":" Value is an offset from another global value.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6051},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":249497,"byte_end":249503,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::ir::globalvalue::GlobalValueData::Symbol","value":"GlobalValueData::Symbol { name, offset, colocated }","parent":{"krate":0,"index":6039},"children":[],"decl_id":null,"docs":" Value is symbolic, meaning it's a name which will be resolved to an\n actual value later (eg. by linking). Cranelift itself does not interpret\n this name; it's used by embedders to link with other data structures.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6039},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":247896,"byte_end":247911,"line_start":10,"line_end":10,"column_start":10,"column_end":25},"name":"GlobalValueData","qualname":"::ir::globalvalue::GlobalValueData","value":"GlobalValueData::{VMContext, Load, IAddImm, Symbol}","parent":null,"children":[{"krate":0,"index":6040},{"krate":0,"index":6042},{"krate":0,"index":6047},{"krate":0,"index":6051}],"decl_id":null,"docs":" Information about a global value declaration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":250127,"byte_end":250138,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"symbol_name","qualname":"<GlobalValueData>::symbol_name","value":"fn (&self) -> &ExternalName","parent":null,"children":[],"decl_id":null,"docs":" Assume that `self` is an `GlobalValueData::Symbol` and return its name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":250358,"byte_end":250369,"line_start":79,"line_end":79,"column_start":12,"column_end":23},"name":"global_type","qualname":"<GlobalValueData>::global_type","value":"fn (&self, isa: &dyn TargetIsa) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this global.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6057},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252124,"byte_end":252132,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"HeapData","qualname":"::ir::heap::HeapData","value":"HeapData { base, min_size, offset_guard_size, style, index_type }","parent":null,"children":[{"krate":0,"index":6058},{"krate":0,"index":6059},{"krate":0,"index":6060},{"krate":0,"index":6061},{"krate":0,"index":6062}],"decl_id":null,"docs":" Information about a heap declaration.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6058},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252199,"byte_end":252203,"line_start":11,"line_end":11,"column_start":9,"column_end":13},"name":"base","qualname":"::ir::heap::HeapData::base","value":"ir::entities::GlobalValue","parent":{"krate":0,"index":6057},"children":[],"decl_id":null,"docs":" The address of the start of the heap's storage.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6059},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252342,"byte_end":252350,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"name":"min_size","qualname":"::ir::heap::HeapData::min_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":6057},"children":[],"decl_id":null,"docs":" Guaranteed minimum heap size in bytes. Heap accesses before `min_size` don't need bounds\n checking.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6060},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252437,"byte_end":252454,"line_start":18,"line_end":18,"column_start":9,"column_end":26},"name":"offset_guard_size","qualname":"::ir::heap::HeapData::offset_guard_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":6057},"children":[],"decl_id":null,"docs":" Size in bytes of the offset-guard pages following the heap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6061},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252530,"byte_end":252535,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"style","qualname":"::ir::heap::HeapData::style","value":"ir::heap::HeapStyle","parent":{"krate":0,"index":6057},"children":[],"decl_id":null,"docs":" Heap style, with additional style-specific info.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6062},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252594,"byte_end":252604,"line_start":24,"line_end":24,"column_start":9,"column_end":19},"name":"index_type","qualname":"::ir::heap::HeapData::index_type","value":"ir::types::Type","parent":{"krate":0,"index":6057},"children":[],"decl_id":null,"docs":" The index type for the heap.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6066},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252799,"byte_end":252806,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::ir::heap::HeapStyle::Dynamic","value":"HeapStyle::Dynamic { bound_gv }","parent":{"krate":0,"index":6065},"children":[],"decl_id":null,"docs":" A dynamic heap can be relocated to a different base address when it is grown.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6068},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":253053,"byte_end":253059,"line_start":38,"line_end":38,"column_start":5,"column_end":11},"name":"Static","qualname":"::ir::heap::HeapStyle::Static","value":"HeapStyle::Static { bound }","parent":{"krate":0,"index":6065},"children":[],"decl_id":null,"docs":" A static heap has a fixed base address and a number of not-yet-allocated pages before the\n offset-guard pages.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6065},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":252697,"byte_end":252706,"line_start":29,"line_end":29,"column_start":10,"column_end":19},"name":"HeapStyle","qualname":"::ir::heap::HeapStyle","value":"HeapStyle::{Dynamic, Static}","parent":null,"children":[{"krate":0,"index":6066},{"krate":0,"index":6068}],"decl_id":null,"docs":" Style of heap including style-specific information.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"immediates","qualname":"::ir::immediates","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":6072},{"krate":0,"index":6089},{"krate":0,"index":6087},{"krate":0,"index":6083},{"krate":0,"index":6084},{"krate":0,"index":6080},{"krate":0,"index":6081},{"krate":0,"index":6078},{"krate":0,"index":6075},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1033},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":6090},{"krate":0,"index":6107},{"krate":0,"index":6105},{"krate":0,"index":6101},{"krate":0,"index":6102},{"krate":0,"index":6098},{"krate":0,"index":6099},{"krate":0,"index":6096},{"krate":0,"index":6093},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":6108},{"krate":0,"index":6125},{"krate":0,"index":6123},{"krate":0,"index":6119},{"krate":0,"index":6120},{"krate":0,"index":6116},{"krate":0,"index":6117},{"krate":0,"index":6114},{"krate":0,"index":6111},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":6126},{"krate":0,"index":6146},{"krate":0,"index":6143},{"krate":0,"index":6139},{"krate":0,"index":6140},{"krate":0,"index":6135},{"krate":0,"index":6136},{"krate":0,"index":6133},{"krate":0,"index":6130},{"krate":0,"index":1070},{"krate":0,"index":1075},{"krate":0,"index":6147},{"krate":0,"index":6164},{"krate":0,"index":6162},{"krate":0,"index":6158},{"krate":0,"index":6159},{"krate":0,"index":6155},{"krate":0,"index":6156},{"krate":0,"index":6153},{"krate":0,"index":6150},{"krate":0,"index":1078},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":6165},{"krate":0,"index":6182},{"krate":0,"index":6180},{"krate":0,"index":6178},{"krate":0,"index":6175},{"krate":0,"index":6176},{"krate":0,"index":6171},{"krate":0,"index":6172},{"krate":0,"index":6168},{"krate":0,"index":6183},{"krate":0,"index":6200},{"krate":0,"index":6198},{"krate":0,"index":6196},{"krate":0,"index":6193},{"krate":0,"index":6194},{"krate":0,"index":6189},{"krate":0,"index":6190},{"krate":0,"index":6186},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132}],"decl_id":null,"docs":" Immediate operands for Cranelift instructions","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1018},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":254416,"byte_end":254425,"line_start":14,"line_end":14,"column_start":11,"column_end":20},"name":"IntoBytes","qualname":"::ir::immediates::IntoBytes","value":"IntoBytes","parent":null,"children":[{"krate":0,"index":1019}],"decl_id":null,"docs":" Convert a type into a vector of bytes; all implementors in this file must use little-endian\n orderings of bytes to match WebAssembly's little-endianness.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":254514,"byte_end":254524,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"into_bytes","qualname":"::ir::immediates::IntoBytes::into_bytes","value":"fn (self) -> Vec<u8>","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Return the little-endian byte representation of the implementing type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6072},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255175,"byte_end":255180,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"Imm64","qualname":"::ir::immediates::Imm64","value":"","parent":null,"children":[],"decl_id":null,"docs":" 64-bit immediate signed integer operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255277,"byte_end":255280,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Imm64>::new","value":"fn (x: i64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Imm64` representing the signed number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255362,"byte_end":255374,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"wrapping_neg","qualname":"<Imm64>::wrapping_neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6090},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257041,"byte_end":257047,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"Uimm64","qualname":"::ir::immediates::Uimm64","value":"","parent":null,"children":[],"decl_id":null,"docs":" 64-bit immediate unsigned integer operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257148,"byte_end":257151,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Uimm64>::new","value":"fn (x: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uimm64` representing the unsigned number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257233,"byte_end":257245,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"wrapping_neg","qualname":"<Uimm64>::wrapping_neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260442,"byte_end":260447,"line_start":253,"line_end":253,"column_start":10,"column_end":15},"name":"Uimm8","qualname":"::ir::immediates::Uimm8","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" 8-bit unsigned integer immediate operand.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6108},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260625,"byte_end":260631,"line_start":259,"line_end":259,"column_start":12,"column_end":18},"name":"Uimm32","qualname":"::ir::immediates::Uimm32","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 32-bit unsigned integer immediate operand.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6126},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261678,"byte_end":261685,"line_start":308,"line_end":308,"column_start":12,"column_end":19},"name":"V128Imm","qualname":"::ir::immediates::V128Imm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 128-bit immediate operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261776,"byte_end":261781,"line_start":312,"line_end":312,"column_start":12,"column_end":17},"name":"bytes","qualname":"<V128Imm>::bytes","value":"fn (&self) -> impl Iterator<Item = &u8>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the bytes in the constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261905,"byte_end":261911,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<V128Imm>::to_vec","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Convert the immediate into a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262017,"byte_end":262025,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<V128Imm>::as_slice","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Convert the immediate into a slice.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6147},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262537,"byte_end":262545,"line_start":341,"line_end":341,"column_start":12,"column_end":20},"name":"Offset32","qualname":"::ir::immediates::Offset32","value":"","parent":null,"children":[],"decl_id":null,"docs":" 32-bit signed immediate offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262648,"byte_end":262651,"line_start":345,"line_end":345,"column_start":12,"column_end":15},"name":"new","qualname":"<Offset32>::new","value":"fn (x: i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Offset32` representing the signed number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262784,"byte_end":262796,"line_start":350,"line_end":350,"column_start":12,"column_end":24},"name":"try_from_i64","qualname":"<Offset32>::try_from_i64","value":"fn (x: i64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Offset32` representing the signed number `x` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263034,"byte_end":263045,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"name":"try_add_i64","qualname":"<Offset32>::try_add_i64","value":"fn (self, x: i64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Add in the signed number `x` if possible.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6165},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":264722,"byte_end":264728,"line_start":430,"line_end":430,"column_start":12,"column_end":18},"name":"Ieee32","qualname":"::ir::immediates::Ieee32","value":"","parent":null,"children":[],"decl_id":null,"docs":" An IEEE binary32 immediate floating point value, represented as a u32\n containing the bit pattern.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6183},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":264942,"byte_end":264948,"line_start":437,"line_end":437,"column_start":12,"column_end":18},"name":"Ieee64","qualname":"::ir::immediates::Ieee64","value":"","parent":null,"children":[],"decl_id":null,"docs":" An IEEE binary64 immediate floating point value, represented as a u64\n containing the bit pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":272840,"byte_end":272849,"line_start":678,"line_end":678,"column_start":12,"column_end":21},"name":"with_bits","qualname":"<Ieee32>::with_bits","value":"fn (x: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee32` containing the bits of `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":272958,"byte_end":272962,"line_start":683,"line_end":683,"column_start":12,"column_end":16},"name":"pow2","qualname":"<Ieee32>::pow2","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee32` number representing `2.0^n`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":273441,"byte_end":273471,"line_start":696,"line_end":696,"column_start":12,"column_end":42},"name":"fcvt_to_sint_negative_overflow","qualname":"<Ieee32>::fcvt_to_sint_negative_overflow","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee32` number representing the greatest negative value\n not convertable from f32 to a signed integer with width n.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":273737,"byte_end":273740,"line_start":704,"line_end":704,"column_start":12,"column_end":15},"name":"neg","qualname":"<Ieee32>::neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":273867,"byte_end":273877,"line_start":709,"line_end":709,"column_start":12,"column_end":22},"name":"with_float","qualname":"<Ieee32>::with_float","value":"fn (x: f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee32` representing the number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":273980,"byte_end":273984,"line_start":714,"line_end":714,"column_start":12,"column_end":16},"name":"bits","qualname":"<Ieee32>::bits","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the bitwise representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274724,"byte_end":274733,"line_start":751,"line_end":751,"column_start":12,"column_end":21},"name":"with_bits","qualname":"<Ieee64>::with_bits","value":"fn (x: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee64` containing the bits of `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274842,"byte_end":274846,"line_start":756,"line_end":756,"column_start":12,"column_end":16},"name":"pow2","qualname":"<Ieee64>::pow2","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee64` number representing `2.0^n`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":275326,"byte_end":275356,"line_start":769,"line_end":769,"column_start":12,"column_end":42},"name":"fcvt_to_sint_negative_overflow","qualname":"<Ieee64>::fcvt_to_sint_negative_overflow","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee64` number representing the greatest negative value\n not convertable from f64 to a signed integer with width n.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":275622,"byte_end":275625,"line_start":777,"line_end":777,"column_start":12,"column_end":15},"name":"neg","qualname":"<Ieee64>::neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":275752,"byte_end":275762,"line_start":782,"line_end":782,"column_start":12,"column_end":22},"name":"with_float","qualname":"<Ieee64>::with_float","value":"fn (x: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee64` representing the number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":275865,"byte_end":275869,"line_start":787,"line_end":787,"column_start":12,"column_end":16},"name":"bits","qualname":"<Ieee64>::bits","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the bitwise representation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1134},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"instructions","qualname":"::ir::instructions","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","parent":null,"children":[{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":6239},{"krate":0,"index":6350},{"krate":0,"index":6348},{"krate":0,"index":6345},{"krate":0,"index":6346},{"krate":0,"index":6342},{"krate":0,"index":6343},{"krate":0,"index":6340},{"krate":0,"index":6201},{"krate":0,"index":6351},{"krate":0,"index":6565},{"krate":0,"index":6563},{"krate":0,"index":6204},{"krate":0,"index":6567},{"krate":0,"index":7014},{"krate":0,"index":7012},{"krate":0,"index":7009},{"krate":0,"index":7010},{"krate":0,"index":7006},{"krate":0,"index":7007},{"krate":0,"index":7004},{"krate":0,"index":7001},{"krate":0,"index":6216},{"krate":0,"index":6228},{"krate":0,"index":6230},{"krate":0,"index":6231},{"krate":0,"index":6233},{"krate":0,"index":6235},{"krate":0,"index":6237},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":7015},{"krate":0,"index":7020},{"krate":0,"index":7018},{"krate":0,"index":1174},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1195},{"krate":0,"index":1207},{"krate":0,"index":7022},{"krate":0,"index":7027},{"krate":0,"index":7026},{"krate":0,"index":1219},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":7029},{"krate":0,"index":7045},{"krate":0,"index":7044},{"krate":0,"index":7042},{"krate":0,"index":7038},{"krate":0,"index":7039},{"krate":0,"index":7035},{"krate":0,"index":7036},{"krate":0,"index":1233},{"krate":0,"index":1237},{"krate":0,"index":1258},{"krate":0,"index":7047},{"krate":0,"index":7065},{"krate":0,"index":7063},{"krate":0,"index":7061},{"krate":0,"index":7057},{"krate":0,"index":7058},{"krate":0,"index":7054},{"krate":0,"index":7055}],"decl_id":null,"docs":" Instruction formats and opcodes.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":296872,"byte_end":296881,"line_start":25,"line_end":25,"column_start":10,"column_end":19},"name":"ValueList","qualname":"::ir::instructions::ValueList","value":"entity::EntityList<Value>","parent":null,"children":[],"decl_id":null,"docs":" Some instructions use an external list of argument values because there is not enough space in\n the 16-byte `InstructionData` struct. These value lists are stored in a memory pool in\n `dfg.value_lists`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1157},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":296979,"byte_end":296992,"line_start":28,"line_end":28,"column_start":10,"column_end":23},"name":"ValueListPool","qualname":"::ir::instructions::ValueListPool","value":"entity::ListPool<Value>","parent":null,"children":[],"decl_id":null,"docs":" Memory pool for holding value lists. See `ValueList`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6240},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707128,"byte_end":10707134,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"Binary","qualname":"::ir::instructions::InstructionFormat::Binary","value":"InstructionFormat::Binary","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Binary(imms=(), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6242},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707201,"byte_end":10707210,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"name":"BinaryImm","qualname":"::ir::instructions::InstructionFormat::BinaryImm","value":"InstructionFormat::BinaryImm","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6244},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707268,"byte_end":10707274,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Branch","qualname":"::ir::instructions::InstructionFormat::Branch","value":"InstructionFormat::Branch","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Branch(imms=(destination: ir::Ebb), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6246},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707367,"byte_end":10707378,"line_start":15,"line_end":15,"column_start":5,"column_end":16},"name":"BranchFloat","qualname":"::ir::instructions::InstructionFormat::BranchFloat","value":"InstructionFormat::BranchFloat","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BranchFloat(imms=(cond: ir::condcodes::FloatCC, destination: ir::Ebb), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6248},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707468,"byte_end":10707478,"line_start":17,"line_end":17,"column_start":5,"column_end":15},"name":"BranchIcmp","qualname":"::ir::instructions::InstructionFormat::BranchIcmp","value":"InstructionFormat::BranchIcmp","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination: ir::Ebb), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6250},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707567,"byte_end":10707576,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"BranchInt","qualname":"::ir::instructions::InstructionFormat::BranchInt","value":"InstructionFormat::BranchInt","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BranchInt(imms=(cond: ir::condcodes::IntCC, destination: ir::Ebb), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6252},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707661,"byte_end":10707672,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"name":"BranchTable","qualname":"::ir::instructions::InstructionFormat::BranchTable","value":"InstructionFormat::BranchTable","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BranchTable(imms=(destination: ir::Ebb, table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6254},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707739,"byte_end":10707754,"line_start":23,"line_end":23,"column_start":5,"column_end":20},"name":"BranchTableBase","qualname":"::ir::instructions::InstructionFormat::BranchTableBase","value":"InstructionFormat::BranchTableBase","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BranchTableBase(imms=(table: ir::JumpTable), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6256},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707850,"byte_end":10707866,"line_start":25,"line_end":25,"column_start":5,"column_end":21},"name":"BranchTableEntry","qualname":"::ir::instructions::InstructionFormat::BranchTableEntry","value":"InstructionFormat::BranchTableEntry","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table: ir::JumpTable), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6258},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707923,"byte_end":10707927,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Call","qualname":"::ir::instructions::InstructionFormat::Call","value":"InstructionFormat::Call","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Call(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6260},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707990,"byte_end":10708002,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"CallIndirect","qualname":"::ir::instructions::InstructionFormat::CallIndirect","value":"InstructionFormat::CallIndirect","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6262},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708060,"byte_end":10708068,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"CondTrap","qualname":"::ir::instructions::InstructionFormat::CondTrap","value":"InstructionFormat::CondTrap","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" CondTrap(imms=(code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6264},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708147,"byte_end":10708158,"line_start":33,"line_end":33,"column_start":5,"column_end":16},"name":"CopySpecial","qualname":"::ir::instructions::InstructionFormat::CopySpecial","value":"InstructionFormat::CopySpecial","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6266},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708216,"byte_end":10708225,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"CopyToSsa","qualname":"::ir::instructions::InstructionFormat::CopyToSsa","value":"InstructionFormat::CopyToSsa","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" CopyToSsa(imms=(src: isa::RegUnit), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6268},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708295,"byte_end":10708306,"line_start":37,"line_end":37,"column_start":5,"column_end":16},"name":"ExtractLane","qualname":"::ir::instructions::InstructionFormat::ExtractLane","value":"InstructionFormat::ExtractLane","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6270},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708378,"byte_end":10708390,"line_start":39,"line_end":39,"column_start":5,"column_end":17},"name":"FloatCompare","qualname":"::ir::instructions::InstructionFormat::FloatCompare","value":"InstructionFormat::FloatCompare","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6272},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708459,"byte_end":10708468,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"name":"FloatCond","qualname":"::ir::instructions::InstructionFormat::FloatCond","value":"InstructionFormat::FloatCond","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6274},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708561,"byte_end":10708574,"line_start":43,"line_end":43,"column_start":5,"column_end":18},"name":"FloatCondTrap","qualname":"::ir::instructions::InstructionFormat::FloatCondTrap","value":"InstructionFormat::FloatCondTrap","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6276},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708635,"byte_end":10708643,"line_start":45,"line_end":45,"column_start":5,"column_end":13},"name":"FuncAddr","qualname":"::ir::instructions::InstructionFormat::FuncAddr","value":"InstructionFormat::FuncAddr","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6278},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708726,"byte_end":10708734,"line_start":47,"line_end":47,"column_start":5,"column_end":13},"name":"HeapAddr","qualname":"::ir::instructions::InstructionFormat::HeapAddr","value":"InstructionFormat::HeapAddr","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" HeapAddr(imms=(heap: ir::Heap, imm: ir::immediates::Uimm32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6280},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708798,"byte_end":10708810,"line_start":49,"line_end":49,"column_start":5,"column_end":17},"name":"IndirectJump","qualname":"::ir::instructions::InstructionFormat::IndirectJump","value":"InstructionFormat::IndirectJump","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" IndirectJump(imms=(table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6282},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708879,"byte_end":10708889,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"InsertLane","qualname":"::ir::instructions::InstructionFormat::InsertLane","value":"InstructionFormat::InsertLane","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6284},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10708957,"byte_end":10708967,"line_start":53,"line_end":53,"column_start":5,"column_end":15},"name":"IntCompare","qualname":"::ir::instructions::InstructionFormat::IntCompare","value":"InstructionFormat::IntCompare","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6286},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709066,"byte_end":10709079,"line_start":55,"line_end":55,"column_start":5,"column_end":18},"name":"IntCompareImm","qualname":"::ir::instructions::InstructionFormat::IntCompareImm","value":"InstructionFormat::IntCompareImm","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6288},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709144,"byte_end":10709151,"line_start":57,"line_end":57,"column_start":5,"column_end":12},"name":"IntCond","qualname":"::ir::instructions::InstructionFormat::IntCond","value":"InstructionFormat::IntCond","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6290},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709240,"byte_end":10709251,"line_start":59,"line_end":59,"column_start":5,"column_end":16},"name":"IntCondTrap","qualname":"::ir::instructions::InstructionFormat::IntCondTrap","value":"InstructionFormat::IntCondTrap","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" IntCondTrap(imms=(cond: ir::condcodes::IntCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6292},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709318,"byte_end":10709327,"line_start":61,"line_end":61,"column_start":5,"column_end":14},"name":"IntSelect","qualname":"::ir::instructions::InstructionFormat::IntSelect","value":"InstructionFormat::IntSelect","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6294},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709383,"byte_end":10709387,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Jump","qualname":"::ir::instructions::InstructionFormat::Jump","value":"InstructionFormat::Jump","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Jump(imms=(destination: ir::Ebb), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6296},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709476,"byte_end":10709480,"line_start":65,"line_end":65,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::instructions::InstructionFormat::Load","value":"InstructionFormat::Load","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Load(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6298},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709576,"byte_end":10709587,"line_start":67,"line_end":67,"column_start":5,"column_end":16},"name":"LoadComplex","qualname":"::ir::instructions::InstructionFormat::LoadComplex","value":"InstructionFormat::LoadComplex","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" LoadComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6300},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709627,"byte_end":10709635,"line_start":69,"line_end":69,"column_start":5,"column_end":13},"name":"MultiAry","qualname":"::ir::instructions::InstructionFormat::MultiAry","value":"InstructionFormat::MultiAry","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" MultiAry(imms=(), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6302},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709674,"byte_end":10709681,"line_start":71,"line_end":71,"column_start":5,"column_end":12},"name":"NullAry","qualname":"::ir::instructions::InstructionFormat::NullAry","value":"InstructionFormat::NullAry","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" NullAry(imms=(), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6304},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709757,"byte_end":10709764,"line_start":73,"line_end":73,"column_start":5,"column_end":12},"name":"RegFill","qualname":"::ir::instructions::InstructionFormat::RegFill","value":"InstructionFormat::RegFill","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6306},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709839,"byte_end":10709846,"line_start":75,"line_end":75,"column_start":5,"column_end":12},"name":"RegMove","qualname":"::ir::instructions::InstructionFormat::RegMove","value":"InstructionFormat::RegMove","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6308},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709923,"byte_end":10709931,"line_start":77,"line_end":77,"column_start":5,"column_end":13},"name":"RegSpill","qualname":"::ir::instructions::InstructionFormat::RegSpill","value":"InstructionFormat::RegSpill","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6310},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10709989,"byte_end":10709996,"line_start":79,"line_end":79,"column_start":5,"column_end":12},"name":"Shuffle","qualname":"::ir::instructions::InstructionFormat::Shuffle","value":"InstructionFormat::Shuffle","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Shuffle(imms=(mask: ir::Immediate), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6312},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710096,"byte_end":10710105,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"StackLoad","qualname":"::ir::instructions::InstructionFormat::StackLoad","value":"InstructionFormat::StackLoad","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" StackLoad(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6314},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710206,"byte_end":10710216,"line_start":83,"line_end":83,"column_start":5,"column_end":15},"name":"StackStore","qualname":"::ir::instructions::InstructionFormat::StackStore","value":"InstructionFormat::StackStore","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" StackStore(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6316},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710306,"byte_end":10710311,"line_start":85,"line_end":85,"column_start":5,"column_end":10},"name":"Store","qualname":"::ir::instructions::InstructionFormat::Store","value":"InstructionFormat::Store","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Store(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6318},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710408,"byte_end":10710420,"line_start":87,"line_end":87,"column_start":5,"column_end":17},"name":"StoreComplex","qualname":"::ir::instructions::InstructionFormat::StoreComplex","value":"InstructionFormat::StoreComplex","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" StoreComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6320},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710511,"byte_end":10710520,"line_start":89,"line_end":89,"column_start":5,"column_end":14},"name":"TableAddr","qualname":"::ir::instructions::InstructionFormat::TableAddr","value":"InstructionFormat::TableAddr","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" TableAddr(imms=(table: ir::Table, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6322},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710559,"byte_end":10710566,"line_start":91,"line_end":91,"column_start":5,"column_end":12},"name":"Ternary","qualname":"::ir::instructions::InstructionFormat::Ternary","value":"InstructionFormat::Ternary","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Ternary(imms=(), vals=3)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6324},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710620,"byte_end":10710624,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"Trap","qualname":"::ir::instructions::InstructionFormat::Trap","value":"InstructionFormat::Trap","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Trap(imms=(code: ir::TrapCode), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6326},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710661,"byte_end":10710666,"line_start":95,"line_end":95,"column_start":5,"column_end":10},"name":"Unary","qualname":"::ir::instructions::InstructionFormat::Unary","value":"InstructionFormat::Unary","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" Unary(imms=(), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6328},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710716,"byte_end":10710725,"line_start":97,"line_end":97,"column_start":5,"column_end":14},"name":"UnaryBool","qualname":"::ir::instructions::InstructionFormat::UnaryBool","value":"InstructionFormat::UnaryBool","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" UnaryBool(imms=(imm: bool), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6330},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710796,"byte_end":10710806,"line_start":99,"line_end":99,"column_start":5,"column_end":15},"name":"UnaryConst","qualname":"::ir::instructions::InstructionFormat::UnaryConst","value":"InstructionFormat::UnaryConst","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" UnaryConst(imms=(constant_handle: ir::Constant), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6332},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710883,"byte_end":10710899,"line_start":101,"line_end":101,"column_start":5,"column_end":21},"name":"UnaryGlobalValue","qualname":"::ir::instructions::InstructionFormat::UnaryGlobalValue","value":"InstructionFormat::UnaryGlobalValue","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" UnaryGlobalValue(imms=(global_value: ir::GlobalValue), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6334},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10710969,"byte_end":10710980,"line_start":103,"line_end":103,"column_start":5,"column_end":16},"name":"UnaryIeee32","qualname":"::ir::instructions::InstructionFormat::UnaryIeee32","value":"InstructionFormat::UnaryIeee32","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6336},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10711050,"byte_end":10711061,"line_start":105,"line_end":105,"column_start":5,"column_end":16},"name":"UnaryIeee64","qualname":"::ir::instructions::InstructionFormat::UnaryIeee64","value":"InstructionFormat::UnaryIeee64","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6338},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10711127,"byte_end":10711135,"line_start":107,"line_end":107,"column_start":5,"column_end":13},"name":"UnaryImm","qualname":"::ir::instructions::InstructionFormat::UnaryImm","value":"InstructionFormat::UnaryImm","parent":{"krate":0,"index":6239},"children":[],"decl_id":null,"docs":" UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6239},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10707072,"byte_end":10707089,"line_start":7,"line_end":7,"column_start":10,"column_end":27},"name":"InstructionFormat","qualname":"::ir::instructions::InstructionFormat","value":"InstructionFormat::{Binary, BinaryImm, Branch, BranchFloat, BranchIcmp, BranchInt, BranchTable, BranchTableBase, BranchTableEntry, Call, CallIndirect, CondTrap, CopySpecial, CopyToSsa, ExtractLane, FloatCompare, FloatCond, FloatCondTrap, FuncAddr, HeapAddr, IndirectJump, InsertLane, IntCompare, IntCompareImm, IntCond, IntCondTrap, IntSelect, Jump, Load, LoadComplex, MultiAry, NullAry, RegFill, RegMove, RegSpill, Shuffle, StackLoad, StackStore, Store, StoreComplex, TableAddr, Ternary, Trap, Unary, UnaryBool, UnaryConst, UnaryGlobalValue, UnaryIeee32, UnaryIeee64, UnaryImm}","parent":null,"children":[{"krate":0,"index":6240},{"krate":0,"index":6242},{"krate":0,"index":6244},{"krate":0,"index":6246},{"krate":0,"index":6248},{"krate":0,"index":6250},{"krate":0,"index":6252},{"krate":0,"index":6254},{"krate":0,"index":6256},{"krate":0,"index":6258},{"krate":0,"index":6260},{"krate":0,"index":6262},{"krate":0,"index":6264},{"krate":0,"index":6266},{"krate":0,"index":6268},{"krate":0,"index":6270},{"krate":0,"index":6272},{"krate":0,"index":6274},{"krate":0,"index":6276},{"krate":0,"index":6278},{"krate":0,"index":6280},{"krate":0,"index":6282},{"krate":0,"index":6284},{"krate":0,"index":6286},{"krate":0,"index":6288},{"krate":0,"index":6290},{"krate":0,"index":6292},{"krate":0,"index":6294},{"krate":0,"index":6296},{"krate":0,"index":6298},{"krate":0,"index":6300},{"krate":0,"index":6302},{"krate":0,"index":6304},{"krate":0,"index":6306},{"krate":0,"index":6308},{"krate":0,"index":6310},{"krate":0,"index":6312},{"krate":0,"index":6314},{"krate":0,"index":6316},{"krate":0,"index":6318},{"krate":0,"index":6320},{"krate":0,"index":6322},{"krate":0,"index":6324},{"krate":0,"index":6326},{"krate":0,"index":6328},{"krate":0,"index":6330},{"krate":0,"index":6332},{"krate":0,"index":6334},{"krate":0,"index":6336},{"krate":0,"index":6338}],"decl_id":null,"docs":" An instruction format","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6352},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716235,"byte_end":10716241,"line_start":270,"line_end":270,"column_start":5,"column_end":11},"name":"Binary","qualname":"::ir::instructions::InstructionData::Binary","value":"InstructionData::Binary { opcode, args }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6356},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716305,"byte_end":10716314,"line_start":274,"line_end":274,"column_start":5,"column_end":14},"name":"BinaryImm","qualname":"::ir::instructions::InstructionData::BinaryImm","value":"InstructionData::BinaryImm { opcode, arg, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6360},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716408,"byte_end":10716414,"line_start":279,"line_end":279,"column_start":5,"column_end":11},"name":"Branch","qualname":"::ir::instructions::InstructionData::Branch","value":"InstructionData::Branch { opcode, args, destination }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6364},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716507,"byte_end":10716518,"line_start":284,"line_end":284,"column_start":5,"column_end":16},"name":"BranchFloat","qualname":"::ir::instructions::InstructionData::BranchFloat","value":"InstructionData::BranchFloat { opcode, args, cond, destination }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6369},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716649,"byte_end":10716659,"line_start":290,"line_end":290,"column_start":5,"column_end":15},"name":"BranchIcmp","qualname":"::ir::instructions::InstructionData::BranchIcmp","value":"InstructionData::BranchIcmp { opcode, args, cond, destination }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6374},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716788,"byte_end":10716797,"line_start":296,"line_end":296,"column_start":5,"column_end":14},"name":"BranchInt","qualname":"::ir::instructions::InstructionData::BranchInt","value":"InstructionData::BranchInt { opcode, args, cond, destination }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6379},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716926,"byte_end":10716937,"line_start":302,"line_end":302,"column_start":5,"column_end":16},"name":"BranchTable","qualname":"::ir::instructions::InstructionData::BranchTable","value":"InstructionData::BranchTable { opcode, arg, destination, table }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6384},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717055,"byte_end":10717070,"line_start":308,"line_end":308,"column_start":5,"column_end":20},"name":"BranchTableBase","qualname":"::ir::instructions::InstructionData::BranchTableBase","value":"InstructionData::BranchTableBase { opcode, table }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6387},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717138,"byte_end":10717154,"line_start":312,"line_end":312,"column_start":5,"column_end":21},"name":"BranchTableEntry","qualname":"::ir::instructions::InstructionData::BranchTableEntry","value":"InstructionData::BranchTableEntry { opcode, args, imm, table }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6393},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717284,"byte_end":10717288,"line_start":318,"line_end":318,"column_start":5,"column_end":9},"name":"Call","qualname":"::ir::instructions::InstructionData::Call","value":"InstructionData::Call { opcode, args, func_ref }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6397},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717382,"byte_end":10717394,"line_start":323,"line_end":323,"column_start":5,"column_end":17},"name":"CallIndirect","qualname":"::ir::instructions::InstructionData::CallIndirect","value":"InstructionData::CallIndirect { opcode, args, sig_ref }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6401},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717486,"byte_end":10717494,"line_start":328,"line_end":328,"column_start":5,"column_end":13},"name":"CondTrap","qualname":"::ir::instructions::InstructionData::CondTrap","value":"InstructionData::CondTrap { opcode, arg, code }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6405},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717580,"byte_end":10717591,"line_start":333,"line_end":333,"column_start":5,"column_end":16},"name":"CopySpecial","qualname":"::ir::instructions::InstructionData::CopySpecial","value":"InstructionData::CopySpecial { opcode, src, dst }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6409},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717683,"byte_end":10717692,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"CopyToSsa","qualname":"::ir::instructions::InstructionData::CopyToSsa","value":"InstructionData::CopyToSsa { opcode, src }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6412},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717757,"byte_end":10717768,"line_start":342,"line_end":342,"column_start":5,"column_end":16},"name":"ExtractLane","qualname":"::ir::instructions::InstructionData::ExtractLane","value":"InstructionData::ExtractLane { opcode, arg, lane }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6416},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717863,"byte_end":10717875,"line_start":347,"line_end":347,"column_start":5,"column_end":17},"name":"FloatCompare","qualname":"::ir::instructions::InstructionData::FloatCompare","value":"InstructionData::FloatCompare { opcode, args, cond }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6421},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10717977,"byte_end":10717986,"line_start":352,"line_end":352,"column_start":5,"column_end":14},"name":"FloatCond","qualname":"::ir::instructions::InstructionData::FloatCond","value":"InstructionData::FloatCond { opcode, arg, cond }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6425},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718082,"byte_end":10718095,"line_start":357,"line_end":357,"column_start":5,"column_end":18},"name":"FloatCondTrap","qualname":"::ir::instructions::InstructionData::FloatCondTrap","value":"InstructionData::FloatCondTrap { opcode, arg, cond, code }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6430},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718219,"byte_end":10718227,"line_start":363,"line_end":363,"column_start":5,"column_end":13},"name":"FuncAddr","qualname":"::ir::instructions::InstructionData::FuncAddr","value":"InstructionData::FuncAddr { opcode, func_ref }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6433},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718296,"byte_end":10718304,"line_start":367,"line_end":367,"column_start":5,"column_end":13},"name":"HeapAddr","qualname":"::ir::instructions::InstructionData::HeapAddr","value":"InstructionData::HeapAddr { opcode, arg, heap, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6438},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718423,"byte_end":10718435,"line_start":373,"line_end":373,"column_start":5,"column_end":17},"name":"IndirectJump","qualname":"::ir::instructions::InstructionData::IndirectJump","value":"InstructionData::IndirectJump { opcode, arg, table }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6442},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718523,"byte_end":10718533,"line_start":378,"line_end":378,"column_start":5,"column_end":15},"name":"InsertLane","qualname":"::ir::instructions::InstructionData::InsertLane","value":"InstructionData::InsertLane { opcode, args, lane }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6447},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718634,"byte_end":10718644,"line_start":383,"line_end":383,"column_start":5,"column_end":15},"name":"IntCompare","qualname":"::ir::instructions::InstructionData::IntCompare","value":"InstructionData::IntCompare { opcode, args, cond }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6452},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718744,"byte_end":10718757,"line_start":388,"line_end":388,"column_start":5,"column_end":18},"name":"IntCompareImm","qualname":"::ir::instructions::InstructionData::IntCompareImm","value":"InstructionData::IntCompareImm { opcode, arg, cond, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6457},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718887,"byte_end":10718894,"line_start":394,"line_end":394,"column_start":5,"column_end":12},"name":"IntCond","qualname":"::ir::instructions::InstructionData::IntCond","value":"InstructionData::IntCond { opcode, arg, cond }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6461},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10718988,"byte_end":10718999,"line_start":399,"line_end":399,"column_start":5,"column_end":16},"name":"IntCondTrap","qualname":"::ir::instructions::InstructionData::IntCondTrap","value":"InstructionData::IntCondTrap { opcode, arg, cond, code }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6466},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719121,"byte_end":10719130,"line_start":405,"line_end":405,"column_start":5,"column_end":14},"name":"IntSelect","qualname":"::ir::instructions::InstructionData::IntSelect","value":"InstructionData::IntSelect { opcode, args, cond }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6471},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719230,"byte_end":10719234,"line_start":410,"line_end":410,"column_start":5,"column_end":9},"name":"Jump","qualname":"::ir::instructions::InstructionData::Jump","value":"InstructionData::Jump { opcode, args, destination }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6475},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719327,"byte_end":10719331,"line_start":415,"line_end":415,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::instructions::InstructionData::Load","value":"InstructionData::Load { opcode, arg, flags, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6480},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719460,"byte_end":10719471,"line_start":421,"line_end":421,"column_start":5,"column_end":16},"name":"LoadComplex","qualname":"::ir::instructions::InstructionData::LoadComplex","value":"InstructionData::LoadComplex { opcode, args, flags, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6485},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719605,"byte_end":10719613,"line_start":427,"line_end":427,"column_start":5,"column_end":13},"name":"MultiAry","qualname":"::ir::instructions::InstructionData::MultiAry","value":"InstructionData::MultiAry { opcode, args }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6488},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719676,"byte_end":10719683,"line_start":431,"line_end":431,"column_start":5,"column_end":12},"name":"NullAry","qualname":"::ir::instructions::InstructionData::NullAry","value":"InstructionData::NullAry { opcode }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6490},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719721,"byte_end":10719728,"line_start":434,"line_end":434,"column_start":5,"column_end":12},"name":"RegFill","qualname":"::ir::instructions::InstructionData::RegFill","value":"InstructionData::RegFill { opcode, arg, src, dst }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6495},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719841,"byte_end":10719848,"line_start":440,"line_end":440,"column_start":5,"column_end":12},"name":"RegMove","qualname":"::ir::instructions::InstructionData::RegMove","value":"InstructionData::RegMove { opcode, arg, src, dst }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6500},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10719960,"byte_end":10719968,"line_start":446,"line_end":446,"column_start":5,"column_end":13},"name":"RegSpill","qualname":"::ir::instructions::InstructionData::RegSpill","value":"InstructionData::RegSpill { opcode, arg, src, dst }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6505},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720081,"byte_end":10720088,"line_start":452,"line_end":452,"column_start":5,"column_end":12},"name":"Shuffle","qualname":"::ir::instructions::InstructionData::Shuffle","value":"InstructionData::Shuffle { opcode, args, mask }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6510},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720181,"byte_end":10720190,"line_start":457,"line_end":457,"column_start":5,"column_end":14},"name":"StackLoad","qualname":"::ir::instructions::InstructionData::StackLoad","value":"InstructionData::StackLoad { opcode, stack_slot, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6514},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720305,"byte_end":10720315,"line_start":462,"line_end":462,"column_start":5,"column_end":15},"name":"StackStore","qualname":"::ir::instructions::InstructionData::StackStore","value":"InstructionData::StackStore { opcode, arg, stack_slot, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6519},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720450,"byte_end":10720455,"line_start":468,"line_end":468,"column_start":5,"column_end":10},"name":"Store","qualname":"::ir::instructions::InstructionData::Store","value":"InstructionData::Store { opcode, args, flags, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6525},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720590,"byte_end":10720602,"line_start":474,"line_end":474,"column_start":5,"column_end":17},"name":"StoreComplex","qualname":"::ir::instructions::InstructionData::StoreComplex","value":"InstructionData::StoreComplex { opcode, args, flags, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6530},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720736,"byte_end":10720745,"line_start":480,"line_end":480,"column_start":5,"column_end":14},"name":"TableAddr","qualname":"::ir::instructions::InstructionData::TableAddr","value":"InstructionData::TableAddr { opcode, arg, table, offset }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6535},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720871,"byte_end":10720878,"line_start":486,"line_end":486,"column_start":5,"column_end":12},"name":"Ternary","qualname":"::ir::instructions::InstructionData::Ternary","value":"InstructionData::Ternary { opcode, args }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6539},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10720942,"byte_end":10720946,"line_start":490,"line_end":490,"column_start":5,"column_end":9},"name":"Trap","qualname":"::ir::instructions::InstructionData::Trap","value":"InstructionData::Trap { opcode, code }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6542},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721012,"byte_end":10721017,"line_start":494,"line_end":494,"column_start":5,"column_end":10},"name":"Unary","qualname":"::ir::instructions::InstructionData::Unary","value":"InstructionData::Unary { opcode, arg }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6545},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721075,"byte_end":10721084,"line_start":498,"line_end":498,"column_start":5,"column_end":14},"name":"UnaryBool","qualname":"::ir::instructions::InstructionData::UnaryBool","value":"InstructionData::UnaryBool { opcode, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6548},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721141,"byte_end":10721151,"line_start":502,"line_end":502,"column_start":5,"column_end":15},"name":"UnaryConst","qualname":"::ir::instructions::InstructionData::UnaryConst","value":"InstructionData::UnaryConst { opcode, constant_handle }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6551},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721228,"byte_end":10721244,"line_start":506,"line_end":506,"column_start":5,"column_end":21},"name":"UnaryGlobalValue","qualname":"::ir::instructions::InstructionData::UnaryGlobalValue","value":"InstructionData::UnaryGlobalValue { opcode, global_value }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6554},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721321,"byte_end":10721332,"line_start":510,"line_end":510,"column_start":5,"column_end":16},"name":"UnaryIeee32","qualname":"::ir::instructions::InstructionData::UnaryIeee32","value":"InstructionData::UnaryIeee32 { opcode, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6557},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721407,"byte_end":10721418,"line_start":514,"line_end":514,"column_start":5,"column_end":16},"name":"UnaryIeee64","qualname":"::ir::instructions::InstructionData::UnaryIeee64","value":"InstructionData::UnaryIeee64 { opcode, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6560},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721493,"byte_end":10721501,"line_start":518,"line_end":518,"column_start":5,"column_end":13},"name":"UnaryImm","qualname":"::ir::instructions::InstructionData::UnaryImm","value":"InstructionData::UnaryImm { opcode, imm }","parent":{"krate":0,"index":6351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6351},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716213,"byte_end":10716228,"line_start":269,"line_end":269,"column_start":10,"column_end":25},"name":"InstructionData","qualname":"::ir::instructions::InstructionData","value":"InstructionData::{Binary, BinaryImm, Branch, BranchFloat, BranchIcmp, BranchInt, BranchTable, BranchTableBase, BranchTableEntry, Call, CallIndirect, CondTrap, CopySpecial, CopyToSsa, ExtractLane, FloatCompare, FloatCond, FloatCondTrap, FuncAddr, HeapAddr, IndirectJump, InsertLane, IntCompare, IntCompareImm, IntCond, IntCondTrap, IntSelect, Jump, Load, LoadComplex, MultiAry, NullAry, RegFill, RegMove, RegSpill, Shuffle, StackLoad, StackStore, Store, StoreComplex, TableAddr, Ternary, Trap, Unary, UnaryBool, UnaryConst, UnaryGlobalValue, UnaryIeee32, UnaryIeee64, UnaryImm}","parent":null,"children":[{"krate":0,"index":6352},{"krate":0,"index":6356},{"krate":0,"index":6360},{"krate":0,"index":6364},{"krate":0,"index":6369},{"krate":0,"index":6374},{"krate":0,"index":6379},{"krate":0,"index":6384},{"krate":0,"index":6387},{"krate":0,"index":6393},{"krate":0,"index":6397},{"krate":0,"index":6401},{"krate":0,"index":6405},{"krate":0,"index":6409},{"krate":0,"index":6412},{"krate":0,"index":6416},{"krate":0,"index":6421},{"krate":0,"index":6425},{"krate":0,"index":6430},{"krate":0,"index":6433},{"krate":0,"index":6438},{"krate":0,"index":6442},{"krate":0,"index":6447},{"krate":0,"index":6452},{"krate":0,"index":6457},{"krate":0,"index":6461},{"krate":0,"index":6466},{"krate":0,"index":6471},{"krate":0,"index":6475},{"krate":0,"index":6480},{"krate":0,"index":6485},{"krate":0,"index":6488},{"krate":0,"index":6490},{"krate":0,"index":6495},{"krate":0,"index":6500},{"krate":0,"index":6505},{"krate":0,"index":6510},{"krate":0,"index":6514},{"krate":0,"index":6519},{"krate":0,"index":6525},{"krate":0,"index":6530},{"krate":0,"index":6535},{"krate":0,"index":6539},{"krate":0,"index":6542},{"krate":0,"index":6545},{"krate":0,"index":6548},{"krate":0,"index":6551},{"krate":0,"index":6554},{"krate":0,"index":6557},{"krate":0,"index":6560}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10716181,"byte_end":10716203,"line_start":268,"line_end":268,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":6205},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721652,"byte_end":10721658,"line_start":526,"line_end":526,"column_start":12,"column_end":18},"name":"opcode","qualname":"<InstructionData>::opcode","value":"fn (&self) -> Opcode","parent":null,"children":[],"decl_id":null,"docs":" Get the opcode of this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6206},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10724078,"byte_end":10724093,"line_start":584,"line_end":584,"column_start":12,"column_end":27},"name":"typevar_operand","qualname":"<InstructionData>::typevar_operand","value":"fn (&self, pool: &ir::ValueListPool) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Get the controlling type variable operand.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6207},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10726799,"byte_end":10726808,"line_start":652,"line_end":652,"column_start":12,"column_end":21},"name":"arguments","qualname":"<InstructionData>::arguments","value":"fn <'a> (&'a self, pool: &'a ir::ValueListPool) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the value arguments to this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6209},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10729567,"byte_end":10729580,"line_start":719,"line_end":719,"column_start":12,"column_end":25},"name":"arguments_mut","qualname":"<InstructionData>::arguments_mut","value":"fn <'a> (&'a mut self, pool: &'a mut ir::ValueListPool) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get mutable references to the value arguments to this\n instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6211},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10732634,"byte_end":10732649,"line_start":789,"line_end":789,"column_start":12,"column_end":27},"name":"take_value_list","qualname":"<InstructionData>::take_value_list","value":"fn (&mut self) -> Option<ir::ValueList>","parent":null,"children":[],"decl_id":null,"docs":" Take out the value list with all the value arguments and return\n it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6212},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10733665,"byte_end":10733679,"line_start":815,"line_end":815,"column_start":12,"column_end":26},"name":"put_value_list","qualname":"<InstructionData>::put_value_list","value":"fn (&mut self, vlist: ir::ValueList) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a value list.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6213},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10734693,"byte_end":10734695,"line_start":837,"line_end":837,"column_start":12,"column_end":14},"name":"eq","qualname":"<InstructionData>::eq","value":"fn (&self, other: &Self, pool: &ir::ValueListPool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare two `InstructionData` for equality.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6214},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10750354,"byte_end":10750358,"line_start":1102,"line_end":1102,"column_start":12,"column_end":16},"name":"hash","qualname":"<InstructionData>::hash","value":"fn <H> (&self, state: &mut H, pool: &ir::ValueListPool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Hash an `InstructionData`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6568},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10767960,"byte_end":10767964,"line_start":1429,"line_end":1429,"column_start":5,"column_end":9},"name":"Jump","qualname":"::ir::instructions::Opcode::Jump","value":"Opcode::Jump","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `jump EBB, args`. (Jump)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6571},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768014,"byte_end":10768025,"line_start":1431,"line_end":1431,"column_start":5,"column_end":16},"name":"Fallthrough","qualname":"::ir::instructions::Opcode::Fallthrough","value":"Opcode::Fallthrough","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `fallthrough EBB, args`. (Jump)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6573},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768100,"byte_end":10768103,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8},"name":"Brz","qualname":"::ir::instructions::Opcode::Brz","value":"Opcode::Brz","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `brz c, EBB, args`. (Branch)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6575},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768179,"byte_end":10768183,"line_start":1437,"line_end":1437,"column_start":5,"column_end":9},"name":"Brnz","qualname":"::ir::instructions::Opcode::Brnz","value":"Opcode::Brnz","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `brnz c, EBB, args`. (Branch)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6577},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768275,"byte_end":10768281,"line_start":1440,"line_end":1440,"column_start":5,"column_end":11},"name":"BrIcmp","qualname":"::ir::instructions::Opcode::BrIcmp","value":"Opcode::BrIcmp","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `br_icmp Cond, x, y, EBB, args`. (BranchIcmp)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6579},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768334,"byte_end":10768338,"line_start":1442,"line_end":1442,"column_start":5,"column_end":9},"name":"Brif","qualname":"::ir::instructions::Opcode::Brif","value":"Opcode::Brif","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `brif Cond, f, EBB, args`. (BranchInt)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6581},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768393,"byte_end":10768397,"line_start":1444,"line_end":1444,"column_start":5,"column_end":9},"name":"Brff","qualname":"::ir::instructions::Opcode::Brff","value":"Opcode::Brff","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `brff Cond, f, EBB, args`. (BranchFloat)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6583},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768480,"byte_end":10768487,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12},"name":"BrTable","qualname":"::ir::instructions::Opcode::BrTable","value":"Opcode::BrTable","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `br_table x, EBB, JT`. (BranchTable)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6585},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768598,"byte_end":10768612,"line_start":1450,"line_end":1450,"column_start":5,"column_end":19},"name":"JumpTableEntry","qualname":"::ir::instructions::Opcode::JumpTableEntry","value":"Opcode::JumpTableEntry","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `entry = jump_table_entry x, addr, Size, JT`. (BranchTableEntry)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6587},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768673,"byte_end":10768686,"line_start":1452,"line_end":1452,"column_start":5,"column_end":18},"name":"JumpTableBase","qualname":"::ir::instructions::Opcode::JumpTableBase","value":"Opcode::JumpTableBase","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `addr = jump_table_base JT`. (BranchTableBase)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6589},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768785,"byte_end":10768804,"line_start":1455,"line_end":1455,"column_start":5,"column_end":24},"name":"IndirectJumpTableBr","qualname":"::ir::instructions::Opcode::IndirectJumpTableBr","value":"Opcode::IndirectJumpTableBr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `indirect_jump_table_br addr, JT`. (IndirectJump)\n Type inferred from `addr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6591},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768841,"byte_end":10768850,"line_start":1457,"line_end":1457,"column_start":5,"column_end":14},"name":"Debugtrap","qualname":"::ir::instructions::Opcode::Debugtrap","value":"Opcode::Debugtrap","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `debugtrap`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6593},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768884,"byte_end":10768888,"line_start":1459,"line_end":1459,"column_start":5,"column_end":9},"name":"Trap","qualname":"::ir::instructions::Opcode::Trap","value":"Opcode::Trap","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `trap code`. (Trap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6595},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10768962,"byte_end":10768967,"line_start":1462,"line_end":1462,"column_start":5,"column_end":10},"name":"Trapz","qualname":"::ir::instructions::Opcode::Trapz","value":"Opcode::Trapz","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `trapz c, code`. (CondTrap)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6597},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769011,"byte_end":10769024,"line_start":1464,"line_end":1464,"column_start":5,"column_end":18},"name":"ResumableTrap","qualname":"::ir::instructions::Opcode::ResumableTrap","value":"Opcode::ResumableTrap","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `resumable_trap code`. (Trap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6599},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769099,"byte_end":10769105,"line_start":1467,"line_end":1467,"column_start":5,"column_end":11},"name":"Trapnz","qualname":"::ir::instructions::Opcode::Trapnz","value":"Opcode::Trapnz","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `trapnz c, code`. (CondTrap)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6601},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769157,"byte_end":10769163,"line_start":1469,"line_end":1469,"column_start":5,"column_end":11},"name":"Trapif","qualname":"::ir::instructions::Opcode::Trapif","value":"Opcode::Trapif","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `trapif Cond, f, code`. (IntCondTrap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6603},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769217,"byte_end":10769223,"line_start":1471,"line_end":1471,"column_start":5,"column_end":11},"name":"Trapff","qualname":"::ir::instructions::Opcode::Trapff","value":"Opcode::Trapff","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `trapff Cond, f, code`. (FloatCondTrap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6605},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769264,"byte_end":10769270,"line_start":1473,"line_end":1473,"column_start":5,"column_end":11},"name":"Return","qualname":"::ir::instructions::Opcode::Return","value":"Opcode::Return","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `return rvals`. (MultiAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6607},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769323,"byte_end":10769340,"line_start":1475,"line_end":1475,"column_start":5,"column_end":22},"name":"FallthroughReturn","qualname":"::ir::instructions::Opcode::FallthroughReturn","value":"Opcode::FallthroughReturn","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `fallthrough_return rvals`. (MultiAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6609},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769386,"byte_end":10769390,"line_start":1477,"line_end":1477,"column_start":5,"column_end":9},"name":"Call","qualname":"::ir::instructions::Opcode::Call","value":"Opcode::Call","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `rvals = call FN, args`. (Call)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6611},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769499,"byte_end":10769511,"line_start":1480,"line_end":1480,"column_start":5,"column_end":17},"name":"CallIndirect","qualname":"::ir::instructions::Opcode::CallIndirect","value":"Opcode::CallIndirect","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `rvals = call_indirect SIG, callee, args`. (CallIndirect)\n Type inferred from `callee`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6613},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769559,"byte_end":10769567,"line_start":1482,"line_end":1482,"column_start":5,"column_end":13},"name":"FuncAddr","qualname":"::ir::instructions::Opcode::FuncAddr","value":"Opcode::FuncAddr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `addr = func_addr FN`. (FuncAddr)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6615},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769620,"byte_end":10769624,"line_start":1484,"line_end":1484,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::instructions::Opcode::Load","value":"Opcode::Load","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = load MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6617},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769695,"byte_end":10769706,"line_start":1486,"line_end":1486,"column_start":5,"column_end":16},"name":"LoadComplex","qualname":"::ir::instructions::Opcode::LoadComplex","value":"Opcode::LoadComplex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = load_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6619},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769792,"byte_end":10769797,"line_start":1489,"line_end":1489,"column_start":5,"column_end":10},"name":"Store","qualname":"::ir::instructions::Opcode::Store","value":"Opcode::Store","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `store MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6621},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769901,"byte_end":10769913,"line_start":1492,"line_end":1492,"column_start":5,"column_end":17},"name":"StoreComplex","qualname":"::ir::instructions::Opcode::StoreComplex","value":"Opcode::StoreComplex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `store_complex MemFlags, x, args, Offset`. (StoreComplex)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6623},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10769968,"byte_end":10769974,"line_start":1494,"line_end":1494,"column_start":5,"column_end":11},"name":"Uload8","qualname":"::ir::instructions::Opcode::Uload8","value":"Opcode::Uload8","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uload8 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6625},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770047,"byte_end":10770060,"line_start":1496,"line_end":1496,"column_start":5,"column_end":18},"name":"Uload8Complex","qualname":"::ir::instructions::Opcode::Uload8Complex","value":"Opcode::Uload8Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uload8_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6627},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770115,"byte_end":10770121,"line_start":1498,"line_end":1498,"column_start":5,"column_end":11},"name":"Sload8","qualname":"::ir::instructions::Opcode::Sload8","value":"Opcode::Sload8","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sload8 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6629},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770194,"byte_end":10770207,"line_start":1500,"line_end":1500,"column_start":5,"column_end":18},"name":"Sload8Complex","qualname":"::ir::instructions::Opcode::Sload8Complex","value":"Opcode::Sload8Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sload8_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6631},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770295,"byte_end":10770302,"line_start":1503,"line_end":1503,"column_start":5,"column_end":12},"name":"Istore8","qualname":"::ir::instructions::Opcode::Istore8","value":"Opcode::Istore8","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `istore8 MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6633},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770408,"byte_end":10770422,"line_start":1506,"line_end":1506,"column_start":5,"column_end":19},"name":"Istore8Complex","qualname":"::ir::instructions::Opcode::Istore8Complex","value":"Opcode::Istore8Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `istore8_complex MemFlags, x, args, Offset`. (StoreComplex)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6635},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770478,"byte_end":10770485,"line_start":1508,"line_end":1508,"column_start":5,"column_end":12},"name":"Uload16","qualname":"::ir::instructions::Opcode::Uload16","value":"Opcode::Uload16","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uload16 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6637},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770559,"byte_end":10770573,"line_start":1510,"line_end":1510,"column_start":5,"column_end":19},"name":"Uload16Complex","qualname":"::ir::instructions::Opcode::Uload16Complex","value":"Opcode::Uload16Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uload16_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6639},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770629,"byte_end":10770636,"line_start":1512,"line_end":1512,"column_start":5,"column_end":12},"name":"Sload16","qualname":"::ir::instructions::Opcode::Sload16","value":"Opcode::Sload16","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sload16 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6641},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770710,"byte_end":10770724,"line_start":1514,"line_end":1514,"column_start":5,"column_end":19},"name":"Sload16Complex","qualname":"::ir::instructions::Opcode::Sload16Complex","value":"Opcode::Sload16Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sload16_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6643},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770813,"byte_end":10770821,"line_start":1517,"line_end":1517,"column_start":5,"column_end":13},"name":"Istore16","qualname":"::ir::instructions::Opcode::Istore16","value":"Opcode::Istore16","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `istore16 MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6645},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10770928,"byte_end":10770943,"line_start":1520,"line_end":1520,"column_start":5,"column_end":20},"name":"Istore16Complex","qualname":"::ir::instructions::Opcode::Istore16Complex","value":"Opcode::Istore16Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `istore16_complex MemFlags, x, args, Offset`. (StoreComplex)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6647},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771031,"byte_end":10771038,"line_start":1523,"line_end":1523,"column_start":5,"column_end":12},"name":"Uload32","qualname":"::ir::instructions::Opcode::Uload32","value":"Opcode::Uload32","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uload32 MemFlags, p, Offset`. (Load)\n Type inferred from `p`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6649},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771112,"byte_end":10771126,"line_start":1525,"line_end":1525,"column_start":5,"column_end":19},"name":"Uload32Complex","qualname":"::ir::instructions::Opcode::Uload32Complex","value":"Opcode::Uload32Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uload32_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6651},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771214,"byte_end":10771221,"line_start":1528,"line_end":1528,"column_start":5,"column_end":12},"name":"Sload32","qualname":"::ir::instructions::Opcode::Sload32","value":"Opcode::Sload32","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sload32 MemFlags, p, Offset`. (Load)\n Type inferred from `p`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6653},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771295,"byte_end":10771309,"line_start":1530,"line_end":1530,"column_start":5,"column_end":19},"name":"Sload32Complex","qualname":"::ir::instructions::Opcode::Sload32Complex","value":"Opcode::Sload32Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sload32_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6655},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771398,"byte_end":10771406,"line_start":1533,"line_end":1533,"column_start":5,"column_end":13},"name":"Istore32","qualname":"::ir::instructions::Opcode::Istore32","value":"Opcode::Istore32","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `istore32 MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6657},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771481,"byte_end":10771496,"line_start":1535,"line_end":1535,"column_start":5,"column_end":20},"name":"Istore32Complex","qualname":"::ir::instructions::Opcode::Istore32Complex","value":"Opcode::Istore32Complex","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `istore32_complex MemFlags, x, args, Offset`. (StoreComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6659},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771551,"byte_end":10771560,"line_start":1537,"line_end":1537,"column_start":5,"column_end":14},"name":"StackLoad","qualname":"::ir::instructions::Opcode::StackLoad","value":"Opcode::StackLoad","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = stack_load SS, Offset`. (StackLoad)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6661},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771648,"byte_end":10771658,"line_start":1540,"line_end":1540,"column_start":5,"column_end":15},"name":"StackStore","qualname":"::ir::instructions::Opcode::StackStore","value":"Opcode::StackStore","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `stack_store x, SS, Offset`. (StackStore)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6663},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771716,"byte_end":10771725,"line_start":1542,"line_end":1542,"column_start":5,"column_end":14},"name":"StackAddr","qualname":"::ir::instructions::Opcode::StackAddr","value":"Opcode::StackAddr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `addr = stack_addr SS, Offset`. (StackLoad)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6665},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771781,"byte_end":10771792,"line_start":1544,"line_end":1544,"column_start":5,"column_end":16},"name":"GlobalValue","qualname":"::ir::instructions::Opcode::GlobalValue","value":"Opcode::GlobalValue","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = global_value GV`. (UnaryGlobalValue)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6667},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771848,"byte_end":10771859,"line_start":1546,"line_end":1546,"column_start":5,"column_end":16},"name":"SymbolValue","qualname":"::ir::instructions::Opcode::SymbolValue","value":"Opcode::SymbolValue","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = symbol_value GV`. (UnaryGlobalValue)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6669},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771915,"byte_end":10771923,"line_start":1548,"line_end":1548,"column_start":5,"column_end":13},"name":"HeapAddr","qualname":"::ir::instructions::Opcode::HeapAddr","value":"Opcode::HeapAddr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `addr = heap_addr H, p, Size`. (HeapAddr)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6671},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10771972,"byte_end":10771984,"line_start":1550,"line_end":1550,"column_start":5,"column_end":17},"name":"GetPinnedReg","qualname":"::ir::instructions::Opcode::GetPinnedReg","value":"Opcode::GetPinnedReg","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `addr = get_pinned_reg`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6673},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772064,"byte_end":10772076,"line_start":1553,"line_end":1553,"column_start":5,"column_end":17},"name":"SetPinnedReg","qualname":"::ir::instructions::Opcode::SetPinnedReg","value":"Opcode::SetPinnedReg","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `set_pinned_reg addr`. (Unary)\n Type inferred from `addr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6675},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772136,"byte_end":10772145,"line_start":1555,"line_end":1555,"column_start":5,"column_end":14},"name":"TableAddr","qualname":"::ir::instructions::Opcode::TableAddr","value":"Opcode::TableAddr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `addr = table_addr T, p, Offset`. (TableAddr)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6677},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772186,"byte_end":10772192,"line_start":1557,"line_end":1557,"column_start":5,"column_end":11},"name":"Iconst","qualname":"::ir::instructions::Opcode::Iconst","value":"Opcode::Iconst","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = iconst N`. (UnaryImm)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6679},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772238,"byte_end":10772246,"line_start":1559,"line_end":1559,"column_start":5,"column_end":13},"name":"F32const","qualname":"::ir::instructions::Opcode::F32const","value":"Opcode::F32const","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = f32const N`. (UnaryIeee32)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6681},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772292,"byte_end":10772300,"line_start":1561,"line_end":1561,"column_start":5,"column_end":13},"name":"F64const","qualname":"::ir::instructions::Opcode::F64const","value":"Opcode::F64const","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = f64const N`. (UnaryIeee64)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6683},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772342,"byte_end":10772348,"line_start":1563,"line_end":1563,"column_start":5,"column_end":11},"name":"Bconst","qualname":"::ir::instructions::Opcode::Bconst","value":"Opcode::Bconst","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bconst N`. (UnaryBool)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6685},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772391,"byte_end":10772397,"line_start":1565,"line_end":1565,"column_start":5,"column_end":11},"name":"Vconst","qualname":"::ir::instructions::Opcode::Vconst","value":"Opcode::Vconst","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = vconst N`. (UnaryConst)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6687},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772479,"byte_end":10772486,"line_start":1568,"line_end":1568,"column_start":5,"column_end":12},"name":"Shuffle","qualname":"::ir::instructions::Opcode::Shuffle","value":"Opcode::Shuffle","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = shuffle a, b, mask`. (Shuffle)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6689},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772522,"byte_end":10772526,"line_start":1570,"line_end":1570,"column_start":5,"column_end":9},"name":"Null","qualname":"::ir::instructions::Opcode::Null","value":"Opcode::Null","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = null`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6691},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772557,"byte_end":10772560,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8},"name":"Nop","qualname":"::ir::instructions::Opcode::Nop","value":"Opcode::Nop","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `nop`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6693},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772638,"byte_end":10772644,"line_start":1575,"line_end":1575,"column_start":5,"column_end":11},"name":"Select","qualname":"::ir::instructions::Opcode::Select","value":"Opcode::Select","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = select c, x, y`. (Ternary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6695},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772702,"byte_end":10772710,"line_start":1577,"line_end":1577,"column_start":5,"column_end":13},"name":"Selectif","qualname":"::ir::instructions::Opcode::Selectif","value":"Opcode::Selectif","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = selectif cc, flags, x, y`. (IntSelect)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6697},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772791,"byte_end":10772800,"line_start":1580,"line_end":1580,"column_start":5,"column_end":14},"name":"Bitselect","qualname":"::ir::instructions::Opcode::Bitselect","value":"Opcode::Bitselect","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bitselect c, x, y`. (Ternary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6699},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772868,"byte_end":10772872,"line_start":1583,"line_end":1583,"column_start":5,"column_end":9},"name":"Copy","qualname":"::ir::instructions::Opcode::Copy","value":"Opcode::Copy","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = copy x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6701},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10772941,"byte_end":10772946,"line_start":1586,"line_end":1586,"column_start":5,"column_end":10},"name":"Spill","qualname":"::ir::instructions::Opcode::Spill","value":"Opcode::Spill","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = spill x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6703},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773014,"byte_end":10773018,"line_start":1589,"line_end":1589,"column_start":5,"column_end":9},"name":"Fill","qualname":"::ir::instructions::Opcode::Fill","value":"Opcode::Fill","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fill x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6705},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773090,"byte_end":10773097,"line_start":1592,"line_end":1592,"column_start":5,"column_end":12},"name":"FillNop","qualname":"::ir::instructions::Opcode::FillNop","value":"Opcode::FillNop","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fill_nop x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6707},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773176,"byte_end":10773183,"line_start":1595,"line_end":1595,"column_start":5,"column_end":12},"name":"Regmove","qualname":"::ir::instructions::Opcode::Regmove","value":"Opcode::Regmove","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `regmove x, src, dst`. (RegMove)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6709},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773236,"byte_end":10773247,"line_start":1597,"line_end":1597,"column_start":5,"column_end":16},"name":"CopySpecial","qualname":"::ir::instructions::Opcode::CopySpecial","value":"Opcode::CopySpecial","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `copy_special src, dst`. (CopySpecial)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6711},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773296,"byte_end":10773305,"line_start":1599,"line_end":1599,"column_start":5,"column_end":14},"name":"CopyToSsa","qualname":"::ir::instructions::Opcode::CopyToSsa","value":"Opcode::CopyToSsa","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = copy_to_ssa src`. (CopyToSsa)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6713},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773377,"byte_end":10773384,"line_start":1602,"line_end":1602,"column_start":5,"column_end":12},"name":"CopyNop","qualname":"::ir::instructions::Opcode::CopyNop","value":"Opcode::CopyNop","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = copy_nop x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6715},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773466,"byte_end":10773478,"line_start":1605,"line_end":1605,"column_start":5,"column_end":17},"name":"AdjustSpDown","qualname":"::ir::instructions::Opcode::AdjustSpDown","value":"Opcode::AdjustSpDown","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `adjust_sp_down delta`. (Unary)\n Type inferred from `delta`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6717},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773530,"byte_end":10773543,"line_start":1607,"line_end":1607,"column_start":5,"column_end":18},"name":"AdjustSpUpImm","qualname":"::ir::instructions::Opcode::AdjustSpUpImm","value":"Opcode::AdjustSpUpImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `adjust_sp_up_imm Offset`. (UnaryImm)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6719},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773597,"byte_end":10773612,"line_start":1609,"line_end":1609,"column_start":5,"column_end":20},"name":"AdjustSpDownImm","qualname":"::ir::instructions::Opcode::AdjustSpDownImm","value":"Opcode::AdjustSpDownImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `adjust_sp_down_imm Offset`. (UnaryImm)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6721},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773690,"byte_end":10773697,"line_start":1612,"line_end":1612,"column_start":5,"column_end":12},"name":"IfcmpSp","qualname":"::ir::instructions::Opcode::IfcmpSp","value":"Opcode::IfcmpSp","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `f = ifcmp_sp addr`. (Unary)\n Type inferred from `addr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6723},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773777,"byte_end":10773785,"line_start":1615,"line_end":1615,"column_start":5,"column_end":13},"name":"Regspill","qualname":"::ir::instructions::Opcode::Regspill","value":"Opcode::Regspill","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `regspill x, src, SS`. (RegSpill)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6725},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773863,"byte_end":10773870,"line_start":1618,"line_end":1618,"column_start":5,"column_end":12},"name":"Regfill","qualname":"::ir::instructions::Opcode::Regfill","value":"Opcode::Regfill","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `regfill x, SS, dst`. (RegFill)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6727},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773913,"byte_end":10773922,"line_start":1620,"line_end":1620,"column_start":5,"column_end":14},"name":"Safepoint","qualname":"::ir::instructions::Opcode::Safepoint","value":"Opcode::Safepoint","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `safepoint args`. (MultiAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6729},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10773997,"byte_end":10774003,"line_start":1623,"line_end":1623,"column_start":5,"column_end":11},"name":"Vsplit","qualname":"::ir::instructions::Opcode::Vsplit","value":"Opcode::Vsplit","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `lo, hi = vsplit x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6731},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774078,"byte_end":10774085,"line_start":1626,"line_end":1626,"column_start":5,"column_end":12},"name":"Vconcat","qualname":"::ir::instructions::Opcode::Vconcat","value":"Opcode::Vconcat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = vconcat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6733},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774164,"byte_end":10774171,"line_start":1629,"line_end":1629,"column_start":5,"column_end":12},"name":"Vselect","qualname":"::ir::instructions::Opcode::Vselect","value":"Opcode::Vselect","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = vselect c, x, y`. (Ternary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6735},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774244,"byte_end":10774252,"line_start":1632,"line_end":1632,"column_start":5,"column_end":13},"name":"VanyTrue","qualname":"::ir::instructions::Opcode::VanyTrue","value":"Opcode::VanyTrue","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `s = vany_true a`. (Unary)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6737},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774325,"byte_end":10774333,"line_start":1635,"line_end":1635,"column_start":5,"column_end":13},"name":"VallTrue","qualname":"::ir::instructions::Opcode::VallTrue","value":"Opcode::VallTrue","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `s = vall_true a`. (Unary)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6739},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774370,"byte_end":10774375,"line_start":1637,"line_end":1637,"column_start":5,"column_end":10},"name":"Splat","qualname":"::ir::instructions::Opcode::Splat","value":"Opcode::Splat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = splat x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6741},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774462,"byte_end":10774472,"line_start":1640,"line_end":1640,"column_start":5,"column_end":15},"name":"Insertlane","qualname":"::ir::instructions::Opcode::Insertlane","value":"Opcode::Insertlane","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = insertlane x, Idx, y`. (InsertLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6743},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774558,"byte_end":10774569,"line_start":1643,"line_end":1643,"column_start":5,"column_end":16},"name":"Extractlane","qualname":"::ir::instructions::Opcode::Extractlane","value":"Opcode::Extractlane","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = extractlane x, Idx`. (ExtractLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6745},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774651,"byte_end":10774655,"line_start":1646,"line_end":1646,"column_start":5,"column_end":9},"name":"Icmp","qualname":"::ir::instructions::Opcode::Icmp","value":"Opcode::Icmp","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = icmp Cond, x, y`. (IntCompare)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6747},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774744,"byte_end":10774751,"line_start":1649,"line_end":1649,"column_start":5,"column_end":12},"name":"IcmpImm","qualname":"::ir::instructions::Opcode::IcmpImm","value":"Opcode::IcmpImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = icmp_imm Cond, x, Y`. (IntCompareImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6749},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774824,"byte_end":10774829,"line_start":1652,"line_end":1652,"column_start":5,"column_end":10},"name":"Ifcmp","qualname":"::ir::instructions::Opcode::Ifcmp","value":"Opcode::Ifcmp","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `f = ifcmp x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6751},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774909,"byte_end":10774917,"line_start":1655,"line_end":1655,"column_start":5,"column_end":13},"name":"IfcmpImm","qualname":"::ir::instructions::Opcode::IfcmpImm","value":"Opcode::IfcmpImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `f = ifcmp_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6753},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10774989,"byte_end":10774993,"line_start":1658,"line_end":1658,"column_start":5,"column_end":9},"name":"Iadd","qualname":"::ir::instructions::Opcode::Iadd","value":"Opcode::Iadd","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = iadd x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6755},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775069,"byte_end":10775076,"line_start":1661,"line_end":1661,"column_start":5,"column_end":12},"name":"UaddSat","qualname":"::ir::instructions::Opcode::UaddSat","value":"Opcode::UaddSat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uadd_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6757},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775152,"byte_end":10775159,"line_start":1664,"line_end":1664,"column_start":5,"column_end":12},"name":"SaddSat","qualname":"::ir::instructions::Opcode::SaddSat","value":"Opcode::SaddSat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sadd_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6759},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775231,"byte_end":10775235,"line_start":1667,"line_end":1667,"column_start":5,"column_end":9},"name":"Isub","qualname":"::ir::instructions::Opcode::Isub","value":"Opcode::Isub","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = isub x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6761},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775311,"byte_end":10775318,"line_start":1670,"line_end":1670,"column_start":5,"column_end":12},"name":"UsubSat","qualname":"::ir::instructions::Opcode::UsubSat","value":"Opcode::UsubSat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = usub_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6763},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775394,"byte_end":10775401,"line_start":1673,"line_end":1673,"column_start":5,"column_end":12},"name":"SsubSat","qualname":"::ir::instructions::Opcode::SsubSat","value":"Opcode::SsubSat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ssub_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6765},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775469,"byte_end":10775473,"line_start":1676,"line_end":1676,"column_start":5,"column_end":9},"name":"Ineg","qualname":"::ir::instructions::Opcode::Ineg","value":"Opcode::Ineg","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ineg x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6767},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775545,"byte_end":10775549,"line_start":1679,"line_end":1679,"column_start":5,"column_end":9},"name":"Imul","qualname":"::ir::instructions::Opcode::Imul","value":"Opcode::Imul","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = imul x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6769},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775623,"byte_end":10775629,"line_start":1682,"line_end":1682,"column_start":5,"column_end":11},"name":"Umulhi","qualname":"::ir::instructions::Opcode::Umulhi","value":"Opcode::Umulhi","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = umulhi x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6771},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775703,"byte_end":10775709,"line_start":1685,"line_end":1685,"column_start":5,"column_end":11},"name":"Smulhi","qualname":"::ir::instructions::Opcode::Smulhi","value":"Opcode::Smulhi","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = smulhi x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6773},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775781,"byte_end":10775785,"line_start":1688,"line_end":1688,"column_start":5,"column_end":9},"name":"Udiv","qualname":"::ir::instructions::Opcode::Udiv","value":"Opcode::Udiv","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = udiv x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6775},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775857,"byte_end":10775861,"line_start":1691,"line_end":1691,"column_start":5,"column_end":9},"name":"Sdiv","qualname":"::ir::instructions::Opcode::Sdiv","value":"Opcode::Sdiv","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sdiv x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6777},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10775933,"byte_end":10775937,"line_start":1694,"line_end":1694,"column_start":5,"column_end":9},"name":"Urem","qualname":"::ir::instructions::Opcode::Urem","value":"Opcode::Urem","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = urem x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6779},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776009,"byte_end":10776013,"line_start":1697,"line_end":1697,"column_start":5,"column_end":9},"name":"Srem","qualname":"::ir::instructions::Opcode::Srem","value":"Opcode::Srem","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = srem x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6781},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776092,"byte_end":10776099,"line_start":1700,"line_end":1700,"column_start":5,"column_end":12},"name":"IaddImm","qualname":"::ir::instructions::Opcode::IaddImm","value":"Opcode::IaddImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = iadd_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6783},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776178,"byte_end":10776185,"line_start":1703,"line_end":1703,"column_start":5,"column_end":12},"name":"ImulImm","qualname":"::ir::instructions::Opcode::ImulImm","value":"Opcode::ImulImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = imul_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6785},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776264,"byte_end":10776271,"line_start":1706,"line_end":1706,"column_start":5,"column_end":12},"name":"UdivImm","qualname":"::ir::instructions::Opcode::UdivImm","value":"Opcode::UdivImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = udiv_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6787},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776350,"byte_end":10776357,"line_start":1709,"line_end":1709,"column_start":5,"column_end":12},"name":"SdivImm","qualname":"::ir::instructions::Opcode::SdivImm","value":"Opcode::SdivImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sdiv_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6789},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776436,"byte_end":10776443,"line_start":1712,"line_end":1712,"column_start":5,"column_end":12},"name":"UremImm","qualname":"::ir::instructions::Opcode::UremImm","value":"Opcode::UremImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = urem_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6791},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776522,"byte_end":10776529,"line_start":1715,"line_end":1715,"column_start":5,"column_end":12},"name":"SremImm","qualname":"::ir::instructions::Opcode::SremImm","value":"Opcode::SremImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = srem_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6793},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776609,"byte_end":10776617,"line_start":1718,"line_end":1718,"column_start":5,"column_end":13},"name":"IrsubImm","qualname":"::ir::instructions::Opcode::IrsubImm","value":"Opcode::IrsubImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = irsub_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6795},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776700,"byte_end":10776707,"line_start":1721,"line_end":1721,"column_start":5,"column_end":12},"name":"IaddCin","qualname":"::ir::instructions::Opcode::IaddCin","value":"Opcode::IaddCin","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = iadd_cin x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6797},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776792,"byte_end":10776801,"line_start":1724,"line_end":1724,"column_start":5,"column_end":14},"name":"IaddIfcin","qualname":"::ir::instructions::Opcode::IaddIfcin","value":"Opcode::IaddIfcin","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = iadd_ifcin x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6799},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776885,"byte_end":10776893,"line_start":1727,"line_end":1727,"column_start":5,"column_end":13},"name":"IaddCout","qualname":"::ir::instructions::Opcode::IaddCout","value":"Opcode::IaddCout","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_cout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6801},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10776979,"byte_end":10776989,"line_start":1730,"line_end":1730,"column_start":5,"column_end":15},"name":"IaddIfcout","qualname":"::ir::instructions::Opcode::IaddIfcout","value":"Opcode::IaddIfcout","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_ifcout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6803},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777081,"byte_end":10777090,"line_start":1733,"line_end":1733,"column_start":5,"column_end":14},"name":"IaddCarry","qualname":"::ir::instructions::Opcode::IaddCarry","value":"Opcode::IaddCarry","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_carry x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6805},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777184,"byte_end":10777195,"line_start":1736,"line_end":1736,"column_start":5,"column_end":16},"name":"IaddIfcarry","qualname":"::ir::instructions::Opcode::IaddIfcarry","value":"Opcode::IaddIfcarry","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_ifcarry x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6807},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777278,"byte_end":10777285,"line_start":1739,"line_end":1739,"column_start":5,"column_end":12},"name":"IsubBin","qualname":"::ir::instructions::Opcode::IsubBin","value":"Opcode::IsubBin","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = isub_bin x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6809},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777370,"byte_end":10777379,"line_start":1742,"line_end":1742,"column_start":5,"column_end":14},"name":"IsubIfbin","qualname":"::ir::instructions::Opcode::IsubIfbin","value":"Opcode::IsubIfbin","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = isub_ifbin x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6811},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777463,"byte_end":10777471,"line_start":1745,"line_end":1745,"column_start":5,"column_end":13},"name":"IsubBout","qualname":"::ir::instructions::Opcode::IsubBout","value":"Opcode::IsubBout","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, b_out = isub_bout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6813},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777557,"byte_end":10777567,"line_start":1748,"line_end":1748,"column_start":5,"column_end":15},"name":"IsubIfbout","qualname":"::ir::instructions::Opcode::IsubIfbout","value":"Opcode::IsubIfbout","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, b_out = isub_ifbout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6815},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777660,"byte_end":10777670,"line_start":1751,"line_end":1751,"column_start":5,"column_end":15},"name":"IsubBorrow","qualname":"::ir::instructions::Opcode::IsubBorrow","value":"Opcode::IsubBorrow","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, b_out = isub_borrow x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6817},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777765,"byte_end":10777777,"line_start":1754,"line_end":1754,"column_start":5,"column_end":17},"name":"IsubIfborrow","qualname":"::ir::instructions::Opcode::IsubIfborrow","value":"Opcode::IsubIfborrow","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a, b_out = isub_ifborrow x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6819},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777849,"byte_end":10777853,"line_start":1757,"line_end":1757,"column_start":5,"column_end":9},"name":"Band","qualname":"::ir::instructions::Opcode::Band","value":"Opcode::Band","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = band x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6821},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777924,"byte_end":10777927,"line_start":1760,"line_end":1760,"column_start":5,"column_end":8},"name":"Bor","qualname":"::ir::instructions::Opcode::Bor","value":"Opcode::Bor","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bor x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6823},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10777999,"byte_end":10778003,"line_start":1763,"line_end":1763,"column_start":5,"column_end":9},"name":"Bxor","qualname":"::ir::instructions::Opcode::Bxor","value":"Opcode::Bxor","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bxor x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6825},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778071,"byte_end":10778075,"line_start":1766,"line_end":1766,"column_start":5,"column_end":9},"name":"Bnot","qualname":"::ir::instructions::Opcode::Bnot","value":"Opcode::Bnot","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bnot x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6827},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778151,"byte_end":10778158,"line_start":1769,"line_end":1769,"column_start":5,"column_end":12},"name":"BandNot","qualname":"::ir::instructions::Opcode::BandNot","value":"Opcode::BandNot","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = band_not x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6829},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778233,"byte_end":10778239,"line_start":1772,"line_end":1772,"column_start":5,"column_end":11},"name":"BorNot","qualname":"::ir::instructions::Opcode::BorNot","value":"Opcode::BorNot","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bor_not x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6831},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778315,"byte_end":10778322,"line_start":1775,"line_end":1775,"column_start":5,"column_end":12},"name":"BxorNot","qualname":"::ir::instructions::Opcode::BxorNot","value":"Opcode::BxorNot","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bxor_not x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6833},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778401,"byte_end":10778408,"line_start":1778,"line_end":1778,"column_start":5,"column_end":12},"name":"BandImm","qualname":"::ir::instructions::Opcode::BandImm","value":"Opcode::BandImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = band_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6835},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778486,"byte_end":10778492,"line_start":1781,"line_end":1781,"column_start":5,"column_end":11},"name":"BorImm","qualname":"::ir::instructions::Opcode::BorImm","value":"Opcode::BorImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bor_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6837},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778571,"byte_end":10778578,"line_start":1784,"line_end":1784,"column_start":5,"column_end":12},"name":"BxorImm","qualname":"::ir::instructions::Opcode::BxorImm","value":"Opcode::BxorImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bxor_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6839},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778650,"byte_end":10778654,"line_start":1787,"line_end":1787,"column_start":5,"column_end":9},"name":"Rotl","qualname":"::ir::instructions::Opcode::Rotl","value":"Opcode::Rotl","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = rotl x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6841},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778726,"byte_end":10778730,"line_start":1790,"line_end":1790,"column_start":5,"column_end":9},"name":"Rotr","qualname":"::ir::instructions::Opcode::Rotr","value":"Opcode::Rotr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = rotr x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6843},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778809,"byte_end":10778816,"line_start":1793,"line_end":1793,"column_start":5,"column_end":12},"name":"RotlImm","qualname":"::ir::instructions::Opcode::RotlImm","value":"Opcode::RotlImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = rotl_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6845},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778895,"byte_end":10778902,"line_start":1796,"line_end":1796,"column_start":5,"column_end":12},"name":"RotrImm","qualname":"::ir::instructions::Opcode::RotrImm","value":"Opcode::RotrImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = rotr_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6847},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10778974,"byte_end":10778978,"line_start":1799,"line_end":1799,"column_start":5,"column_end":9},"name":"Ishl","qualname":"::ir::instructions::Opcode::Ishl","value":"Opcode::Ishl","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ishl x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6849},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779050,"byte_end":10779054,"line_start":1802,"line_end":1802,"column_start":5,"column_end":9},"name":"Ushr","qualname":"::ir::instructions::Opcode::Ushr","value":"Opcode::Ushr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ushr x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6851},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779126,"byte_end":10779130,"line_start":1805,"line_end":1805,"column_start":5,"column_end":9},"name":"Sshr","qualname":"::ir::instructions::Opcode::Sshr","value":"Opcode::Sshr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sshr x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6853},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779209,"byte_end":10779216,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12},"name":"IshlImm","qualname":"::ir::instructions::Opcode::IshlImm","value":"Opcode::IshlImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ishl_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6855},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779295,"byte_end":10779302,"line_start":1811,"line_end":1811,"column_start":5,"column_end":12},"name":"UshrImm","qualname":"::ir::instructions::Opcode::UshrImm","value":"Opcode::UshrImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ushr_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6857},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779381,"byte_end":10779388,"line_start":1814,"line_end":1814,"column_start":5,"column_end":12},"name":"SshrImm","qualname":"::ir::instructions::Opcode::SshrImm","value":"Opcode::SshrImm","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sshr_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6859},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779458,"byte_end":10779464,"line_start":1817,"line_end":1817,"column_start":5,"column_end":11},"name":"Bitrev","qualname":"::ir::instructions::Opcode::Bitrev","value":"Opcode::Bitrev","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bitrev x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6861},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779531,"byte_end":10779534,"line_start":1820,"line_end":1820,"column_start":5,"column_end":8},"name":"Clz","qualname":"::ir::instructions::Opcode::Clz","value":"Opcode::Clz","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = clz x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6863},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779601,"byte_end":10779604,"line_start":1823,"line_end":1823,"column_start":5,"column_end":8},"name":"Cls","qualname":"::ir::instructions::Opcode::Cls","value":"Opcode::Cls","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = cls x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6865},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779671,"byte_end":10779674,"line_start":1826,"line_end":1826,"column_start":5,"column_end":8},"name":"Ctz","qualname":"::ir::instructions::Opcode::Ctz","value":"Opcode::Ctz","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ctz x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6867},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779744,"byte_end":10779750,"line_start":1829,"line_end":1829,"column_start":5,"column_end":11},"name":"Popcnt","qualname":"::ir::instructions::Opcode::Popcnt","value":"Opcode::Popcnt","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = popcnt x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6869},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779834,"byte_end":10779838,"line_start":1832,"line_end":1832,"column_start":5,"column_end":9},"name":"Fcmp","qualname":"::ir::instructions::Opcode::Fcmp","value":"Opcode::Fcmp","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcmp Cond, x, y`. (FloatCompare)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6871},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779911,"byte_end":10779916,"line_start":1835,"line_end":1835,"column_start":5,"column_end":10},"name":"Ffcmp","qualname":"::ir::instructions::Opcode::Ffcmp","value":"Opcode::Ffcmp","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `f = ffcmp x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6873},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10779988,"byte_end":10779992,"line_start":1838,"line_end":1838,"column_start":5,"column_end":9},"name":"Fadd","qualname":"::ir::instructions::Opcode::Fadd","value":"Opcode::Fadd","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fadd x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6875},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780064,"byte_end":10780068,"line_start":1841,"line_end":1841,"column_start":5,"column_end":9},"name":"Fsub","qualname":"::ir::instructions::Opcode::Fsub","value":"Opcode::Fsub","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fsub x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6877},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780140,"byte_end":10780144,"line_start":1844,"line_end":1844,"column_start":5,"column_end":9},"name":"Fmul","qualname":"::ir::instructions::Opcode::Fmul","value":"Opcode::Fmul","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fmul x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6879},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780216,"byte_end":10780220,"line_start":1847,"line_end":1847,"column_start":5,"column_end":9},"name":"Fdiv","qualname":"::ir::instructions::Opcode::Fdiv","value":"Opcode::Fdiv","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fdiv x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6881},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780288,"byte_end":10780292,"line_start":1850,"line_end":1850,"column_start":5,"column_end":9},"name":"Sqrt","qualname":"::ir::instructions::Opcode::Sqrt","value":"Opcode::Sqrt","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sqrt x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6883},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780367,"byte_end":10780370,"line_start":1853,"line_end":1853,"column_start":5,"column_end":8},"name":"Fma","qualname":"::ir::instructions::Opcode::Fma","value":"Opcode::Fma","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fma x, y, z`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6885},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780438,"byte_end":10780442,"line_start":1856,"line_end":1856,"column_start":5,"column_end":9},"name":"Fneg","qualname":"::ir::instructions::Opcode::Fneg","value":"Opcode::Fneg","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fneg x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6887},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780510,"byte_end":10780514,"line_start":1859,"line_end":1859,"column_start":5,"column_end":9},"name":"Fabs","qualname":"::ir::instructions::Opcode::Fabs","value":"Opcode::Fabs","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fabs x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6889},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780591,"byte_end":10780600,"line_start":1862,"line_end":1862,"column_start":5,"column_end":14},"name":"Fcopysign","qualname":"::ir::instructions::Opcode::Fcopysign","value":"Opcode::Fcopysign","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcopysign x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6891},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780672,"byte_end":10780676,"line_start":1865,"line_end":1865,"column_start":5,"column_end":9},"name":"Fmin","qualname":"::ir::instructions::Opcode::Fmin","value":"Opcode::Fmin","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fmin x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6893},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780748,"byte_end":10780752,"line_start":1868,"line_end":1868,"column_start":5,"column_end":9},"name":"Fmax","qualname":"::ir::instructions::Opcode::Fmax","value":"Opcode::Fmax","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fmax x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6895},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780820,"byte_end":10780824,"line_start":1871,"line_end":1871,"column_start":5,"column_end":9},"name":"Ceil","qualname":"::ir::instructions::Opcode::Ceil","value":"Opcode::Ceil","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ceil x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6897},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780893,"byte_end":10780898,"line_start":1874,"line_end":1874,"column_start":5,"column_end":10},"name":"Floor","qualname":"::ir::instructions::Opcode::Floor","value":"Opcode::Floor","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = floor x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6899},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10780967,"byte_end":10780972,"line_start":1877,"line_end":1877,"column_start":5,"column_end":10},"name":"Trunc","qualname":"::ir::instructions::Opcode::Trunc","value":"Opcode::Trunc","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = trunc x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6901},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781043,"byte_end":10781050,"line_start":1880,"line_end":1880,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::ir::instructions::Opcode::Nearest","value":"Opcode::Nearest","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = nearest x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6903},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781121,"byte_end":10781127,"line_start":1883,"line_end":1883,"column_start":5,"column_end":11},"name":"IsNull","qualname":"::ir::instructions::Opcode::IsNull","value":"Opcode::IsNull","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = is_null x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6905},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781173,"byte_end":10781179,"line_start":1885,"line_end":1885,"column_start":5,"column_end":11},"name":"Trueif","qualname":"::ir::instructions::Opcode::Trueif","value":"Opcode::Trueif","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = trueif Cond, f`. (IntCond)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6907},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781227,"byte_end":10781233,"line_start":1887,"line_end":1887,"column_start":5,"column_end":11},"name":"Trueff","qualname":"::ir::instructions::Opcode::Trueff","value":"Opcode::Trueff","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = trueff Cond, f`. (FloatCond)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6909},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781272,"byte_end":10781279,"line_start":1889,"line_end":1889,"column_start":5,"column_end":12},"name":"Bitcast","qualname":"::ir::instructions::Opcode::Bitcast","value":"Opcode::Bitcast","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bitcast x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6911},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781322,"byte_end":10781332,"line_start":1891,"line_end":1891,"column_start":5,"column_end":15},"name":"RawBitcast","qualname":"::ir::instructions::Opcode::RawBitcast","value":"Opcode::RawBitcast","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = raw_bitcast x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6913},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781380,"byte_end":10781394,"line_start":1893,"line_end":1893,"column_start":5,"column_end":19},"name":"ScalarToVector","qualname":"::ir::instructions::Opcode::ScalarToVector","value":"Opcode::ScalarToVector","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = scalar_to_vector s`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6915},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781433,"byte_end":10781440,"line_start":1895,"line_end":1895,"column_start":5,"column_end":12},"name":"Breduce","qualname":"::ir::instructions::Opcode::Breduce","value":"Opcode::Breduce","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = breduce x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6917},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781479,"byte_end":10781486,"line_start":1897,"line_end":1897,"column_start":5,"column_end":12},"name":"Bextend","qualname":"::ir::instructions::Opcode::Bextend","value":"Opcode::Bextend","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bextend x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6919},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781522,"byte_end":10781526,"line_start":1899,"line_end":1899,"column_start":5,"column_end":9},"name":"Bint","qualname":"::ir::instructions::Opcode::Bint","value":"Opcode::Bint","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6921},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781563,"byte_end":10781568,"line_start":1901,"line_end":1901,"column_start":5,"column_end":10},"name":"Bmask","qualname":"::ir::instructions::Opcode::Bmask","value":"Opcode::Bmask","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = bmask x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6923},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781607,"byte_end":10781614,"line_start":1903,"line_end":1903,"column_start":5,"column_end":12},"name":"Ireduce","qualname":"::ir::instructions::Opcode::Ireduce","value":"Opcode::Ireduce","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = ireduce x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6925},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781653,"byte_end":10781660,"line_start":1905,"line_end":1905,"column_start":5,"column_end":12},"name":"Uextend","qualname":"::ir::instructions::Opcode::Uextend","value":"Opcode::Uextend","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = uextend x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6927},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781699,"byte_end":10781706,"line_start":1907,"line_end":1907,"column_start":5,"column_end":12},"name":"Sextend","qualname":"::ir::instructions::Opcode::Sextend","value":"Opcode::Sextend","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = sextend x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6929},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781746,"byte_end":10781754,"line_start":1909,"line_end":1909,"column_start":5,"column_end":13},"name":"Fpromote","qualname":"::ir::instructions::Opcode::Fpromote","value":"Opcode::Fpromote","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fpromote x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6931},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781793,"byte_end":10781800,"line_start":1911,"line_end":1911,"column_start":5,"column_end":12},"name":"Fdemote","qualname":"::ir::instructions::Opcode::Fdemote","value":"Opcode::Fdemote","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fdemote x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6933},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781844,"byte_end":10781854,"line_start":1913,"line_end":1913,"column_start":5,"column_end":15},"name":"FcvtToUint","qualname":"::ir::instructions::Opcode::FcvtToUint","value":"Opcode::FcvtToUint","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcvt_to_uint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6935},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781902,"byte_end":10781915,"line_start":1915,"line_end":1915,"column_start":5,"column_end":18},"name":"FcvtToUintSat","qualname":"::ir::instructions::Opcode::FcvtToUintSat","value":"Opcode::FcvtToUintSat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcvt_to_uint_sat x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6937},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10781959,"byte_end":10781969,"line_start":1917,"line_end":1917,"column_start":5,"column_end":15},"name":"FcvtToSint","qualname":"::ir::instructions::Opcode::FcvtToSint","value":"Opcode::FcvtToSint","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcvt_to_sint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6939},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782017,"byte_end":10782030,"line_start":1919,"line_end":1919,"column_start":5,"column_end":18},"name":"FcvtToSintSat","qualname":"::ir::instructions::Opcode::FcvtToSintSat","value":"Opcode::FcvtToSintSat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcvt_to_sint_sat x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6941},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782076,"byte_end":10782088,"line_start":1921,"line_end":1921,"column_start":5,"column_end":17},"name":"FcvtFromUint","qualname":"::ir::instructions::Opcode::FcvtFromUint","value":"Opcode::FcvtFromUint","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcvt_from_uint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6943},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782134,"byte_end":10782146,"line_start":1923,"line_end":1923,"column_start":5,"column_end":17},"name":"FcvtFromSint","qualname":"::ir::instructions::Opcode::FcvtFromSint","value":"Opcode::FcvtFromSint","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = fcvt_from_sint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6945},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782221,"byte_end":10782227,"line_start":1926,"line_end":1926,"column_start":5,"column_end":11},"name":"Isplit","qualname":"::ir::instructions::Opcode::Isplit","value":"Opcode::Isplit","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `lo, hi = isplit x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6947},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782305,"byte_end":10782312,"line_start":1929,"line_end":1929,"column_start":5,"column_end":12},"name":"Iconcat","qualname":"::ir::instructions::Opcode::Iconcat","value":"Opcode::Iconcat","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = iconcat lo, hi`. (Binary)\n Type inferred from `lo`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6949},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782405,"byte_end":10782416,"line_start":1932,"line_end":1932,"column_start":5,"column_end":16},"name":"X86Udivmodx","qualname":"::ir::instructions::Opcode::X86Udivmodx","value":"Opcode::X86Udivmodx","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `q, r = x86_udivmodx nlo, nhi, d`. (Ternary)\n Type inferred from `nhi`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6951},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782509,"byte_end":10782520,"line_start":1935,"line_end":1935,"column_start":5,"column_end":16},"name":"X86Sdivmodx","qualname":"::ir::instructions::Opcode::X86Sdivmodx","value":"Opcode::X86Sdivmodx","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `q, r = x86_sdivmodx nlo, nhi, d`. (Ternary)\n Type inferred from `nhi`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6953},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782617,"byte_end":10782625,"line_start":1938,"line_end":1938,"column_start":5,"column_end":13},"name":"X86Umulx","qualname":"::ir::instructions::Opcode::X86Umulx","value":"Opcode::X86Umulx","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `resLo, resHi = x86_umulx argL, argR`. (Binary)\n Type inferred from `argL`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6955},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782722,"byte_end":10782730,"line_start":1941,"line_end":1941,"column_start":5,"column_end":13},"name":"X86Smulx","qualname":"::ir::instructions::Opcode::X86Smulx","value":"Opcode::X86Smulx","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `resLo, resHi = x86_smulx argL, argR`. (Binary)\n Type inferred from `argL`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6957},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782773,"byte_end":10782783,"line_start":1943,"line_end":1943,"column_start":5,"column_end":15},"name":"X86Cvtt2si","qualname":"::ir::instructions::Opcode::X86Cvtt2si","value":"Opcode::X86Cvtt2si","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_cvtt2si x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6959},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782859,"byte_end":10782866,"line_start":1946,"line_end":1946,"column_start":5,"column_end":12},"name":"X86Fmin","qualname":"::ir::instructions::Opcode::X86Fmin","value":"Opcode::X86Fmin","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_fmin x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6961},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10782942,"byte_end":10782949,"line_start":1949,"line_end":1949,"column_start":5,"column_end":12},"name":"X86Fmax","qualname":"::ir::instructions::Opcode::X86Fmax","value":"Opcode::X86Fmax","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_fmax x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6963},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783017,"byte_end":10783024,"line_start":1952,"line_end":1952,"column_start":5,"column_end":12},"name":"X86Push","qualname":"::ir::instructions::Opcode::X86Push","value":"Opcode::X86Push","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `x86_push x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6965},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783063,"byte_end":10783069,"line_start":1954,"line_end":1954,"column_start":5,"column_end":11},"name":"X86Pop","qualname":"::ir::instructions::Opcode::X86Pop","value":"Opcode::X86Pop","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `x = x86_pop`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6967},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783148,"byte_end":10783154,"line_start":1957,"line_end":1957,"column_start":5,"column_end":11},"name":"X86Bsr","qualname":"::ir::instructions::Opcode::X86Bsr","value":"Opcode::X86Bsr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `y, rflags = x86_bsr x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6969},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783233,"byte_end":10783239,"line_start":1960,"line_end":1960,"column_start":5,"column_end":11},"name":"X86Bsf","qualname":"::ir::instructions::Opcode::X86Bsf","value":"Opcode::X86Bsf","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `y, rflags = x86_bsf x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6971},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783322,"byte_end":10783331,"line_start":1963,"line_end":1963,"column_start":5,"column_end":14},"name":"X86Pshufd","qualname":"::ir::instructions::Opcode::X86Pshufd","value":"Opcode::X86Pshufd","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pshufd a, i`. (ExtractLane)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6973},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783409,"byte_end":10783418,"line_start":1966,"line_end":1966,"column_start":5,"column_end":14},"name":"X86Pshufb","qualname":"::ir::instructions::Opcode::X86Pshufb","value":"Opcode::X86Pshufb","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pshufb a, b`. (Binary)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6975},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783502,"byte_end":10783510,"line_start":1969,"line_end":1969,"column_start":5,"column_end":13},"name":"X86Pextr","qualname":"::ir::instructions::Opcode::X86Pextr","value":"Opcode::X86Pextr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pextr x, Idx`. (ExtractLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6977},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783596,"byte_end":10783604,"line_start":1972,"line_end":1972,"column_start":5,"column_end":13},"name":"X86Pinsr","qualname":"::ir::instructions::Opcode::X86Pinsr","value":"Opcode::X86Pinsr","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pinsr x, Idx, y`. (InsertLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6979},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783693,"byte_end":10783704,"line_start":1975,"line_end":1975,"column_start":5,"column_end":16},"name":"X86Insertps","qualname":"::ir::instructions::Opcode::X86Insertps","value":"Opcode::X86Insertps","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_insertps x, Idx, y`. (InsertLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6981},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783781,"byte_end":10783789,"line_start":1978,"line_end":1978,"column_start":5,"column_end":13},"name":"X86Movsd","qualname":"::ir::instructions::Opcode::X86Movsd","value":"Opcode::X86Movsd","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_movsd x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6983},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783868,"byte_end":10783878,"line_start":1981,"line_end":1981,"column_start":5,"column_end":15},"name":"X86Movlhps","qualname":"::ir::instructions::Opcode::X86Movlhps","value":"Opcode::X86Movlhps","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_movlhps x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6985},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10783954,"byte_end":10783961,"line_start":1984,"line_end":1984,"column_start":5,"column_end":12},"name":"X86Psll","qualname":"::ir::instructions::Opcode::X86Psll","value":"Opcode::X86Psll","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_psll x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6987},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784037,"byte_end":10784044,"line_start":1987,"line_end":1987,"column_start":5,"column_end":12},"name":"X86Psrl","qualname":"::ir::instructions::Opcode::X86Psrl","value":"Opcode::X86Psrl","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_psrl x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6989},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784120,"byte_end":10784127,"line_start":1990,"line_end":1990,"column_start":5,"column_end":12},"name":"X86Psra","qualname":"::ir::instructions::Opcode::X86Psra","value":"Opcode::X86Psra","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_psra x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6991},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784204,"byte_end":10784212,"line_start":1993,"line_end":1993,"column_start":5,"column_end":13},"name":"X86Ptest","qualname":"::ir::instructions::Opcode::X86Ptest","value":"Opcode::X86Ptest","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `f = x86_ptest x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6993},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784289,"byte_end":10784297,"line_start":1996,"line_end":1996,"column_start":5,"column_end":13},"name":"X86Pmaxs","qualname":"::ir::instructions::Opcode::X86Pmaxs","value":"Opcode::X86Pmaxs","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pmaxs x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6995},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784374,"byte_end":10784382,"line_start":1999,"line_end":1999,"column_start":5,"column_end":13},"name":"X86Pmaxu","qualname":"::ir::instructions::Opcode::X86Pmaxu","value":"Opcode::X86Pmaxu","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pmaxu x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6997},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784459,"byte_end":10784467,"line_start":2002,"line_end":2002,"column_start":5,"column_end":13},"name":"X86Pmins","qualname":"::ir::instructions::Opcode::X86Pmins","value":"Opcode::X86Pmins","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pmins x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6999},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784544,"byte_end":10784552,"line_start":2005,"line_end":2005,"column_start":5,"column_end":13},"name":"X86Pminu","qualname":"::ir::instructions::Opcode::X86Pminu","value":"Opcode::X86Pminu","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" `a = x86_pminu x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6567},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10767914,"byte_end":10767920,"line_start":1427,"line_end":1427,"column_start":10,"column_end":16},"name":"Opcode","qualname":"::ir::instructions::Opcode","value":"Opcode::{Jump, Fallthrough, Brz, Brnz, BrIcmp, Brif, Brff, BrTable, JumpTableEntry, JumpTableBase, IndirectJumpTableBr, Debugtrap, Trap, Trapz, ResumableTrap, Trapnz, Trapif, Trapff, Return, FallthroughReturn, Call, CallIndirect, FuncAddr, Load, LoadComplex, Store, StoreComplex, Uload8, Uload8Complex, Sload8, Sload8Complex, Istore8, Istore8Complex, Uload16, Uload16Complex, Sload16, Sload16Complex, Istore16, Istore16Complex, Uload32, Uload32Complex, Sload32, Sload32Complex, Istore32, Istore32Complex, StackLoad, StackStore, StackAddr, GlobalValue, SymbolValue, HeapAddr, GetPinnedReg, SetPinnedReg, TableAddr, Iconst, F32const, F64const, Bconst, Vconst, Shuffle, Null, Nop, Select, Selectif, Bitselect, Copy, Spill, Fill, FillNop, Regmove, CopySpecial, CopyToSsa, CopyNop, AdjustSpDown, AdjustSpUpImm, AdjustSpDownImm, IfcmpSp, Regspill, Regfill, Safepoint, Vsplit, Vconcat, Vselect, VanyTrue, VallTrue, Splat, Insertlane, Extractlane, Icmp, IcmpImm, Ifcmp, IfcmpImm, Iadd, UaddSat, SaddSat, Isub, UsubSat, SsubSat, Ineg, Imul, Umulhi, Smulhi, Udiv, Sdiv, Urem, Srem, IaddImm, ImulImm, UdivImm, SdivImm, UremImm, SremImm, IrsubImm, IaddCin, IaddIfcin, IaddCout, IaddIfcout, IaddCarry, IaddIfcarry, IsubBin, IsubIfbin, IsubBout, IsubIfbout, IsubBorrow, IsubIfborrow, Band, Bor, Bxor, Bnot, BandNot, BorNot, BxorNot, BandImm, BorImm, BxorImm, Rotl, Rotr, RotlImm, RotrImm, Ishl, Ushr, Sshr, IshlImm, UshrImm, SshrImm, Bitrev, Clz, Cls, Ctz, Popcnt, Fcmp, Ffcmp, Fadd, Fsub, Fmul, Fdiv, Sqrt, Fma, Fneg, Fabs, Fcopysign, Fmin, Fmax, Ceil, Floor, Trunc, Nearest, IsNull, Trueif, Trueff, Bitcast, RawBitcast, ScalarToVector, Breduce, Bextend, Bint, Bmask, Ireduce, Uextend, Sextend, Fpromote, Fdemote, FcvtToUint, FcvtToUintSat, FcvtToSint, FcvtToSintSat, FcvtFromUint, FcvtFromSint, Isplit, Iconcat, X86Udivmodx, X86Sdivmodx, X86Umulx, X86Smulx, X86Cvtt2si, X86Fmin, X86Fmax, X86Push, X86Pop, X86Bsr, X86Bsf, X86Pshufd, X86Pshufb, X86Pextr, X86Pinsr, X86Insertps, X86Movsd, X86Movlhps, X86Psll, X86Psrl, X86Psra, X86Ptest, X86Pmaxs, X86Pmaxu, X86Pmins, X86Pminu}","parent":null,"children":[{"krate":0,"index":6568},{"krate":0,"index":6571},{"krate":0,"index":6573},{"krate":0,"index":6575},{"krate":0,"index":6577},{"krate":0,"index":6579},{"krate":0,"index":6581},{"krate":0,"index":6583},{"krate":0,"index":6585},{"krate":0,"index":6587},{"krate":0,"index":6589},{"krate":0,"index":6591},{"krate":0,"index":6593},{"krate":0,"index":6595},{"krate":0,"index":6597},{"krate":0,"index":6599},{"krate":0,"index":6601},{"krate":0,"index":6603},{"krate":0,"index":6605},{"krate":0,"index":6607},{"krate":0,"index":6609},{"krate":0,"index":6611},{"krate":0,"index":6613},{"krate":0,"index":6615},{"krate":0,"index":6617},{"krate":0,"index":6619},{"krate":0,"index":6621},{"krate":0,"index":6623},{"krate":0,"index":6625},{"krate":0,"index":6627},{"krate":0,"index":6629},{"krate":0,"index":6631},{"krate":0,"index":6633},{"krate":0,"index":6635},{"krate":0,"index":6637},{"krate":0,"index":6639},{"krate":0,"index":6641},{"krate":0,"index":6643},{"krate":0,"index":6645},{"krate":0,"index":6647},{"krate":0,"index":6649},{"krate":0,"index":6651},{"krate":0,"index":6653},{"krate":0,"index":6655},{"krate":0,"index":6657},{"krate":0,"index":6659},{"krate":0,"index":6661},{"krate":0,"index":6663},{"krate":0,"index":6665},{"krate":0,"index":6667},{"krate":0,"index":6669},{"krate":0,"index":6671},{"krate":0,"index":6673},{"krate":0,"index":6675},{"krate":0,"index":6677},{"krate":0,"index":6679},{"krate":0,"index":6681},{"krate":0,"index":6683},{"krate":0,"index":6685},{"krate":0,"index":6687},{"krate":0,"index":6689},{"krate":0,"index":6691},{"krate":0,"index":6693},{"krate":0,"index":6695},{"krate":0,"index":6697},{"krate":0,"index":6699},{"krate":0,"index":6701},{"krate":0,"index":6703},{"krate":0,"index":6705},{"krate":0,"index":6707},{"krate":0,"index":6709},{"krate":0,"index":6711},{"krate":0,"index":6713},{"krate":0,"index":6715},{"krate":0,"index":6717},{"krate":0,"index":6719},{"krate":0,"index":6721},{"krate":0,"index":6723},{"krate":0,"index":6725},{"krate":0,"index":6727},{"krate":0,"index":6729},{"krate":0,"index":6731},{"krate":0,"index":6733},{"krate":0,"index":6735},{"krate":0,"index":6737},{"krate":0,"index":6739},{"krate":0,"index":6741},{"krate":0,"index":6743},{"krate":0,"index":6745},{"krate":0,"index":6747},{"krate":0,"index":6749},{"krate":0,"index":6751},{"krate":0,"index":6753},{"krate":0,"index":6755},{"krate":0,"index":6757},{"krate":0,"index":6759},{"krate":0,"index":6761},{"krate":0,"index":6763},{"krate":0,"index":6765},{"krate":0,"index":6767},{"krate":0,"index":6769},{"krate":0,"index":6771},{"krate":0,"index":6773},{"krate":0,"index":6775},{"krate":0,"index":6777},{"krate":0,"index":6779},{"krate":0,"index":6781},{"krate":0,"index":6783},{"krate":0,"index":6785},{"krate":0,"index":6787},{"krate":0,"index":6789},{"krate":0,"index":6791},{"krate":0,"index":6793},{"krate":0,"index":6795},{"krate":0,"index":6797},{"krate":0,"index":6799},{"krate":0,"index":6801},{"krate":0,"index":6803},{"krate":0,"index":6805},{"krate":0,"index":6807},{"krate":0,"index":6809},{"krate":0,"index":6811},{"krate":0,"index":6813},{"krate":0,"index":6815},{"krate":0,"index":6817},{"krate":0,"index":6819},{"krate":0,"index":6821},{"krate":0,"index":6823},{"krate":0,"index":6825},{"krate":0,"index":6827},{"krate":0,"index":6829},{"krate":0,"index":6831},{"krate":0,"index":6833},{"krate":0,"index":6835},{"krate":0,"index":6837},{"krate":0,"index":6839},{"krate":0,"index":6841},{"krate":0,"index":6843},{"krate":0,"index":6845},{"krate":0,"index":6847},{"krate":0,"index":6849},{"krate":0,"index":6851},{"krate":0,"index":6853},{"krate":0,"index":6855},{"krate":0,"index":6857},{"krate":0,"index":6859},{"krate":0,"index":6861},{"krate":0,"index":6863},{"krate":0,"index":6865},{"krate":0,"index":6867},{"krate":0,"index":6869},{"krate":0,"index":6871},{"krate":0,"index":6873},{"krate":0,"index":6875},{"krate":0,"index":6877},{"krate":0,"index":6879},{"krate":0,"index":6881},{"krate":0,"index":6883},{"krate":0,"index":6885},{"krate":0,"index":6887},{"krate":0,"index":6889},{"krate":0,"index":6891},{"krate":0,"index":6893},{"krate":0,"index":6895},{"krate":0,"index":6897},{"krate":0,"index":6899},{"krate":0,"index":6901},{"krate":0,"index":6903},{"krate":0,"index":6905},{"krate":0,"index":6907},{"krate":0,"index":6909},{"krate":0,"index":6911},{"krate":0,"index":6913},{"krate":0,"index":6915},{"krate":0,"index":6917},{"krate":0,"index":6919},{"krate":0,"index":6921},{"krate":0,"index":6923},{"krate":0,"index":6925},{"krate":0,"index":6927},{"krate":0,"index":6929},{"krate":0,"index":6931},{"krate":0,"index":6933},{"krate":0,"index":6935},{"krate":0,"index":6937},{"krate":0,"index":6939},{"krate":0,"index":6941},{"krate":0,"index":6943},{"krate":0,"index":6945},{"krate":0,"index":6947},{"krate":0,"index":6949},{"krate":0,"index":6951},{"krate":0,"index":6953},{"krate":0,"index":6955},{"krate":0,"index":6957},{"krate":0,"index":6959},{"krate":0,"index":6961},{"krate":0,"index":6963},{"krate":0,"index":6965},{"krate":0,"index":6967},{"krate":0,"index":6969},{"krate":0,"index":6971},{"krate":0,"index":6973},{"krate":0,"index":6975},{"krate":0,"index":6977},{"krate":0,"index":6979},{"krate":0,"index":6981},{"krate":0,"index":6983},{"krate":0,"index":6985},{"krate":0,"index":6987},{"krate":0,"index":6989},{"krate":0,"index":6991},{"krate":0,"index":6993},{"krate":0,"index":6995},{"krate":0,"index":6997},{"krate":0,"index":6999}],"decl_id":null,"docs":" An instruction opcode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6217},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784635,"byte_end":10784648,"line_start":2010,"line_end":2010,"column_start":12,"column_end":25},"name":"is_terminator","qualname":"<Opcode>::is_terminator","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True for instructions that terminate the EBB\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6218},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10785072,"byte_end":10785081,"line_start":2028,"line_end":2028,"column_start":12,"column_end":21},"name":"is_branch","qualname":"<Opcode>::is_branch","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True for all branch or jump instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6219},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10785550,"byte_end":10785568,"line_start":2048,"line_end":2048,"column_start":12,"column_end":30},"name":"is_indirect_branch","qualname":"<Opcode>::is_indirect_branch","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True for all indirect branch or jump instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6220},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10785803,"byte_end":10785810,"line_start":2060,"line_end":2060,"column_start":12,"column_end":19},"name":"is_call","qualname":"<Opcode>::is_call","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a call instruction?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6221},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10786065,"byte_end":10786074,"line_start":2073,"line_end":2073,"column_start":12,"column_end":21},"name":"is_return","qualname":"<Opcode>::is_return","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a return instruction?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6222},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10786335,"byte_end":10786343,"line_start":2086,"line_end":2086,"column_start":12,"column_end":20},"name":"is_ghost","qualname":"<Opcode>::is_ghost","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a ghost instruction?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6223},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10786659,"byte_end":10786667,"line_start":2101,"line_end":2101,"column_start":12,"column_end":20},"name":"can_load","qualname":"<Opcode>::can_load","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can this instruction read from memory?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6224},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10787478,"byte_end":10787487,"line_start":2132,"line_end":2132,"column_start":12,"column_end":21},"name":"can_store","qualname":"<Opcode>::can_store","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can this instruction write to memory?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6225},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10788056,"byte_end":10788064,"line_start":2155,"line_end":2155,"column_start":12,"column_end":20},"name":"can_trap","qualname":"<Opcode>::can_trap","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can this instruction cause a trap?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6226},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10788690,"byte_end":10788708,"line_start":2180,"line_end":2180,"column_start":12,"column_end":30},"name":"other_side_effects","qualname":"<Opcode>::other_side_effects","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this instruction have other side effects besides can_* flags?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6227},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10789348,"byte_end":10789364,"line_start":2205,"line_end":2205,"column_start":12,"column_end":28},"name":"writes_cpu_flags","qualname":"<Opcode>::writes_cpu_flags","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this instruction write to CPU flags?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":298020,"byte_end":298026,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"format","qualname":"<Opcode>::format","value":"fn (self) -> InstructionFormat","parent":null,"children":[],"decl_id":null,"docs":" Get the instruction format for this opcode.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":298220,"byte_end":298231,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"constraints","qualname":"<Opcode>::constraints","value":"fn (self) -> OpcodeConstraints","parent":null,"children":[],"decl_id":null,"docs":" Get the constraint descriptor for this opcode.\n Panic if this is called on `NotAnOpcode`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7015},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":299599,"byte_end":299611,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"VariableArgs","qualname":"::ir::instructions::VariableArgs","value":"","parent":null,"children":[],"decl_id":null,"docs":" A variable list of `Value` operands used for function call arguments and passing arguments to\n basic blocks.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":299696,"byte_end":299699,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<VariableArgs>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty argument list.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":299791,"byte_end":299795,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"push","qualname":"<VariableArgs>::push","value":"fn (&mut self, v: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add an argument to the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":299896,"byte_end":299904,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VariableArgs>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the list is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300037,"byte_end":300052,"line_start":118,"line_end":118,"column_start":12,"column_end":27},"name":"into_value_list","qualname":"<VariableArgs>::into_value_list","value":"fn (self, fixed: &[Value], pool: &mut ValueListPool) -> ValueList","parent":null,"children":[],"decl_id":null,"docs":" Convert this to a value list in `pool` with `fixed` prepended.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":301334,"byte_end":301348,"line_start":169,"line_end":169,"column_start":12,"column_end":26},"name":"analyze_branch","qualname":"<InstructionData>::analyze_branch","value":"fn <'a> (&'a self, pool: &'a ValueListPool) -> BranchInfo<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return information about the destination of a branch or jump instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":302777,"byte_end":302795,"line_start":211,"line_end":211,"column_start":12,"column_end":30},"name":"branch_destination","qualname":"<InstructionData>::branch_destination","value":"fn (&self) -> Option<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get the single destination of this branch instruction, if it is a single destination\n branch or jump.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":303536,"byte_end":303558,"line_start":230,"line_end":230,"column_start":12,"column_end":34},"name":"branch_destination_mut","qualname":"<InstructionData>::branch_destination_mut","value":"fn (&mut self) -> Option<&mut Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the single destination of this branch instruction, if it is a\n single destination branch or jump.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":304475,"byte_end":304487,"line_start":263,"line_end":263,"column_start":12,"column_end":24},"name":"analyze_call","qualname":"<InstructionData>::analyze_call","value":"fn <'a> (&'a self, pool: &'a ValueListPool) -> CallInfo<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return information about a call instruction.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305271,"byte_end":305281,"line_start":284,"line_end":284,"column_start":5,"column_end":15},"name":"NotABranch","qualname":"::ir::instructions::BranchInfo::NotABranch","value":"BranchInfo::NotABranch","parent":{"krate":0,"index":1195},"children":[],"decl_id":null,"docs":" This is not a branch or jump instruction.\n This instruction will not transfer control to another EBB in the function, but it may still\n affect control flow by returning or trapping.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1199},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305383,"byte_end":305393,"line_start":287,"line_end":287,"column_start":5,"column_end":15},"name":"SingleDest","qualname":"::ir::instructions::BranchInfo::SingleDest","value":"BranchInfo::SingleDest(Ebb, &'a [Value])","parent":{"krate":0,"index":1195},"children":[],"decl_id":null,"docs":" This is a branch or jump to a single destination EBB, possibly taking value arguments.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1203},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305518,"byte_end":305523,"line_start":290,"line_end":290,"column_start":5,"column_end":10},"name":"Table","qualname":"::ir::instructions::BranchInfo::Table","value":"BranchInfo::Table(JumpTable, Option<Ebb>)","parent":{"krate":0,"index":1195},"children":[],"decl_id":null,"docs":" This is a jump table branch which can have many destination EBBs and maybe one default EBB.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1195},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305046,"byte_end":305056,"line_start":280,"line_end":280,"column_start":10,"column_end":20},"name":"BranchInfo","qualname":"::ir::instructions::BranchInfo","value":"BranchInfo::{NotABranch, SingleDest, Table}","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1203}],"decl_id":null,"docs":" Information about branch and jump instructions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305661,"byte_end":305669,"line_start":296,"line_end":296,"column_start":5,"column_end":13},"name":"NotACall","qualname":"::ir::instructions::CallInfo::NotACall","value":"CallInfo::NotACall","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" This is not a call instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1211},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305795,"byte_end":305801,"line_start":300,"line_end":300,"column_start":5,"column_end":11},"name":"Direct","qualname":"::ir::instructions::CallInfo::Direct","value":"CallInfo::Direct(FuncRef, &'a [Value])","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" This is a direct call to an external function declared in the preamble. See\n `DataFlowGraph.ext_funcs`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305925,"byte_end":305933,"line_start":303,"line_end":303,"column_start":5,"column_end":13},"name":"Indirect","qualname":"::ir::instructions::CallInfo::Indirect","value":"CallInfo::Indirect(SigRef, &'a [Value])","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" This is an indirect call with the specified signature. See `DataFlowGraph.signatures`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":305602,"byte_end":305610,"line_start":294,"line_end":294,"column_start":10,"column_end":18},"name":"CallInfo","qualname":"::ir::instructions::CallInfo","value":"CallInfo::{NotACall, Direct, Indirect}","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1215}],"decl_id":null,"docs":" Information about call instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7022},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":306287,"byte_end":306304,"line_start":312,"line_end":312,"column_start":12,"column_end":29},"name":"OpcodeConstraints","qualname":"::ir::instructions::OpcodeConstraints","value":"OpcodeConstraints {  }","parent":null,"children":[{"krate":0,"index":7023},{"krate":0,"index":7024},{"krate":0,"index":7025}],"decl_id":null,"docs":" Value type constraints for a given opcode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":307823,"byte_end":307842,"line_start":346,"line_end":346,"column_start":12,"column_end":31},"name":"use_typevar_operand","qualname":"<OpcodeConstraints>::use_typevar_operand","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can the controlling type variable for this opcode be inferred from the designated value\n input operand?\n This also implies that this opcode is polymorphic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":308362,"byte_end":308386,"line_start":356,"line_end":356,"column_start":12,"column_end":36},"name":"requires_typevar_operand","qualname":"<OpcodeConstraints>::requires_typevar_operand","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is it necessary to look at the designated value input operand in order to determine the\n controlling type variable, or is it good enough to use the first return type?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":308592,"byte_end":308609,"line_start":362,"line_end":362,"column_start":12,"column_end":29},"name":"num_fixed_results","qualname":"<OpcodeConstraints>::num_fixed_results","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of *fixed* result values produced by this opcode.\n This does not include `variable_args` produced by calls.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":309138,"byte_end":309163,"line_start":373,"line_end":373,"column_start":12,"column_end":37},"name":"num_fixed_value_arguments","qualname":"<OpcodeConstraints>::num_fixed_value_arguments","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of *fixed* input values required by this opcode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":309896,"byte_end":309907,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"result_type","qualname":"<OpcodeConstraints>::result_type","value":"fn (self, n: usize, ctrl_type: Type) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the value type of result number `n`, having resolved the controlling type variable to\n `ctrl_type`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":310595,"byte_end":310620,"line_start":411,"line_end":411,"column_start":12,"column_end":37},"name":"value_argument_constraint","qualname":"<OpcodeConstraints>::value_argument_constraint","value":"fn (self, n: usize, ctrl_type: Type) -> ResolvedConstraint","parent":null,"children":[],"decl_id":null,"docs":" Get the value type of input value number `n`, having resolved the controlling type variable\n to `ctrl_type`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311069,"byte_end":311081,"line_start":422,"line_end":422,"column_start":12,"column_end":24},"name":"ctrl_typeset","qualname":"<OpcodeConstraints>::ctrl_typeset","value":"fn (self) -> Option<ValueTypeSet>","parent":null,"children":[],"decl_id":null,"docs":" Get the typeset of allowed types for the controlling type variable in a polymorphic\n instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311235,"byte_end":311249,"line_start":427,"line_end":427,"column_start":12,"column_end":26},"name":"is_polymorphic","qualname":"<OpcodeConstraints>::is_polymorphic","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this instruction polymorphic?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7029},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311505,"byte_end":311517,"line_start":437,"line_end":437,"column_start":12,"column_end":24},"name":"ValueTypeSet","qualname":"::ir::instructions::ValueTypeSet","value":"ValueTypeSet { lanes, ints, floats, bools, refs }","parent":null,"children":[{"krate":0,"index":7030},{"krate":0,"index":7031},{"krate":0,"index":7032},{"krate":0,"index":7033},{"krate":0,"index":7034}],"decl_id":null,"docs":" A value type set describes the permitted set of types for a type variable.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7030},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311555,"byte_end":311560,"line_start":439,"line_end":439,"column_start":9,"column_end":14},"name":"lanes","qualname":"::ir::instructions::ValueTypeSet::lanes","value":"bitset::BitSet<u16>","parent":{"krate":0,"index":7029},"children":[],"decl_id":null,"docs":" Allowed lane sizes\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7031},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311607,"byte_end":311611,"line_start":441,"line_end":441,"column_start":9,"column_end":13},"name":"ints","qualname":"::ir::instructions::ValueTypeSet::ints","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7029},"children":[],"decl_id":null,"docs":" Allowed int widths\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7032},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311659,"byte_end":311665,"line_start":443,"line_end":443,"column_start":9,"column_end":15},"name":"floats","qualname":"::ir::instructions::ValueTypeSet::floats","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7029},"children":[],"decl_id":null,"docs":" Allowed float widths\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7033},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311712,"byte_end":311717,"line_start":445,"line_end":445,"column_start":9,"column_end":14},"name":"bools","qualname":"::ir::instructions::ValueTypeSet::bools","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7029},"children":[],"decl_id":null,"docs":" Allowed bool widths\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7034},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311763,"byte_end":311767,"line_start":447,"line_end":447,"column_start":9,"column_end":13},"name":"refs","qualname":"::ir::instructions::ValueTypeSet::refs","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7029},"children":[],"decl_id":null,"docs":" Allowed ref widths\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":312427,"byte_end":312435,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"contains","qualname":"<ValueTypeSet>::contains","value":"fn (self, typ: Type) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does `typ` belong to this set?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":312724,"byte_end":312731,"line_start":478,"line_end":478,"column_start":12,"column_end":19},"name":"example","qualname":"<ValueTypeSet>::example","value":"fn (self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get an example member of this type set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7048},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":315259,"byte_end":315264,"line_start":555,"line_end":555,"column_start":5,"column_end":10},"name":"Bound","qualname":"::ir::instructions::ResolvedConstraint::Bound","value":"ResolvedConstraint::Bound(Type)","parent":{"krate":0,"index":7047},"children":[],"decl_id":null,"docs":" The operand is bound to a known type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7051},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":315339,"byte_end":315343,"line_start":557,"line_end":557,"column_start":5,"column_end":9},"name":"Free","qualname":"::ir::instructions::ResolvedConstraint::Free","value":"ResolvedConstraint::Free(ValueTypeSet)","parent":{"krate":0,"index":7047},"children":[],"decl_id":null,"docs":" The operand type can vary freely within the given set.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7047},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":315188,"byte_end":315206,"line_start":553,"line_end":553,"column_start":10,"column_end":28},"name":"ResolvedConstraint","qualname":"::ir::instructions::ResolvedConstraint","value":"ResolvedConstraint::{Bound, Free}","parent":null,"children":[{"krate":0,"index":7048},{"krate":0,"index":7051}],"decl_id":null,"docs":" The type constraint on a value argument once the controlling type variable is known.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jumptable","qualname":"::ir::jumptable","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1269},{"krate":0,"index":7066},{"krate":0,"index":7068},{"krate":0,"index":1272},{"krate":0,"index":1283}],"decl_id":null,"docs":" Jump table representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7066},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":321745,"byte_end":321758,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"JumpTableData","qualname":"::ir::jumptable::JumpTableData","value":"JumpTableData {  }","parent":null,"children":[{"krate":0,"index":7067}],"decl_id":null,"docs":" Contents of a jump table.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":321878,"byte_end":321881,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<JumpTableData>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty jump table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322014,"byte_end":322027,"line_start":27,"line_end":27,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<JumpTableData>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty jump table with the specified capacity.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322188,"byte_end":322191,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<JumpTableData>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of table entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322283,"byte_end":322293,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"push_entry","qualname":"<JumpTableData>::push_entry","value":"fn (&mut self, dest: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append a table entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322420,"byte_end":322431,"line_start":44,"line_end":44,"column_start":12,"column_end":23},"name":"branches_to","qualname":"<JumpTableData>::branches_to","value":"fn (&self, ebb: Ebb) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if any of the entries branch to `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322583,"byte_end":322591,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<JumpTableData>::as_slice","value":"fn (&self) -> &[Ebb]","parent":null,"children":[],"decl_id":null,"docs":" Access the whole table as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322710,"byte_end":322722,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<JumpTableData>::as_mut_slice","value":"fn (&mut self) -> &mut [Ebb]","parent":null,"children":[],"decl_id":null,"docs":" Access the whole table as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322846,"byte_end":322850,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"iter","qualname":"<JumpTableData>::iter","value":"fn (&self) -> Iter<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":322979,"byte_end":322987,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<JumpTableData>::iter_mut","value":"fn (&mut self) -> IterMut<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layout","qualname":"::ir::layout","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1299},{"krate":0,"index":7070},{"krate":0,"index":7075},{"krate":0,"index":1300},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1314},{"krate":0,"index":1326},{"krate":0,"index":7077},{"krate":0,"index":7087},{"krate":0,"index":7085},{"krate":0,"index":7083},{"krate":0,"index":1337},{"krate":0,"index":1341},{"krate":0,"index":1345},{"krate":0,"index":1350},{"krate":0,"index":7089},{"krate":0,"index":7098},{"krate":0,"index":7096},{"krate":0,"index":7094},{"krate":0,"index":1363},{"krate":0,"index":1368},{"krate":0,"index":1372}],"decl_id":null,"docs":" Function layout.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7070},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":325296,"byte_end":325302,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Layout","qualname":"::ir::layout::Layout","value":"Layout {  }","parent":null,"children":[{"krate":0,"index":7071},{"krate":0,"index":7072},{"krate":0,"index":7073},{"krate":0,"index":7074}],"decl_id":null,"docs":" The `Layout` struct determines the layout of EBBs and instructions in a function. It does not\n contain definitions of instructions or EBBs, but depends on `Inst` and `Ebb` entity references\n being defined elsewhere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":325939,"byte_end":325942,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<Layout>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `Layout`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":326160,"byte_end":326165,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"clear","qualname":"<Layout>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":326364,"byte_end":326376,"line_start":65,"line_end":65,"column_start":12,"column_end":24},"name":"ebb_capacity","qualname":"<Layout>::ebb_capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the `EbbData` map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":336396,"byte_end":336411,"line_start":340,"line_end":340,"column_start":12,"column_end":27},"name":"is_ebb_inserted","qualname":"<Layout>::is_ebb_inserted","value":"fn (&self, ebb: Ebb) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is `ebb` currently part of the layout?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":336578,"byte_end":336588,"line_start":345,"line_end":345,"column_start":12,"column_end":22},"name":"append_ebb","qualname":"<Layout>::append_ebb","value":"fn (&mut self, ebb: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `ebb` as the last EBB in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":337291,"byte_end":337301,"line_start":366,"line_end":366,"column_start":12,"column_end":22},"name":"insert_ebb","qualname":"<Layout>::insert_ebb","value":"fn (&mut self, ebb: Ebb, before: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `ebb` in the layout before the existing EBB `before`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":338090,"byte_end":338106,"line_start":390,"line_end":390,"column_start":12,"column_end":28},"name":"insert_ebb_after","qualname":"<Layout>::insert_ebb_after","value":"fn (&mut self, ebb: Ebb, after: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `ebb` in the layout *after* the existing EBB `after`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":338861,"byte_end":338871,"line_start":414,"line_end":414,"column_start":12,"column_end":22},"name":"remove_ebb","qualname":"<Layout>::remove_ebb","value":"fn (&mut self, ebb: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove `ebb` from the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":339709,"byte_end":339713,"line_start":440,"line_end":440,"column_start":12,"column_end":16},"name":"ebbs","qualname":"<Layout>::ebbs","value":"fn (&self) -> Ebbs","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all EBBs in layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":339932,"byte_end":339943,"line_start":449,"line_end":449,"column_start":12,"column_end":23},"name":"entry_block","qualname":"<Layout>::entry_block","value":"fn (&self) -> Option<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get the function's entry block.\n This is simply the first EBB in the layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":340049,"byte_end":340057,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"last_ebb","qualname":"<Layout>::last_ebb","value":"fn (&self) -> Option<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get the last EBB in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":340181,"byte_end":340189,"line_start":459,"line_end":459,"column_start":12,"column_end":20},"name":"prev_ebb","qualname":"<Layout>::prev_ebb","value":"fn (&self, ebb: Ebb) -> Option<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get the block preceding `ebb` in the layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":340338,"byte_end":340346,"line_start":464,"line_end":464,"column_start":12,"column_end":20},"name":"next_ebb","qualname":"<Layout>::next_ebb","value":"fn (&self, ebb: Ebb) -> Option<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get the block following `ebb` in the layout order.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1337},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":340706,"byte_end":340710,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"Ebbs","qualname":"::ir::layout::Ebbs","value":"Ebbs {  }","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340}],"decl_id":null,"docs":" Iterate over EBBs in layout order. See `Layout::ebbs()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":341544,"byte_end":341552,"line_start":514,"line_end":514,"column_start":12,"column_end":20},"name":"inst_ebb","qualname":"<Layout>::inst_ebb","value":"fn (&self, inst: Inst) -> Option<Ebb>","parent":null,"children":[],"decl_id":null,"docs":" Get the EBB containing `inst`, or `None` if `inst` is not inserted in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":341734,"byte_end":341740,"line_start":519,"line_end":519,"column_start":12,"column_end":18},"name":"pp_ebb","qualname":"<Layout>::pp_ebb","value":"fn <PP> (&self, pp: PP) -> Ebb","parent":null,"children":[],"decl_id":null,"docs":" Get the EBB containing the program point `pp`. Panic if `pp` is not in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":342109,"byte_end":342120,"line_start":532,"line_end":532,"column_start":12,"column_end":23},"name":"append_inst","qualname":"<Layout>::append_inst","value":"fn (&mut self, inst: Inst, ebb: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append `inst` to the end of `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":343000,"byte_end":343010,"line_start":557,"line_end":557,"column_start":12,"column_end":22},"name":"first_inst","qualname":"<Layout>::first_inst","value":"fn (&self, ebb: Ebb) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch an ebb's first instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":343146,"byte_end":343155,"line_start":562,"line_end":562,"column_start":12,"column_end":21},"name":"last_inst","qualname":"<Layout>::last_inst","value":"fn (&self, ebb: Ebb) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch an ebb's last instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":343297,"byte_end":343306,"line_start":567,"line_end":567,"column_start":12,"column_end":21},"name":"next_inst","qualname":"<Layout>::next_inst","value":"fn (&self, inst: Inst) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the instruction following `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":343449,"byte_end":343458,"line_start":572,"line_end":572,"column_start":12,"column_end":21},"name":"prev_inst","qualname":"<Layout>::prev_inst","value":"fn (&self, inst: Inst) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the instruction preceding `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":343624,"byte_end":343635,"line_start":577,"line_end":577,"column_start":12,"column_end":23},"name":"insert_inst","qualname":"<Layout>::insert_inst","value":"fn (&mut self, inst: Inst, before: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `inst` before the instruction `before` in the same EBB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":344393,"byte_end":344404,"line_start":598,"line_end":598,"column_start":12,"column_end":23},"name":"remove_inst","qualname":"<Layout>::remove_inst","value":"fn (&mut self, inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove `inst` from the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":345218,"byte_end":345227,"line_start":623,"line_end":623,"column_start":12,"column_end":21},"name":"ebb_insts","qualname":"<Layout>::ebb_insts","value":"fn (&self, ebb: Ebb) -> Insts","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the instructions in `ebb` in layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":345881,"byte_end":345890,"line_start":653,"line_end":653,"column_start":12,"column_end":21},"name":"split_ebb","qualname":"<Layout>::split_ebb","value":"fn (&mut self, new_ebb: Ebb, before: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Split the EBB containing `before` in two.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1363},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":347813,"byte_end":347818,"line_start":709,"line_end":709,"column_start":12,"column_end":17},"name":"Insts","qualname":"::ir::layout::Insts","value":"Insts {  }","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"decl_id":null,"docs":" Iterate over instructions in an EBB in layout order. See `Layout::ebb_insts()`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7101},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364716,"byte_end":364726,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"name":"Probestack","qualname":"::ir::libcall::LibCall::Probestack","value":"LibCall::Probestack","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" probe for stack overflow. These are emitted for functions which need\n when the `probestack_enabled` setting is true.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7103},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364749,"byte_end":364756,"line_start":28,"line_end":28,"column_start":5,"column_end":12},"name":"CeilF32","qualname":"::ir::libcall::LibCall::CeilF32","value":"LibCall::CeilF32","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" ceil.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7105},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364779,"byte_end":364786,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"CeilF64","qualname":"::ir::libcall::LibCall::CeilF64","value":"LibCall::CeilF64","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" ceil.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7107},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364810,"byte_end":364818,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"FloorF32","qualname":"::ir::libcall::LibCall::FloorF32","value":"LibCall::FloorF32","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" floor.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7109},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364842,"byte_end":364850,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"FloorF64","qualname":"::ir::libcall::LibCall::FloorF64","value":"LibCall::FloorF64","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" floor.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7111},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364874,"byte_end":364882,"line_start":36,"line_end":36,"column_start":5,"column_end":13},"name":"TruncF32","qualname":"::ir::libcall::LibCall::TruncF32","value":"LibCall::TruncF32","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" trunc.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7113},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364906,"byte_end":364914,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"TruncF64","qualname":"::ir::libcall::LibCall::TruncF64","value":"LibCall::TruncF64","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" frunc.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7115},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364940,"byte_end":364950,"line_start":40,"line_end":40,"column_start":5,"column_end":15},"name":"NearestF32","qualname":"::ir::libcall::LibCall::NearestF32","value":"LibCall::NearestF32","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" nearest.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7117},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364976,"byte_end":364986,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"NearestF64","qualname":"::ir::libcall::LibCall::NearestF64","value":"LibCall::NearestF64","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" nearest.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7119},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365012,"byte_end":365018,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Memcpy","qualname":"::ir::libcall::LibCall::Memcpy","value":"LibCall::Memcpy","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" libc.memcpy\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7121},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365044,"byte_end":365050,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Memset","qualname":"::ir::libcall::LibCall::Memset","value":"LibCall::Memset","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" libc.memset\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7123},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365077,"byte_end":365084,"line_start":48,"line_end":48,"column_start":5,"column_end":12},"name":"Memmove","qualname":"::ir::libcall::LibCall::Memmove","value":"LibCall::Memmove","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" libc.memmove\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7100},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":364570,"byte_end":364577,"line_start":23,"line_end":23,"column_start":10,"column_end":17},"name":"LibCall","qualname":"::ir::libcall::LibCall","value":"LibCall::{Probestack, CeilF32, CeilF64, FloorF32, FloorF64, TruncF32, TruncF64, NearestF32, NearestF64, Memcpy, Memset, Memmove}","parent":null,"children":[{"krate":0,"index":7101},{"krate":0,"index":7103},{"krate":0,"index":7105},{"krate":0,"index":7107},{"krate":0,"index":7109},{"krate":0,"index":7111},{"krate":0,"index":7113},{"krate":0,"index":7115},{"krate":0,"index":7117},{"krate":0,"index":7119},{"krate":0,"index":7121},{"krate":0,"index":7123}],"decl_id":null,"docs":" The name of a runtime library routine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":366209,"byte_end":366217,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"for_inst","qualname":"<LibCall>::for_inst","value":"fn (opcode: Opcode, ctrl_type: Type) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get the well-known library call name to use as a replacement for an instruction with the\n given opcode and controlling type variable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1401},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":367104,"byte_end":367123,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"get_libcall_funcref","qualname":"::ir::libcall::get_libcall_funcref","value":"fn (libcall: LibCall, call_conv: CallConv, func: &mut Function, inst: Inst, isa: &dyn TargetIsa) -> FuncRef","parent":null,"children":[],"decl_id":null,"docs":" Get a function reference for `libcall` in `func`, following the signature\n for `inst`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1403},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":367527,"byte_end":367549,"line_start":123,"line_end":123,"column_start":8,"column_end":30},"name":"get_probestack_funcref","qualname":"::ir::libcall::get_probestack_funcref","value":"fn (func: &mut Function, reg_type: Type, arg_reg: RegUnit, isa: &dyn TargetIsa) -> FuncRef","parent":null,"children":[],"decl_id":null,"docs":" Get a function reference for the probestack function in `func`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7139},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":370947,"byte_end":370955,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"MemFlags","qualname":"::ir::memflags::MemFlags","value":"MemFlags {  }","parent":null,"children":[{"krate":0,"index":7140}],"decl_id":null,"docs":" Flags for memory operations like load/store.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":371043,"byte_end":371046,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<MemFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty set of flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":371240,"byte_end":371247,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"trusted","qualname":"<MemFlags>::trusted","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a set of flags representing an access from a \"trusted\" address, meaning it's\n known to be aligned and non-trapping.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":371741,"byte_end":371752,"line_start":51,"line_end":51,"column_start":12,"column_end":23},"name":"set_by_name","qualname":"<MemFlags>::set_by_name","value":"fn (&mut self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Set a flag bit by name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":372488,"byte_end":372494,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"notrap","qualname":"<MemFlags>::notrap","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the `notrap` flag is set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":372595,"byte_end":372605,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"name":"set_notrap","qualname":"<MemFlags>::set_notrap","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `notrap` flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":372963,"byte_end":372970,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"aligned","qualname":"<MemFlags>::aligned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the `aligned` flag is set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":373073,"byte_end":373084,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"set_aligned","qualname":"<MemFlags>::set_aligned","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `aligned` flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":373421,"byte_end":373429,"line_start":98,"line_end":98,"column_start":12,"column_end":20},"name":"readonly","qualname":"<MemFlags>::readonly","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the `readonly` flag is set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":373534,"byte_end":373546,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"set_readonly","qualname":"<MemFlags>::set_readonly","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `readonly` flag.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7156},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374332,"byte_end":374344,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"ProgramPoint","qualname":"::ir::progpoint::ProgramPoint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `ProgramPoint` represents a position in a function where the live range of an SSA value can\n begin or end. It can be either:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7170},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375181,"byte_end":375185,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Inst","qualname":"::ir::progpoint::ExpandedProgramPoint::Inst","value":"ExpandedProgramPoint::Inst(Inst)","parent":{"krate":0,"index":7169},"children":[],"decl_id":null,"docs":" An instruction in the function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7173},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375220,"byte_end":375223,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Ebb","qualname":"::ir::progpoint::ExpandedProgramPoint::Ebb","value":"ExpandedProgramPoint::Ebb(Ebb)","parent":{"krate":0,"index":7169},"children":[],"decl_id":null,"docs":" An EBB header.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7169},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375114,"byte_end":375134,"line_start":47,"line_end":47,"column_start":10,"column_end":30},"name":"ExpandedProgramPoint","qualname":"::ir::progpoint::ExpandedProgramPoint","value":"ExpandedProgramPoint::{Inst, Ebb}","parent":null,"children":[{"krate":0,"index":7170},{"krate":0,"index":7173}],"decl_id":null,"docs":" An expanded program point directly exposes the variants, but takes twice the space to\n represent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375319,"byte_end":375330,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"unwrap_inst","qualname":"<ExpandedProgramPoint>::unwrap_inst","value":"fn (self) -> Inst","parent":null,"children":[],"decl_id":null,"docs":" Get the instruction we know is inside.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1468},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":377101,"byte_end":377113,"line_start":127,"line_end":127,"column_start":11,"column_end":23},"name":"ProgramOrder","qualname":"::ir::progpoint::ProgramOrder","value":"ProgramOrder","parent":null,"children":[{"krate":0,"index":1469},{"krate":0,"index":1472}],"decl_id":null,"docs":" Context for ordering program points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1469},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":377561,"byte_end":377564,"line_start":135,"line_end":135,"column_start":8,"column_end":11},"name":"cmp","qualname":"::ir::progpoint::ProgramOrder::cmp","value":"fn <A, B> (&self, a: A, b: B) -> cmp::Ordering","parent":{"krate":0,"index":1468},"children":[],"decl_id":null,"docs":" Compare the program points `a` and `b` relative to this program order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":377883,"byte_end":377893,"line_start":143,"line_end":143,"column_start":8,"column_end":18},"name":"is_ebb_gap","qualname":"::ir::progpoint::ProgramOrder::is_ebb_gap","value":"fn (&self, inst: Inst, ebb: Ebb) -> bool","parent":{"krate":0,"index":1468},"children":[],"decl_id":null,"docs":" Is the range from `inst` to `ebb` just the gap between consecutive EBBs?","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7186},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379113,"byte_end":379122,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"SourceLoc","qualname":"::ir::sourceloc::SourceLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":" A source location.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379216,"byte_end":379219,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<SourceLoc>::new","value":"fn (bits: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new source location with the given bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379323,"byte_end":379333,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"is_default","qualname":"<SourceLoc>::is_default","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the default source location?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379450,"byte_end":379454,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"bits","qualname":"<SourceLoc>::bits","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Read the bits of this source location.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1483},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stackslot","qualname":"::ir::stackslot","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":7201},{"krate":0,"index":7223},{"krate":0,"index":7222},{"krate":0,"index":7220},{"krate":0,"index":7217},{"krate":0,"index":7218},{"krate":0,"index":7214},{"krate":0,"index":7215},{"krate":0,"index":1505},{"krate":0,"index":1509},{"krate":0,"index":7225},{"krate":0,"index":7238},{"krate":0,"index":7236},{"krate":0,"index":7232},{"krate":0,"index":7233},{"krate":0,"index":7229},{"krate":0,"index":7230},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":7240},{"krate":0,"index":7254},{"krate":0,"index":7252},{"krate":0,"index":7248},{"krate":0,"index":7249},{"krate":0,"index":7245},{"krate":0,"index":7246},{"krate":0,"index":1517},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1533}],"decl_id":null,"docs":" Stack slots.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":380910,"byte_end":380919,"line_start":24,"line_end":24,"column_start":10,"column_end":19},"name":"StackSize","qualname":"::ir::stackslot::StackSize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The size of an object on the stack, or the size of a stack frame.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":381042,"byte_end":381053,"line_start":29,"line_end":29,"column_start":10,"column_end":21},"name":"StackOffset","qualname":"::ir::stackslot::StackOffset","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" A stack offset.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7202},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":381657,"byte_end":381666,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"SpillSlot","qualname":"::ir::stackslot::StackSlotKind::SpillSlot","value":"StackSlotKind::SpillSlot","parent":{"krate":0,"index":7201},"children":[],"decl_id":null,"docs":" A spill slot. This is a stack slot created by the register allocator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7204},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":381805,"byte_end":381817,"line_start":51,"line_end":51,"column_start":5,"column_end":17},"name":"ExplicitSlot","qualname":"::ir::stackslot::StackSlotKind::ExplicitSlot","value":"StackSlotKind::ExplicitSlot","parent":{"krate":0,"index":7201},"children":[],"decl_id":null,"docs":" An explicit stack slot. This is a chunk of stack memory for use by the `stack_load`\n and `stack_store` instructions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7206},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":382114,"byte_end":382125,"line_start":58,"line_end":58,"column_start":5,"column_end":16},"name":"IncomingArg","qualname":"::ir::stackslot::StackSlotKind::IncomingArg","value":"StackSlotKind::IncomingArg","parent":{"krate":0,"index":7201},"children":[],"decl_id":null,"docs":" An incoming function argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7208},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":382436,"byte_end":382447,"line_start":65,"line_end":65,"column_start":5,"column_end":16},"name":"OutgoingArg","qualname":"::ir::stackslot::StackSlotKind::OutgoingArg","value":"StackSlotKind::OutgoingArg","parent":{"krate":0,"index":7201},"children":[],"decl_id":null,"docs":" An outgoing function argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7210},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":382910,"byte_end":382926,"line_start":74,"line_end":74,"column_start":5,"column_end":21},"name":"StructReturnSlot","qualname":"::ir::stackslot::StackSlotKind::StructReturnSlot","value":"StackSlotKind::StructReturnSlot","parent":{"krate":0,"index":7201},"children":[],"decl_id":null,"docs":" Space allocated in the caller's frame for the callee's return values\n that are passed out via return pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7212},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":383157,"byte_end":383170,"line_start":80,"line_end":80,"column_start":5,"column_end":18},"name":"EmergencySlot","qualname":"::ir::stackslot::StackSlotKind::EmergencySlot","value":"StackSlotKind::EmergencySlot","parent":{"krate":0,"index":7201},"children":[],"decl_id":null,"docs":" An emergency spill slot.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7201},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":381559,"byte_end":381572,"line_start":45,"line_end":45,"column_start":10,"column_end":23},"name":"StackSlotKind","qualname":"::ir::stackslot::StackSlotKind","value":"StackSlotKind::{SpillSlot, ExplicitSlot, IncomingArg, OutgoingArg, StructReturnSlot, EmergencySlot}","parent":null,"children":[{"krate":0,"index":7202},{"krate":0,"index":7204},{"krate":0,"index":7206},{"krate":0,"index":7208},{"krate":0,"index":7210},{"krate":0,"index":7212}],"decl_id":null,"docs":" The kind of a stack slot.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7225},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384259,"byte_end":384272,"line_start":117,"line_end":117,"column_start":12,"column_end":25},"name":"StackSlotData","qualname":"::ir::stackslot::StackSlotData","value":"StackSlotData { kind, size, offset }","parent":null,"children":[{"krate":0,"index":7226},{"krate":0,"index":7227},{"krate":0,"index":7228}],"decl_id":null,"docs":" Contents of a stack slot.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7226},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384315,"byte_end":384319,"line_start":119,"line_end":119,"column_start":9,"column_end":13},"name":"kind","qualname":"::ir::stackslot::StackSlotData::kind","value":"ir::stackslot::StackSlotKind","parent":{"krate":0,"index":7225},"children":[],"decl_id":null,"docs":" The kind of stack slot.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7227},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384382,"byte_end":384386,"line_start":122,"line_end":122,"column_start":9,"column_end":13},"name":"size","qualname":"::ir::stackslot::StackSlotData::size","value":"u32","parent":{"krate":0,"index":7225},"children":[],"decl_id":null,"docs":" Size of stack slot in bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7228},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384830,"byte_end":384836,"line_start":131,"line_end":131,"column_start":9,"column_end":15},"name":"offset","qualname":"::ir::stackslot::StackSlotData::offset","value":"core::option::Option<i32>","parent":{"krate":0,"index":7225},"children":[],"decl_id":null,"docs":" Offset of stack slot relative to the stack pointer in the caller.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384952,"byte_end":384955,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<StackSlotData>::new","value":"fn (kind: StackSlotKind, size: StackSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a stack slot with the specified byte size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":385198,"byte_end":385207,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"alignment","qualname":"<StackSlotData>::alignment","value":"fn (&self, max_align: StackSize) -> StackSize","parent":null,"children":[],"decl_id":null,"docs":" Get the alignment in bytes of this stack slot given the stack pointer alignment.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7240},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":386061,"byte_end":386071,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"StackSlots","qualname":"::ir::stackslot::StackSlots","value":"StackSlots { frame_size }","parent":null,"children":[{"krate":0,"index":7241},{"krate":0,"index":7242},{"krate":0,"index":7243},{"krate":0,"index":7244}],"decl_id":null,"docs":" Stack frame manager.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7244},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":386653,"byte_end":386663,"line_start":187,"line_end":187,"column_start":9,"column_end":19},"name":"frame_size","qualname":"::ir::stackslot::StackSlots::frame_size","value":"core::option::Option<u32>","parent":{"krate":0,"index":7240},"children":[],"decl_id":null,"docs":" The total size of the stack frame.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":386832,"byte_end":386835,"line_start":193,"line_end":193,"column_start":12,"column_end":15},"name":"new","qualname":"<StackSlots>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty stack slot manager.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":387058,"byte_end":387063,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"clear","qualname":"<StackSlots>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear out everything.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":387429,"byte_end":387433,"line_start":214,"line_end":214,"column_start":12,"column_end":16},"name":"push","qualname":"<StackSlots>::push","value":"fn (&mut self, data: StackSlotData) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new stack slot.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":387584,"byte_end":387592,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<StackSlots>::is_valid","value":"fn (&self, ss: StackSlot) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `ss` is a valid stack slot reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":387729,"byte_end":387733,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"iter","qualname":"<StackSlots>::iter","value":"fn (&self) -> Iter<StackSlot, StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot keys.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":387892,"byte_end":387900,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<StackSlots>::iter_mut","value":"fn (&mut self) -> IterMut<StackSlot, StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot keys, mutable edition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388056,"byte_end":388062,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"values","qualname":"<StackSlots>::values","value":"fn (&self) -> slice::Iter<StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot records.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388222,"byte_end":388232,"line_start":239,"line_end":239,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<StackSlots>::values_mut","value":"fn (&mut self) -> slice::IterMut<StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot records, mutable edition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388383,"byte_end":388387,"line_start":244,"line_end":244,"column_start":12,"column_end":16},"name":"keys","qualname":"<StackSlots>::keys","value":"fn (&self) -> Keys<StackSlot>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot keys.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388598,"byte_end":388606,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"next_key","qualname":"<StackSlots>::next_key","value":"fn (&self) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the next stack slot that would be created by `push()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":389123,"byte_end":389138,"line_start":273,"line_end":273,"column_start":12,"column_end":27},"name":"make_spill_slot","qualname":"<StackSlots>::make_spill_slot","value":"fn (&mut self, ty: Type) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Create a new spill slot for spilling values of type `ty`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":389345,"byte_end":389362,"line_start":278,"line_end":278,"column_start":12,"column_end":29},"name":"make_incoming_arg","qualname":"<StackSlots>::make_incoming_arg","value":"fn (&mut self, ty: Type, offset: StackOffset) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Create a stack slot representing an incoming function argument.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":389988,"byte_end":390004,"line_start":292,"line_end":292,"column_start":12,"column_end":28},"name":"get_outgoing_arg","qualname":"<StackSlots>::get_outgoing_arg","value":"fn (&mut self, ty: Type, offset: StackOffset) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get a stack slot representing an outgoing argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":391024,"byte_end":391042,"line_start":316,"line_end":316,"column_start":12,"column_end":30},"name":"get_emergency_slot","qualname":"<StackSlots>::get_emergency_slot","value":"fn (&mut self, ty: Type, in_use: &[PackedOption<StackSlot>]) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get an emergency spill slot that can be used to store a `ty` value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7256},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395222,"byte_end":395231,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"TableData","qualname":"::ir::table::TableData","value":"TableData { base_gv, min_size, bound_gv, element_size, index_type }","parent":null,"children":[{"krate":0,"index":7257},{"krate":0,"index":7258},{"krate":0,"index":7259},{"krate":0,"index":7260},{"krate":0,"index":7261}],"decl_id":null,"docs":" Information about a table declaration.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7257},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395309,"byte_end":395316,"line_start":11,"line_end":11,"column_start":9,"column_end":16},"name":"base_gv","qualname":"::ir::table::TableData::base_gv","value":"ir::entities::GlobalValue","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" Global value giving the address of the start of the table.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7258},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395460,"byte_end":395468,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"name":"min_size","qualname":"::ir::table::TableData::min_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" Guaranteed minimum table size in elements. Table accesses before `min_size` don't need\n bounds checking.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7259},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395560,"byte_end":395568,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"bound_gv","qualname":"::ir::table::TableData::bound_gv","value":"ir::entities::GlobalValue","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" Global value giving the current bound of the table, in elements.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7260},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395639,"byte_end":395651,"line_start":21,"line_end":21,"column_start":9,"column_end":21},"name":"element_size","qualname":"::ir::table::TableData::element_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" The size of a table element, in bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7261},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395708,"byte_end":395718,"line_start":24,"line_end":24,"column_start":9,"column_end":19},"name":"index_type","qualname":"::ir::table::TableData::index_type","value":"ir::types::Type","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" The index type for the table.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7265},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":396686,"byte_end":396699,"line_start":18,"line_end":18,"column_start":5,"column_end":18},"name":"StackOverflow","qualname":"::ir::trapcode::TrapCode::StackOverflow","value":"TrapCode::StackOverflow","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" The current stack space was exhausted.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7267},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":396960,"byte_end":396975,"line_start":25,"line_end":25,"column_start":5,"column_end":20},"name":"HeapOutOfBounds","qualname":"::ir::trapcode::TrapCode::HeapOutOfBounds","value":"TrapCode::HeapOutOfBounds","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" A `heap_addr` instruction detected an out-of-bounds error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7269},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397050,"byte_end":397066,"line_start":28,"line_end":28,"column_start":5,"column_end":21},"name":"TableOutOfBounds","qualname":"::ir::trapcode::TrapCode::TableOutOfBounds","value":"TrapCode::TableOutOfBounds","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" A `table_addr` instruction detected an out-of-bounds error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7271},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397110,"byte_end":397121,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::ir::trapcode::TrapCode::OutOfBounds","value":"TrapCode::OutOfBounds","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Other bounds checking error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7273},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397173,"byte_end":397191,"line_start":34,"line_end":34,"column_start":5,"column_end":23},"name":"IndirectCallToNull","qualname":"::ir::trapcode::TrapCode::IndirectCallToNull","value":"TrapCode::IndirectCallToNull","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Indirect call to a null table entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7275},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397243,"byte_end":397255,"line_start":37,"line_end":37,"column_start":5,"column_end":17},"name":"BadSignature","qualname":"::ir::trapcode::TrapCode::BadSignature","value":"TrapCode::BadSignature","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Signature mismatch on indirect call.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7277},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397322,"byte_end":397337,"line_start":40,"line_end":40,"column_start":5,"column_end":20},"name":"IntegerOverflow","qualname":"::ir::trapcode::TrapCode::IntegerOverflow","value":"TrapCode::IntegerOverflow","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" An integer arithmetic operation caused an overflow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7279},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397381,"byte_end":397402,"line_start":43,"line_end":43,"column_start":5,"column_end":26},"name":"IntegerDivisionByZero","qualname":"::ir::trapcode::TrapCode::IntegerDivisionByZero","value":"TrapCode::IntegerDivisionByZero","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" An integer division by zero.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7281},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397449,"byte_end":397471,"line_start":46,"line_end":46,"column_start":5,"column_end":27},"name":"BadConversionToInteger","qualname":"::ir::trapcode::TrapCode::BadConversionToInteger","value":"TrapCode::BadConversionToInteger","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Failed float-to-int conversion.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7283},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397547,"byte_end":397569,"line_start":49,"line_end":49,"column_start":5,"column_end":27},"name":"UnreachableCodeReached","qualname":"::ir::trapcode::TrapCode::UnreachableCodeReached","value":"TrapCode::UnreachableCodeReached","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Code that was supposed to have been unreachable was reached.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7285},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397679,"byte_end":397688,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"name":"Interrupt","qualname":"::ir::trapcode::TrapCode::Interrupt","value":"TrapCode::Interrupt","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Execution has potentially run too long and may be interrupted.\n This trap is resumable.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7287},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397729,"byte_end":397733,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"User","qualname":"::ir::trapcode::TrapCode::User","value":"TrapCode::User(u16)","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" A user-defined trap code.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7264},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":396491,"byte_end":396499,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"TrapCode","qualname":"::ir::trapcode::TrapCode","value":"TrapCode::{StackOverflow, HeapOutOfBounds, TableOutOfBounds, OutOfBounds, IndirectCallToNull, BadSignature, IntegerOverflow, IntegerDivisionByZero, BadConversionToInteger, UnreachableCodeReached, Interrupt, User}","parent":null,"children":[{"krate":0,"index":7265},{"krate":0,"index":7267},{"krate":0,"index":7269},{"krate":0,"index":7271},{"krate":0,"index":7273},{"krate":0,"index":7275},{"krate":0,"index":7277},{"krate":0,"index":7279},{"krate":0,"index":7281},{"krate":0,"index":7283},{"krate":0,"index":7285},{"krate":0,"index":7287}],"decl_id":null,"docs":" A trap code describing the reason for a trap.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::ir::types","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":7305},{"krate":0,"index":7320},{"krate":0,"index":7318},{"krate":0,"index":7314},{"krate":0,"index":7315},{"krate":0,"index":7311},{"krate":0,"index":7312},{"krate":0,"index":7308},{"krate":0,"index":1576},{"krate":0,"index":7321},{"krate":0,"index":7322},{"krate":0,"index":7323},{"krate":0,"index":7324},{"krate":0,"index":7325},{"krate":0,"index":7326},{"krate":0,"index":7327},{"krate":0,"index":7328},{"krate":0,"index":7329},{"krate":0,"index":7330},{"krate":0,"index":7331},{"krate":0,"index":7332},{"krate":0,"index":7333},{"krate":0,"index":7334},{"krate":0,"index":7335},{"krate":0,"index":7336},{"krate":0,"index":7337},{"krate":0,"index":7338},{"krate":0,"index":7339},{"krate":0,"index":7340},{"krate":0,"index":7341},{"krate":0,"index":7342},{"krate":0,"index":7343},{"krate":0,"index":7344},{"krate":0,"index":7345},{"krate":0,"index":7346},{"krate":0,"index":7347},{"krate":0,"index":7348},{"krate":0,"index":7349},{"krate":0,"index":7350},{"krate":0,"index":7351},{"krate":0,"index":7352},{"krate":0,"index":7353},{"krate":0,"index":7354},{"krate":0,"index":7355},{"krate":0,"index":7356},{"krate":0,"index":7357},{"krate":0,"index":7358},{"krate":0,"index":7359},{"krate":0,"index":7360},{"krate":0,"index":7361},{"krate":0,"index":7362},{"krate":0,"index":7363},{"krate":0,"index":7364},{"krate":0,"index":7365},{"krate":0,"index":7366},{"krate":0,"index":7367},{"krate":0,"index":7368},{"krate":0,"index":7369},{"krate":0,"index":7370},{"krate":0,"index":7371},{"krate":0,"index":7372},{"krate":0,"index":7373},{"krate":0,"index":7374},{"krate":0,"index":7375},{"krate":0,"index":7376},{"krate":0,"index":7377},{"krate":0,"index":7378},{"krate":0,"index":1577},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610}],"decl_id":null,"docs":" Common types for the Cranelift code generator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7305},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":401315,"byte_end":401319,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"Type","qualname":"::ir::types::Type","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type of an SSA value.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":401417,"byte_end":401424,"line_start":27,"line_end":27,"column_start":11,"column_end":18},"name":"INVALID","qualname":"::ir::types::INVALID","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" Not a valid type. Can't be loaded or stored. Can't be part of a SIMD vector.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7321},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10905894,"byte_end":10905900,"line_start":3,"line_end":3,"column_start":11,"column_end":17},"name":"IFLAGS","qualname":"::ir::types::IFLAGS","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" CPU flags representing the result of an integer comparison. These flags\n can be tested with an :type:`intcc` condition code.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7322},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906070,"byte_end":10906076,"line_start":7,"line_end":7,"column_start":11,"column_end":17},"name":"FFLAGS","qualname":"::ir::types::FFLAGS","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" CPU flags representing the result of a floating point comparison. These\n flags can be tested with a :type:`floatcc` condition code.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7323},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906139,"byte_end":10906141,"line_start":10,"line_end":10,"column_start":11,"column_end":13},"name":"B1","qualname":"::ir::types::B1","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 1 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7324},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906205,"byte_end":10906207,"line_start":13,"line_end":13,"column_start":11,"column_end":13},"name":"B8","qualname":"::ir::types::B8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 8 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7325},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906272,"byte_end":10906275,"line_start":16,"line_end":16,"column_start":11,"column_end":14},"name":"B16","qualname":"::ir::types::B16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 16 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7326},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906340,"byte_end":10906343,"line_start":19,"line_end":19,"column_start":11,"column_end":14},"name":"B32","qualname":"::ir::types::B32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 32 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7327},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906408,"byte_end":10906411,"line_start":22,"line_end":22,"column_start":11,"column_end":14},"name":"B64","qualname":"::ir::types::B64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 64 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7328},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906477,"byte_end":10906481,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"B128","qualname":"::ir::types::B128","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 128 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7329},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906601,"byte_end":10906603,"line_start":29,"line_end":29,"column_start":11,"column_end":13},"name":"I8","qualname":"::ir::types::I8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 8 bits.\n WARNING: arithmetic on 8bit integers is incomplete\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7330},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906725,"byte_end":10906728,"line_start":33,"line_end":33,"column_start":11,"column_end":14},"name":"I16","qualname":"::ir::types::I16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 16 bits.\n WARNING: arithmetic on 16bit integers is incomplete\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7331},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906794,"byte_end":10906797,"line_start":36,"line_end":36,"column_start":11,"column_end":14},"name":"I32","qualname":"::ir::types::I32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 32 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7332},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906863,"byte_end":10906866,"line_start":39,"line_end":39,"column_start":11,"column_end":14},"name":"I64","qualname":"::ir::types::I64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 64 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7333},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10906933,"byte_end":10906937,"line_start":42,"line_end":42,"column_start":11,"column_end":15},"name":"I128","qualname":"::ir::types::I128","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 128 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7334},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907146,"byte_end":10907149,"line_start":47,"line_end":47,"column_start":11,"column_end":14},"name":"F32","qualname":"::ir::types::F32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A 32-bit floating point type represented in the IEEE 754-2008\n *binary32* interchange format. This corresponds to the :c:type:`float`\n type in most C implementations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7335},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907359,"byte_end":10907362,"line_start":52,"line_end":52,"column_start":11,"column_end":14},"name":"F64","qualname":"::ir::types::F64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A 64-bit floating point type represented in the IEEE 754-2008\n *binary64* interchange format. This corresponds to the :c:type:`double`\n type in most C implementations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7336},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907437,"byte_end":10907440,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"R32","qualname":"::ir::types::R32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference type with 32 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7337},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907515,"byte_end":10907518,"line_start":58,"line_end":58,"column_start":11,"column_end":14},"name":"R64","qualname":"::ir::types::R64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference type with 64 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7338},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907605,"byte_end":10907609,"line_start":61,"line_end":61,"column_start":11,"column_end":15},"name":"B8X8","qualname":"::ir::types::B8X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7339},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907697,"byte_end":10907702,"line_start":64,"line_end":64,"column_start":11,"column_end":16},"name":"B16X4","qualname":"::ir::types::B16X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7340},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907790,"byte_end":10907795,"line_start":67,"line_end":67,"column_start":11,"column_end":16},"name":"B32X2","qualname":"::ir::types::B32X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7341},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907882,"byte_end":10907886,"line_start":70,"line_end":70,"column_start":11,"column_end":15},"name":"I8X8","qualname":"::ir::types::I8X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7342},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10907974,"byte_end":10907979,"line_start":73,"line_end":73,"column_start":11,"column_end":16},"name":"I16X4","qualname":"::ir::types::I16X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7343},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908067,"byte_end":10908072,"line_start":76,"line_end":76,"column_start":11,"column_end":16},"name":"I32X2","qualname":"::ir::types::I32X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7344},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908160,"byte_end":10908165,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"F32X2","qualname":"::ir::types::F32X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7345},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908253,"byte_end":10908258,"line_start":82,"line_end":82,"column_start":11,"column_end":16},"name":"B8X16","qualname":"::ir::types::B8X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7346},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908346,"byte_end":10908351,"line_start":85,"line_end":85,"column_start":11,"column_end":16},"name":"B16X8","qualname":"::ir::types::B16X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7347},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908439,"byte_end":10908444,"line_start":88,"line_end":88,"column_start":11,"column_end":16},"name":"B32X4","qualname":"::ir::types::B32X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7348},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908532,"byte_end":10908537,"line_start":91,"line_end":91,"column_start":11,"column_end":16},"name":"B64X2","qualname":"::ir::types::B64X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `b64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7349},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908625,"byte_end":10908630,"line_start":94,"line_end":94,"column_start":11,"column_end":16},"name":"I8X16","qualname":"::ir::types::I8X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7350},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908718,"byte_end":10908723,"line_start":97,"line_end":97,"column_start":11,"column_end":16},"name":"I16X8","qualname":"::ir::types::I16X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7351},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908811,"byte_end":10908816,"line_start":100,"line_end":100,"column_start":11,"column_end":16},"name":"I32X4","qualname":"::ir::types::I32X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7352},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908904,"byte_end":10908909,"line_start":103,"line_end":103,"column_start":11,"column_end":16},"name":"I64X2","qualname":"::ir::types::I64X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `i64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7353},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10908997,"byte_end":10909002,"line_start":106,"line_end":106,"column_start":11,"column_end":16},"name":"F32X4","qualname":"::ir::types::F32X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7354},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909090,"byte_end":10909095,"line_start":109,"line_end":109,"column_start":11,"column_end":16},"name":"F64X2","qualname":"::ir::types::F64X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `f64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7355},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909183,"byte_end":10909188,"line_start":112,"line_end":112,"column_start":11,"column_end":16},"name":"B8X32","qualname":"::ir::types::B8X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7356},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909277,"byte_end":10909283,"line_start":115,"line_end":115,"column_start":11,"column_end":17},"name":"B16X16","qualname":"::ir::types::B16X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7357},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909371,"byte_end":10909376,"line_start":118,"line_end":118,"column_start":11,"column_end":16},"name":"B32X8","qualname":"::ir::types::B32X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7358},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909464,"byte_end":10909469,"line_start":121,"line_end":121,"column_start":11,"column_end":16},"name":"B64X4","qualname":"::ir::types::B64X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7359},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909558,"byte_end":10909564,"line_start":124,"line_end":124,"column_start":11,"column_end":17},"name":"B128X2","qualname":"::ir::types::B128X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `b128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7360},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909652,"byte_end":10909657,"line_start":127,"line_end":127,"column_start":11,"column_end":16},"name":"I8X32","qualname":"::ir::types::I8X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7361},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909746,"byte_end":10909752,"line_start":130,"line_end":130,"column_start":11,"column_end":17},"name":"I16X16","qualname":"::ir::types::I16X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7362},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909840,"byte_end":10909845,"line_start":133,"line_end":133,"column_start":11,"column_end":16},"name":"I32X8","qualname":"::ir::types::I32X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7363},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10909933,"byte_end":10909938,"line_start":136,"line_end":136,"column_start":11,"column_end":16},"name":"I64X4","qualname":"::ir::types::I64X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7364},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910027,"byte_end":10910033,"line_start":139,"line_end":139,"column_start":11,"column_end":17},"name":"I128X2","qualname":"::ir::types::I128X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `i128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7365},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910121,"byte_end":10910126,"line_start":142,"line_end":142,"column_start":11,"column_end":16},"name":"F32X8","qualname":"::ir::types::F32X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7366},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910214,"byte_end":10910219,"line_start":145,"line_end":145,"column_start":11,"column_end":16},"name":"F64X4","qualname":"::ir::types::F64X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `f64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7367},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910307,"byte_end":10910312,"line_start":148,"line_end":148,"column_start":11,"column_end":16},"name":"B8X64","qualname":"::ir::types::B8X64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 64 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7368},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910401,"byte_end":10910407,"line_start":151,"line_end":151,"column_start":11,"column_end":17},"name":"B16X32","qualname":"::ir::types::B16X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7369},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910496,"byte_end":10910502,"line_start":154,"line_end":154,"column_start":11,"column_end":17},"name":"B32X16","qualname":"::ir::types::B32X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7370},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910590,"byte_end":10910595,"line_start":157,"line_end":157,"column_start":11,"column_end":16},"name":"B64X8","qualname":"::ir::types::B64X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7371},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910684,"byte_end":10910690,"line_start":160,"line_end":160,"column_start":11,"column_end":17},"name":"B128X4","qualname":"::ir::types::B128X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7372},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910778,"byte_end":10910783,"line_start":163,"line_end":163,"column_start":11,"column_end":16},"name":"I8X64","qualname":"::ir::types::I8X64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 64 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7373},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910872,"byte_end":10910878,"line_start":166,"line_end":166,"column_start":11,"column_end":17},"name":"I16X32","qualname":"::ir::types::I16X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7374},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10910967,"byte_end":10910973,"line_start":169,"line_end":169,"column_start":11,"column_end":17},"name":"I32X16","qualname":"::ir::types::I32X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7375},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10911061,"byte_end":10911066,"line_start":172,"line_end":172,"column_start":11,"column_end":16},"name":"I64X8","qualname":"::ir::types::I64X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7376},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10911155,"byte_end":10911161,"line_start":175,"line_end":175,"column_start":11,"column_end":17},"name":"I128X4","qualname":"::ir::types::I128X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7377},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10911250,"byte_end":10911256,"line_start":178,"line_end":178,"column_start":11,"column_end":17},"name":"F32X16","qualname":"::ir::types::F32X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7378},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/types.rs","byte_start":10911344,"byte_end":10911349,"line_start":181,"line_end":181,"column_start":11,"column_end":16},"name":"F64X8","qualname":"::ir::types::F64X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `f64` each.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":401881,"byte_end":401890,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"lane_type","qualname":"<Type>::lane_type","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the lane type of this SIMD vector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":402283,"byte_end":402290,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"lane_of","qualname":"<Type>::lane_of","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The type transformation that returns the lane type of a type variable; it is just a\n renaming of lane_type() to be used in context where we think in terms of type variable\n transformations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":402401,"byte_end":402415,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"log2_lane_bits","qualname":"<Type>::log2_lane_bits","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get log_2 of the number of bits in a lane.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":402738,"byte_end":402747,"line_start":67,"line_end":67,"column_start":12,"column_end":21},"name":"lane_bits","qualname":"<Type>::lane_bits","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of bits in a lane.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":403096,"byte_end":403099,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"int","qualname":"<Type>::int","value":"fn (bits: u16) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get an integer type with the requested number of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":403862,"byte_end":403878,"line_start":102,"line_end":102,"column_start":12,"column_end":28},"name":"as_bool_pedantic","qualname":"<Type>::as_bool_pedantic","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with the lanes replaced by\n booleans of the same size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":404540,"byte_end":404547,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"as_bool","qualname":"<Type>::as_bool","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with the lanes replaced by\n booleans of the same size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":404811,"byte_end":404821,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"half_width","qualname":"<Type>::half_width","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with lanes that are half the\n number of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1587},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":405300,"byte_end":405312,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"double_width","qualname":"<Type>::double_width","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with lanes that are twice the\n number of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":405704,"byte_end":405714,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"is_invalid","qualname":"<Type>::is_invalid","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the INVALID type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":405805,"byte_end":405815,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"is_special","qualname":"<Type>::is_special","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a special type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":406011,"byte_end":406018,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"is_lane","qualname":"<Type>::is_lane","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a lane type?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":406214,"byte_end":406223,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"is_vector","qualname":"<Type>::is_vector","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a SIMD vector type?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":406338,"byte_end":406345,"line_start":186,"line_end":186,"column_start":12,"column_end":19},"name":"is_bool","qualname":"<Type>::is_bool","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a scalar boolean type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":406528,"byte_end":406534,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"is_int","qualname":"<Type>::is_int","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a scalar integer type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":406719,"byte_end":406727,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"is_float","qualname":"<Type>::is_float","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a scalar floating point type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1595},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":406882,"byte_end":406890,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"is_flags","qualname":"<Type>::is_flags","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a CPU flags type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":407045,"byte_end":407051,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"is_ref","qualname":"<Type>::is_ref","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a ref type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":407482,"byte_end":407497,"line_start":231,"line_end":231,"column_start":12,"column_end":27},"name":"log2_lane_count","qualname":"<Type>::log2_lane_count","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get log_2 of the number of lanes in this SIMD vector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":407741,"byte_end":407751,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"lane_count","qualname":"<Type>::lane_count","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the number of lanes in this SIMD vector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":407887,"byte_end":407891,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"bits","qualname":"<Type>::bits","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of bits used to represent this type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":408048,"byte_end":408053,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Type>::bytes","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the number of bytes used to store this type in memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":408440,"byte_end":408442,"line_start":258,"line_end":258,"column_start":12,"column_end":14},"name":"by","qualname":"<Type>::by","value":"fn (self, n: u16) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a SIMD vector type with `n` times more lanes than this one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":408946,"byte_end":408957,"line_start":274,"line_end":274,"column_start":12,"column_end":23},"name":"half_vector","qualname":"<Type>::half_vector","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a SIMD vector with half the number of lanes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":409170,"byte_end":409175,"line_start":283,"line_end":283,"column_start":12,"column_end":17},"name":"index","qualname":"<Type>::index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Index of this type, for use with hash tables etc.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":409373,"byte_end":409387,"line_start":291,"line_end":291,"column_start":12,"column_end":26},"name":"wider_or_equal","qualname":"<Type>::wider_or_equal","value":"fn (self, other: Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True iff:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":409585,"byte_end":409604,"line_start":296,"line_end":296,"column_start":12,"column_end":31},"name":"triple_pointer_type","qualname":"<Type>::triple_pointer_type","value":"fn (triple: &Triple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the pointer type for the given target triple.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7380},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":417974,"byte_end":417984,"line_start":18,"line_end":18,"column_start":5,"column_end":15},"name":"Unassigned","qualname":"::ir::valueloc::ValueLoc::Unassigned","value":"ValueLoc::Unassigned","parent":{"krate":0,"index":7379},"children":[],"decl_id":null,"docs":" This value has not been assigned to a location yet.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7382},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418031,"byte_end":418034,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Reg","qualname":"::ir::valueloc::ValueLoc::Reg","value":"ValueLoc::Reg(RegUnit)","parent":{"krate":0,"index":7379},"children":[],"decl_id":null,"docs":" Value is assigned to a register.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7385},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418092,"byte_end":418097,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"name":"Stack","qualname":"::ir::valueloc::ValueLoc::Stack","value":"ValueLoc::Stack(StackSlot)","parent":{"krate":0,"index":7379},"children":[],"decl_id":null,"docs":" Value is assigned to a stack slot.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7379},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":417899,"byte_end":417907,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"ValueLoc","qualname":"::ir::valueloc::ValueLoc","value":"ValueLoc::{Unassigned, Reg, Stack}","parent":null,"children":[{"krate":0,"index":7380},{"krate":0,"index":7382},{"krate":0,"index":7385}],"decl_id":null,"docs":" Value location.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418296,"byte_end":418307,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"is_assigned","qualname":"<ValueLoc>::is_assigned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an assigned location? (That is, not `Unassigned`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418493,"byte_end":418503,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"unwrap_reg","qualname":"<ValueLoc>::unwrap_reg","value":"fn (self) -> RegUnit","parent":null,"children":[],"decl_id":null,"docs":" Get the register unit of this location, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418718,"byte_end":418730,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"unwrap_stack","qualname":"<ValueLoc>::unwrap_stack","value":"fn (self) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get the stack slot of this location, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":419012,"byte_end":419019,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"display","qualname":"<ValueLoc>::display","value":"fn <'a, R> (self, regs: R) -> DisplayValueLoc<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this value location, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":419397,"byte_end":419412,"line_start":67,"line_end":67,"column_start":12,"column_end":27},"name":"DisplayValueLoc","qualname":"::ir::valueloc::DisplayValueLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying a `ValueLoc` correctly requires the associated `RegInfo` from the target ISA.\n Without the register info, register units are simply show as numbers.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7401},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421041,"byte_end":421051,"line_start":103,"line_end":103,"column_start":5,"column_end":15},"name":"Unassigned","qualname":"::ir::valueloc::ArgumentLoc::Unassigned","value":"ArgumentLoc::Unassigned","parent":{"krate":0,"index":7400},"children":[],"decl_id":null,"docs":" This argument has not been assigned to a location yet.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7403},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421099,"byte_end":421102,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"Reg","qualname":"::ir::valueloc::ArgumentLoc::Reg","value":"ArgumentLoc::Reg(RegUnit)","parent":{"krate":0,"index":7400},"children":[],"decl_id":null,"docs":" Argument is passed in a register.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7406},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421208,"byte_end":421213,"line_start":107,"line_end":107,"column_start":5,"column_end":10},"name":"Stack","qualname":"::ir::valueloc::ArgumentLoc::Stack","value":"ArgumentLoc::Stack(i32)","parent":{"krate":0,"index":7400},"children":[],"decl_id":null,"docs":" Argument is passed on the stack, at the given byte offset into the argument array.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7400},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":420960,"byte_end":420971,"line_start":101,"line_end":101,"column_start":10,"column_end":21},"name":"ArgumentLoc","qualname":"::ir::valueloc::ArgumentLoc","value":"ArgumentLoc::{Unassigned, Reg, Stack}","parent":null,"children":[{"krate":0,"index":7401},{"krate":0,"index":7403},{"krate":0,"index":7406}],"decl_id":null,"docs":" Function argument location.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421412,"byte_end":421423,"line_start":118,"line_end":118,"column_start":12,"column_end":23},"name":"is_assigned","qualname":"<ArgumentLoc>::is_assigned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an assigned location? (That is, not `Unassigned`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1639},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421588,"byte_end":421594,"line_start":126,"line_end":126,"column_start":12,"column_end":18},"name":"is_reg","qualname":"<ArgumentLoc>::is_reg","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a register location?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421752,"byte_end":421760,"line_start":134,"line_end":134,"column_start":12,"column_end":20},"name":"is_stack","qualname":"<ArgumentLoc>::is_stack","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a stack location?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":422005,"byte_end":422012,"line_start":143,"line_end":143,"column_start":12,"column_end":19},"name":"display","qualname":"<ArgumentLoc>::display","value":"fn <'a, R> (self, regs: R) -> DisplayArgumentLoc<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this argument location, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1644},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":422405,"byte_end":422423,"line_start":152,"line_end":152,"column_start":12,"column_end":30},"name":"DisplayArgumentLoc","qualname":"::ir::valueloc::DisplayArgumentLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying a `ArgumentLoc` correctly requires the associated `RegInfo` from the target ISA.\n Without the register info, register units are simply show as numbers.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1731},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121564,"byte_end":121578,"line_start":68,"line_end":68,"column_start":10,"column_end":24},"name":"ValueLocations","qualname":"::ir::ValueLocations","value":"SecondaryMap<Value, ValueLoc>","parent":null,"children":[],"decl_id":null,"docs":" Map of value locations.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121646,"byte_end":121656,"line_start":71,"line_end":71,"column_start":10,"column_end":20},"name":"JumpTables","qualname":"::ir::JumpTables","value":"PrimaryMap<JumpTable, JumpTableData>","parent":null,"children":[],"decl_id":null,"docs":" Map of jump tables.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1733},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121741,"byte_end":121754,"line_start":74,"line_end":74,"column_start":10,"column_end":23},"name":"InstEncodings","qualname":"::ir::InstEncodings","value":"SecondaryMap<Inst, isa::Encoding>","parent":null,"children":[],"decl_id":null,"docs":" Map of instruction encodings.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121829,"byte_end":121839,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"EbbOffsets","qualname":"::ir::EbbOffsets","value":"SecondaryMap<Ebb, binemit::CodeOffset>","parent":null,"children":[],"decl_id":null,"docs":" Code offsets for EBBs.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1735},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":121926,"byte_end":121942,"line_start":80,"line_end":80,"column_start":10,"column_end":26},"name":"JumpTableOffsets","qualname":"::ir::JumpTableOffsets","value":"SecondaryMap<JumpTable, binemit::CodeOffset>","parent":null,"children":[],"decl_id":null,"docs":" Code offsets for Jump Tables.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1736},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122040,"byte_end":122050,"line_start":83,"line_end":83,"column_start":10,"column_end":20},"name":"SourceLocs","qualname":"::ir::SourceLocs","value":"SecondaryMap<Inst, SourceLoc>","parent":null,"children":[],"decl_id":null,"docs":" Source locations for instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7424},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122241,"byte_end":122251,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"ValueLabel","qualname":"::ir::ValueLabel","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marked with a label value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7452},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122351,"byte_end":122366,"line_start":93,"line_end":93,"column_start":12,"column_end":27},"name":"ValueLabelStart","qualname":"::ir::ValueLabelStart","value":"ValueLabelStart { from, label }","parent":null,"children":[{"krate":0,"index":7453},{"krate":0,"index":7454}],"decl_id":null,"docs":" A label of a Value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7453},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122422,"byte_end":122426,"line_start":95,"line_end":95,"column_start":9,"column_end":13},"name":"from","qualname":"::ir::ValueLabelStart::from","value":"ir::sourceloc::SourceLoc","parent":{"krate":0,"index":7452},"children":[],"decl_id":null,"docs":" Source location when it is in effect\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7454},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122473,"byte_end":122478,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"name":"label","qualname":"::ir::ValueLabelStart::label","value":"ir::ValueLabel","parent":{"krate":0,"index":7452},"children":[],"decl_id":null,"docs":" The label index.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7460},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122670,"byte_end":122676,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Starts","qualname":"::ir::ValueLabelAssignments::Starts","value":"ValueLabelAssignments::Starts(alloc::vec::Vec<ValueLabelStart>)","parent":{"krate":0,"index":7459},"children":[],"decl_id":null,"docs":" Original value labels assigned at transform.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":7463},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122758,"byte_end":122763,"line_start":108,"line_end":108,"column_start":5,"column_end":10},"name":"Alias","qualname":"::ir::ValueLabelAssignments::Alias","value":"ValueLabelAssignments::Alias { from, value }","parent":{"krate":0,"index":7459},"children":[],"decl_id":null,"docs":" A value alias to original value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7459},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":122589,"byte_end":122610,"line_start":103,"line_end":103,"column_start":10,"column_end":31},"name":"ValueLabelAssignments","qualname":"::ir::ValueLabelAssignments","value":"ValueLabelAssignments::{Starts, Alias}","parent":null,"children":[{"krate":0,"index":7460},{"krate":0,"index":7463}],"decl_id":null,"docs":" Value label assignements: label starts or value aliases.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1737},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isa","qualname":"::isa","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1744},{"krate":0,"index":1748},{"krate":0,"index":1754},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":2126},{"krate":0,"index":2144},{"krate":0,"index":2160},{"krate":0,"index":2227},{"krate":0,"index":2264},{"krate":0,"index":2338},{"krate":0,"index":2349},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":7958},{"krate":0,"index":7974},{"krate":0,"index":7975},{"krate":0,"index":7971},{"krate":0,"index":7972},{"krate":0,"index":7968},{"krate":0,"index":7969},{"krate":0,"index":7967},{"krate":0,"index":7965},{"krate":0,"index":7963},{"krate":0,"index":2353},{"krate":0,"index":2357},{"krate":0,"index":2359},{"krate":0,"index":2362},{"krate":0,"index":7977},{"krate":0,"index":7981},{"krate":0,"index":7980},{"krate":0,"index":2363},{"krate":0,"index":2367}],"decl_id":null,"docs":" Instruction Set Architectures.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7789},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553365,"byte_end":553369,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Fast","qualname":"::isa::call_conv::CallConv::Fast","value":"CallConv::Fast","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" Best performance, not ABI-stable\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7791},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553425,"byte_end":553429,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Cold","qualname":"::isa::call_conv::CallConv::Cold","value":"CallConv::Cold","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" Smallest caller code size, not ABI-stable\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7793},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553492,"byte_end":553499,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"SystemV","qualname":"::isa::call_conv::CallConv::SystemV","value":"CallConv::SystemV","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" System V-style convention used on many platforms\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7795},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553570,"byte_end":553585,"line_start":17,"line_end":17,"column_start":5,"column_end":20},"name":"WindowsFastcall","qualname":"::isa::call_conv::CallConv::WindowsFastcall","value":"CallConv::WindowsFastcall","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" Windows \"fastcall\" convention, also used for x64 and ARM\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7797},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553669,"byte_end":553685,"line_start":19,"line_end":19,"column_start":5,"column_end":21},"name":"BaldrdashSystemV","qualname":"::isa::call_conv::CallConv::BaldrdashSystemV","value":"CallConv::BaldrdashSystemV","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" SpiderMonkey WebAssembly convention on systems using natively SystemV\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7799},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553746,"byte_end":553762,"line_start":21,"line_end":21,"column_start":5,"column_end":21},"name":"BaldrdashWindows","qualname":"::isa::call_conv::CallConv::BaldrdashWindows","value":"CallConv::BaldrdashWindows","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" SpiderMonkey WebAssembly convention on Windows\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7801},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553827,"byte_end":553837,"line_start":23,"line_end":23,"column_start":5,"column_end":15},"name":"Probestack","qualname":"::isa::call_conv::CallConv::Probestack","value":"CallConv::Probestack","parent":{"krate":0,"index":7788},"children":[],"decl_id":null,"docs":" Specialized convention for the probestack function\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7788},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553309,"byte_end":553317,"line_start":9,"line_end":9,"column_start":10,"column_end":18},"name":"CallConv","qualname":"::isa::call_conv::CallConv","value":"CallConv::{Fast, Cold, SystemV, WindowsFastcall, BaldrdashSystemV, BaldrdashWindows, Probestack}","parent":null,"children":[{"krate":0,"index":7789},{"krate":0,"index":7791},{"krate":0,"index":7793},{"krate":0,"index":7795},{"krate":0,"index":7797},{"krate":0,"index":7799},{"krate":0,"index":7801}],"decl_id":null,"docs":" Calling convention identifiers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553944,"byte_end":553958,"line_start":28,"line_end":28,"column_start":12,"column_end":26},"name":"triple_default","qualname":"<CallConv>::triple_default","value":"fn (triple: &Triple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the default calling convention for the given target triple.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":554475,"byte_end":554486,"line_start":39,"line_end":39,"column_start":12,"column_end":23},"name":"for_libcall","qualname":"<CallConv>::for_libcall","value":"fn (isa: &dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the calling convention used for libcalls for the given ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":555163,"byte_end":555187,"line_start":53,"line_end":53,"column_start":12,"column_end":36},"name":"extends_windows_fastcall","qualname":"<CallConv>::extends_windows_fastcall","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the calling convention extending the Windows Fastcall ABI?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":555408,"byte_end":555425,"line_start":61,"line_end":61,"column_start":12,"column_end":29},"name":"extends_baldrdash","qualname":"<CallConv>::extends_baldrdash","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the calling convention extending the Baldrdash ABI?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7817},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":557290,"byte_end":557307,"line_start":17,"line_end":17,"column_start":12,"column_end":29},"name":"OperandConstraint","qualname":"::isa::constraints::OperandConstraint","value":"OperandConstraint { kind, regclass }","parent":null,"children":[{"krate":0,"index":7818},{"krate":0,"index":7819}],"decl_id":null,"docs":" Register constraint for a single value operand or instruction result.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7818},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":557350,"byte_end":557354,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"name":"kind","qualname":"::isa::constraints::OperandConstraint::kind","value":"isa::constraints::ConstraintKind","parent":{"krate":0,"index":7817},"children":[],"decl_id":null,"docs":" The kind of constraint.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7819},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":557519,"byte_end":557527,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"regclass","qualname":"::isa::constraints::OperandConstraint::regclass","value":"&'static isa::registers::RegClassData","parent":{"krate":0,"index":7817},"children":[],"decl_id":null,"docs":" The register class of the operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":557798,"byte_end":557807,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"satisfied","qualname":"<OperandConstraint>::satisfied","value":"fn (&self, loc: ValueLoc) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this operand constraint is satisfied by the given value location.\n For tied constraints, this only checks the register class, not that the\n counterpart operand has the same value location.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7827},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":558697,"byte_end":558700,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"Reg","qualname":"::isa::constraints::ConstraintKind::Reg","value":"ConstraintKind::Reg","parent":{"krate":0,"index":7826},"children":[],"decl_id":null,"docs":" This operand or result must be a register from the given register class.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7829},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":558885,"byte_end":558893,"line_start":64,"line_end":64,"column_start":5,"column_end":13},"name":"FixedReg","qualname":"::isa::constraints::ConstraintKind::FixedReg","value":"ConstraintKind::FixedReg(RegUnit)","parent":{"krate":0,"index":7826},"children":[],"decl_id":null,"docs":" This operand or result must be a fixed register.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7832},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":559429,"byte_end":559433,"line_start":74,"line_end":74,"column_start":5,"column_end":9},"name":"Tied","qualname":"::isa::constraints::ConstraintKind::Tied","value":"ConstraintKind::Tied(u8)","parent":{"krate":0,"index":7826},"children":[],"decl_id":null,"docs":" This result value must use the same register as an input value operand.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7835},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":559771,"byte_end":559780,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"FixedTied","qualname":"::isa::constraints::ConstraintKind::FixedTied","value":"ConstraintKind::FixedTied(RegUnit)","parent":{"krate":0,"index":7826},"children":[],"decl_id":null,"docs":" This operand must be a fixed register, and it has a tied counterpart.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7838},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":559997,"byte_end":560002,"line_start":87,"line_end":87,"column_start":5,"column_end":10},"name":"Stack","qualname":"::isa::constraints::ConstraintKind::Stack","value":"ConstraintKind::Stack","parent":{"krate":0,"index":7826},"children":[],"decl_id":null,"docs":" This operand must be a value in a stack slot.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7826},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":558595,"byte_end":558609,"line_start":56,"line_end":56,"column_start":10,"column_end":24},"name":"ConstraintKind","qualname":"::isa::constraints::ConstraintKind","value":"ConstraintKind::{Reg, FixedReg, Tied, FixedTied, Stack}","parent":null,"children":[{"krate":0,"index":7827},{"krate":0,"index":7829},{"krate":0,"index":7832},{"krate":0,"index":7835},{"krate":0,"index":7838}],"decl_id":null,"docs":" The different kinds of operand constraints.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7852},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":560100,"byte_end":560117,"line_start":92,"line_end":92,"column_start":12,"column_end":29},"name":"RecipeConstraints","qualname":"::isa::constraints::RecipeConstraints","value":"RecipeConstraints { ins, outs, fixed_ins, fixed_outs, tied_ops, clobbers_flags }","parent":null,"children":[{"krate":0,"index":7853},{"krate":0,"index":7854},{"krate":0,"index":7855},{"krate":0,"index":7856},{"krate":0,"index":7857},{"krate":0,"index":7858}],"decl_id":null,"docs":" Value operand constraints for an encoding recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7853},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":560537,"byte_end":560540,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"name":"ins","qualname":"::isa::constraints::RecipeConstraints::ins","value":"&'static [isa::constraints::OperandConstraint]","parent":{"krate":0,"index":7852},"children":[],"decl_id":null,"docs":" Constraints for the instruction's fixed value operands.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7854},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":560810,"byte_end":560814,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"name":"outs","qualname":"::isa::constraints::RecipeConstraints::outs","value":"&'static [isa::constraints::OperandConstraint]","parent":{"krate":0,"index":7852},"children":[],"decl_id":null,"docs":" Constraints for the instruction's fixed results.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7855},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":560923,"byte_end":560932,"line_start":109,"line_end":109,"column_start":9,"column_end":18},"name":"fixed_ins","qualname":"::isa::constraints::RecipeConstraints::fixed_ins","value":"bool","parent":{"krate":0,"index":7852},"children":[],"decl_id":null,"docs":" Are any of the input constraints `FixedReg` or `FixedTied`?\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7856},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":561018,"byte_end":561028,"line_start":112,"line_end":112,"column_start":9,"column_end":19},"name":"fixed_outs","qualname":"::isa::constraints::RecipeConstraints::fixed_outs","value":"bool","parent":{"krate":0,"index":7852},"children":[],"decl_id":null,"docs":" Are any of the output constraints `FixedReg` or `FixedTied`?\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7857},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":561123,"byte_end":561131,"line_start":115,"line_end":115,"column_start":9,"column_end":17},"name":"tied_ops","qualname":"::isa::constraints::RecipeConstraints::tied_ops","value":"bool","parent":{"krate":0,"index":7852},"children":[],"decl_id":null,"docs":" Are any of the input/output constraints `Tied` (but not `FixedTied`)?\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7858},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":561308,"byte_end":561322,"line_start":120,"line_end":120,"column_start":9,"column_end":23},"name":"clobbers_flags","qualname":"::isa::constraints::RecipeConstraints::clobbers_flags","value":"bool","parent":{"krate":0,"index":7852},"children":[],"decl_id":null,"docs":" Does this instruction clobber the CPU flags?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":561447,"byte_end":561456,"line_start":125,"line_end":125,"column_start":12,"column_end":21},"name":"satisfied","qualname":"<RecipeConstraints>::satisfied","value":"fn (&self, inst: Inst, divert: &RegDiversions, func: &Function) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that these constraints are satisfied by the operands on `inst`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7865},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":562900,"byte_end":562911,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"BranchRange","qualname":"::isa::constraints::BranchRange","value":"BranchRange { origin, bits }","parent":null,"children":[{"krate":0,"index":7866},{"krate":0,"index":7867}],"decl_id":null,"docs":" Constraints on the range of a branch instruction.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7866},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":563122,"byte_end":563128,"line_start":166,"line_end":166,"column_start":9,"column_end":15},"name":"origin","qualname":"::isa::constraints::BranchRange::origin","value":"u8","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Offset in bytes from the address of the branch instruction to the origin used for computing\n the branch displacement. This is the destination of a branch that encodes a 0 displacement.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7867},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":563309,"byte_end":563313,"line_start":170,"line_end":170,"column_start":9,"column_end":13},"name":"bits","qualname":"::isa::constraints::BranchRange::bits","value":"u8","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Number of bits in the signed byte displacement encoded in the instruction. This does not\n account for branches that can only target aligned addresses.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2159},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":563662,"byte_end":563670,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"contains","qualname":"<BranchRange>::contains","value":"fn (self, branch: CodeOffset, dest: CodeOffset) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if this branch range can represent the range from `branch` to `dest`, where\n `branch` is the code offset of the branch instruction itself and `dest` is the code offset\n of the destination EBB header.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":570442,"byte_end":570451,"line_start":174,"line_end":174,"column_start":12,"column_end":21},"name":"Encodings","qualname":"::isa::enc_tables::Encodings","value":"Encodings {  }","parent":null,"children":[{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216}],"decl_id":null,"docs":" An iterator over legal encodings for the instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":571211,"byte_end":571214,"line_start":194,"line_end":194,"column_start":12,"column_end":15},"name":"new","qualname":"<Encodings>::new","value":"fn (offset: usize, legalize: LegalizeCode, inst: &'a InstructionData, func: &'a Function, enclist: &'static [EncListEntry], legalize_actions: &'static [Legalize], recipe_preds: &'static [RecipePredicate], inst_preds: &'static [InstPredicate], isa_preds: PredicateView<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `Encodings`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":572103,"byte_end":572111,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"legalize","qualname":"<Encodings>::legalize","value":"fn (&self) -> Legalize","parent":null,"children":[],"decl_id":null,"docs":" Get the legalization action that caused the enumeration of encodings to stop.\n This can be the default legalization action for the type or a custom code for the\n instruction.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7873},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":574997,"byte_end":575005,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::isa::encoding::Encoding","value":"Encoding {  }","parent":null,"children":[{"krate":0,"index":7874},{"krate":0,"index":7875}],"decl_id":null,"docs":" Bits needed to encode an instruction as binary machine code.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575131,"byte_end":575134,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoding>::new","value":"fn (recipe: u16, bits: u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Encoding` containing `(recipe, bits)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575265,"byte_end":575271,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"recipe","qualname":"<Encoding>::recipe","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the recipe number in this encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575383,"byte_end":575387,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"bits","qualname":"<Encoding>::bits","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the recipe-specific encoding bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575501,"byte_end":575509,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_legal","qualname":"<Encoding>::is_legal","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a legal encoding, or the default placeholder?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2246},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":576145,"byte_end":576160,"line_start":63,"line_end":63,"column_start":12,"column_end":27},"name":"DisplayEncoding","qualname":"::isa::encoding::DisplayEncoding","value":"DisplayEncoding { encoding, recipe_names }","parent":null,"children":[{"krate":0,"index":2247},{"krate":0,"index":2248}],"decl_id":null,"docs":" Temporary object that holds enough context to properly display an encoding.\n This is meant to be created by `EncInfo::display()`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2247},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":576171,"byte_end":576179,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::isa::encoding::DisplayEncoding::encoding","value":"isa::encoding::Encoding","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2248},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":576199,"byte_end":576211,"line_start":65,"line_end":65,"column_start":9,"column_end":21},"name":"recipe_names","qualname":"::isa::encoding::DisplayEncoding::recipe_names","value":"&'static [&'static str]","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2252},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":576976,"byte_end":576985,"line_start":88,"line_end":88,"column_start":8,"column_end":17},"name":"base_size","qualname":"::isa::encoding::base_size","value":"fn (sizing: &RecipeSizing, _: Encoding, _: Inst, _: &RegDiversions, _: &Function) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the base size of the Recipe, assuming it's fixed. This is the default for most\n encodings; others can be variable and longer than this base size, depending on the registers\n they're using and use a different function, specific per platform.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2253},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577251,"byte_end":577263,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"RecipeSizing","qualname":"::isa::encoding::RecipeSizing","value":"RecipeSizing { base_size, compute_size, branch_range }","parent":null,"children":[{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256}],"decl_id":null,"docs":" Code size information for an encoding recipe.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2254},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577346,"byte_end":577355,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"base_size","qualname":"::isa::encoding::RecipeSizing::base_size","value":"u8","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Minimum size in bytes of instructions encoded with this recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2255},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577450,"byte_end":577462,"line_start":106,"line_end":106,"column_start":9,"column_end":21},"name":"compute_size","qualname":"::isa::encoding::RecipeSizing::compute_size","value":"for<'r, 's, 't0> fn(&'r isa::encoding::RecipeSizing, isa::encoding::Encoding, ir::entities::Inst, &'s regalloc::diversion::RegDiversions, &'t0 ir::function::Function) -> u8","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Method computing the instruction's real size, given inputs and outputs.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2256},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577631,"byte_end":577643,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"branch_range","qualname":"::isa::encoding::RecipeSizing::branch_range","value":"core::option::Option<isa::constraints::BranchRange>","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Allowed branch range in this recipe, if any.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7888},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577750,"byte_end":577757,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"EncInfo","qualname":"::isa::encoding::EncInfo","value":"EncInfo { constraints, sizing, names }","parent":null,"children":[{"krate":0,"index":7889},{"krate":0,"index":7890},{"krate":0,"index":7891}],"decl_id":null,"docs":" Information about all the encodings in this ISA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7889},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577818,"byte_end":577829,"line_start":118,"line_end":118,"column_start":9,"column_end":20},"name":"constraints","qualname":"::isa::encoding::EncInfo::constraints","value":"&'static [isa::constraints::RecipeConstraints]","parent":{"krate":0,"index":7888},"children":[],"decl_id":null,"docs":" Constraints on value operands per recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7890},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577912,"byte_end":577918,"line_start":121,"line_end":121,"column_start":9,"column_end":15},"name":"sizing","qualname":"::isa::encoding::EncInfo::sizing","value":"&'static [isa::encoding::RecipeSizing]","parent":{"krate":0,"index":7888},"children":[],"decl_id":null,"docs":" Code size information per recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7891},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":577989,"byte_end":577994,"line_start":124,"line_end":124,"column_start":9,"column_end":14},"name":"names","qualname":"::isa::encoding::EncInfo::names","value":"&'static [&'static str]","parent":{"krate":0,"index":7888},"children":[],"decl_id":null,"docs":" Names of encoding recipes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":578129,"byte_end":578148,"line_start":129,"line_end":129,"column_start":12,"column_end":31},"name":"operand_constraints","qualname":"<EncInfo>::operand_constraints","value":"fn (&self, enc: Encoding) -> Option<&'static RecipeConstraints>","parent":null,"children":[],"decl_id":null,"docs":" Get the value operand constraints for `enc` if it is a legal encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":578350,"byte_end":578357,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"display","qualname":"<EncInfo>::display","value":"fn (&self, enc: Encoding) -> DisplayEncoding","parent":null,"children":[],"decl_id":null,"docs":" Create an object that can display an ISA-dependent encoding properly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":578641,"byte_end":578650,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<EncInfo>::byte_size","value":"fn (&self, enc: Encoding, inst: Inst, divert: &RegDiversions, func: &Function) -> CodeOffset","parent":null,"children":[],"decl_id":null,"docs":" Get the size in bytes of `inst`, if it were encoded with `enc`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":579131,"byte_end":579143,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"branch_range","qualname":"<EncInfo>::branch_range","value":"fn (&self, enc: Encoding) -> Option<BranchRange>","parent":null,"children":[],"decl_id":null,"docs":" Get the branch range that is supported by `enc`, if any.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2264},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"registers","qualname":"::isa::registers","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","parent":null,"children":[{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2271},{"krate":0,"index":2280},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2298},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":7894},{"krate":0,"index":7907},{"krate":0,"index":7906},{"krate":0,"index":7904},{"krate":0,"index":7900},{"krate":0,"index":7901},{"krate":0,"index":7897},{"krate":0,"index":7898},{"krate":0,"index":2315},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":7909},{"krate":0,"index":7912},{"krate":0,"index":2323},{"krate":0,"index":2331},{"krate":0,"index":2335}],"decl_id":null,"docs":" Data structures describing the registers in an ISA.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2267},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":579755,"byte_end":579762,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"RegUnit","qualname":"::isa::registers::RegUnit","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Register units are the smallest units of register allocation.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2268},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":579911,"byte_end":579923,"line_start":18,"line_end":18,"column_start":10,"column_end":22},"name":"RegClassMask","qualname":"::isa::registers::RegClassMask","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A bit mask indexed by register classes.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2269},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":580138,"byte_end":580149,"line_start":24,"line_end":24,"column_start":10,"column_end":21},"name":"RegUnitMask","qualname":"::isa::registers::RegUnitMask","value":"[RegClassMask; 3]","parent":null,"children":[],"decl_id":null,"docs":" A bit mask indexed by register units.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2271},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":580402,"byte_end":580409,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"RegBank","qualname":"::isa::registers::RegBank","value":"RegBank { name, first_unit, units, names, prefix, first_toprc, num_toprcs, pressure_tracking }","parent":null,"children":[{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279}],"decl_id":null,"docs":" The register units in a target ISA are divided into disjoint register banks. Each bank covers a\n contiguous range of register units.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2272},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":580499,"byte_end":580503,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"name","qualname":"::isa::registers::RegBank::name","value":"&'static str","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" The name of this register bank as defined in the ISA's DSL definition.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2273},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":580574,"byte_end":580584,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"name":"first_unit","qualname":"::isa::registers::RegBank::first_unit","value":"u16","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" The first register unit in this bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2274},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":580661,"byte_end":580666,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"units","qualname":"::isa::registers::RegBank::units","value":"u16","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" The total number of register units in this bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2275},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":580807,"byte_end":580812,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"names","qualname":"::isa::registers::RegBank::names","value":"&'static [&'static str]","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Array of specially named register units. This array can be shorter than the number of units\n in the bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2276},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":581125,"byte_end":581131,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"prefix","qualname":"::isa::registers::RegBank::prefix","value":"&'static str","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Name prefix to use for those register units in the bank not covered by the `names` array.\n The remaining register units will be named this prefix followed by their decimal offset in\n the bank. So with a prefix `r`, registers will be named `r8`, `r9`, ...\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2277},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":581222,"byte_end":581233,"line_start":50,"line_end":50,"column_start":9,"column_end":20},"name":"first_toprc","qualname":"::isa::registers::RegBank::first_toprc","value":"usize","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Index of the first top-level register class in this bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":581515,"byte_end":581525,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"name":"num_toprcs","qualname":"::isa::registers::RegBank::num_toprcs","value":"usize","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Number of top-level register classes in this bank.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2279},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":581604,"byte_end":581621,"line_start":59,"line_end":59,"column_start":9,"column_end":26},"name":"pressure_tracking","qualname":"::isa::registers::RegBank::pressure_tracking","value":"bool","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Is register pressure tracking enabled for this bank?\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2286},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":583260,"byte_end":583268,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"RegClass","qualname":"::isa::registers::RegClass","value":"&'static RegClassData","parent":null,"children":[],"decl_id":null,"docs":" A register class reference.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2287},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":583639,"byte_end":583651,"line_start":118,"line_end":118,"column_start":12,"column_end":24},"name":"RegClassData","qualname":"::isa::registers::RegClassData","value":"RegClassData { name, index, width, bank, toprc, first, subclasses, mask, info, pinned_reg }","parent":null,"children":[{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297}],"decl_id":null,"docs":" Data about a register class.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":583702,"byte_end":583706,"line_start":120,"line_end":120,"column_start":9,"column_end":13},"name":"name","qualname":"::isa::registers::RegClassData::name","value":"&'static str","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" The name of the register class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2289},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":583797,"byte_end":583802,"line_start":123,"line_end":123,"column_start":9,"column_end":14},"name":"index","qualname":"::isa::registers::RegClassData::index","value":"u8","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" The index of this class in the ISA's RegInfo description.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2290},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":583875,"byte_end":583880,"line_start":126,"line_end":126,"column_start":9,"column_end":14},"name":"width","qualname":"::isa::registers::RegClassData::width","value":"u8","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" How many register units to allocate per register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2291},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":583953,"byte_end":583957,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"bank","qualname":"::isa::registers::RegClassData::bank","value":"u8","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" Index of the register bank this class belongs to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2292},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584037,"byte_end":584042,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"name":"toprc","qualname":"::isa::registers::RegClassData::toprc","value":"u8","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" Index of the top-level register class contains this one.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2293},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584104,"byte_end":584109,"line_start":135,"line_end":135,"column_start":9,"column_end":14},"name":"first","qualname":"::isa::registers::RegClassData::first","value":"u16","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" The first register unit in this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584250,"byte_end":584260,"line_start":140,"line_end":140,"column_start":9,"column_end":19},"name":"subclasses","qualname":"::isa::registers::RegClassData::subclasses","value":"u32","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" Bit-mask of sub-classes of this register class, including itself.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2295},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584440,"byte_end":584444,"line_start":144,"line_end":144,"column_start":9,"column_end":13},"name":"mask","qualname":"::isa::registers::RegClassData::mask","value":"[u32; _]","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" Mask of register units in the class. If `width > 1`, the mask only has a bit set for the\n first register unit in each allocatable register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2296},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584538,"byte_end":584542,"line_start":147,"line_end":147,"column_start":9,"column_end":13},"name":"info","qualname":"::isa::registers::RegClassData::info","value":"&'static isa::registers::RegInfo","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" The global `RegInfo` instance containing this register class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2297},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584774,"byte_end":584784,"line_start":153,"line_end":153,"column_start":9,"column_end":19},"name":"pinned_reg","qualname":"::isa::registers::RegClassData::pinned_reg","value":"core::option::Option<u16>","parent":{"krate":0,"index":2287},"children":[],"decl_id":null,"docs":" The \"pinned\" register of the associated register bank.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":585086,"byte_end":585101,"line_start":161,"line_end":161,"column_start":12,"column_end":27},"name":"intersect_index","qualname":"<RegClassData>::intersect_index","value":"fn (&self, other: RegClass) -> Option<RegClassIndex>","parent":null,"children":[],"decl_id":null,"docs":" Get the register class index corresponding to the intersection of `self` and `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":585618,"byte_end":585627,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"intersect","qualname":"<RegClassData>::intersect","value":"fn (&self, other: RegClass) -> Option<RegClass>","parent":null,"children":[],"decl_id":null,"docs":" Get the intersection of `self` and `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":585894,"byte_end":585906,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"has_subclass","qualname":"<RegClassData>::has_subclass","value":"fn <RCI> (&self, other: RCI) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `other` is a subclass of this register class.\n A register class is considered to be a subclass of itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2304},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586097,"byte_end":586102,"line_start":187,"line_end":187,"column_start":12,"column_end":17},"name":"toprc","qualname":"<RegClassData>::toprc","value":"fn (&self) -> RegClass","parent":null,"children":[],"decl_id":null,"docs":" Get the top-level register class containing this class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586242,"byte_end":586246,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"unit","qualname":"<RegClassData>::unit","value":"fn (&self, offset: usize) -> RegUnit","parent":null,"children":[],"decl_id":null,"docs":" Get a specific register unit in this class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2306},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586448,"byte_end":586456,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"contains","qualname":"<RegClassData>::contains","value":"fn (&self, regunit: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this register class contain `regunit`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2307},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586695,"byte_end":586708,"line_start":204,"line_end":204,"column_start":12,"column_end":25},"name":"is_pinned_reg","qualname":"<RegClassData>::is_pinned_reg","value":"fn (&self, enabled: bool, regunit: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If the pinned register is used, is the given regunit the pinned register of this class?\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586674,"byte_end":586683,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":7894},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587627,"byte_end":587640,"line_start":236,"line_end":236,"column_start":12,"column_end":25},"name":"RegClassIndex","qualname":"::isa::registers::RegClassIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A small reference to a register class.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2322},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":588257,"byte_end":588269,"line_start":264,"line_end":264,"column_start":8,"column_end":20},"name":"regs_overlap","qualname":"::isa::registers::regs_overlap","value":"fn (rc1: RegClass, reg1: RegUnit, rc2: RegClass, reg2: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test of two registers overlap.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7909},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":588663,"byte_end":588670,"line_start":275,"line_end":275,"column_start":12,"column_end":19},"name":"RegInfo","qualname":"::isa::registers::RegInfo","value":"RegInfo { banks, classes }","parent":null,"children":[{"krate":0,"index":7910},{"krate":0,"index":7911}],"decl_id":null,"docs":" Information about the registers in an ISA.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7910},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":588868,"byte_end":588873,"line_start":278,"line_end":278,"column_start":9,"column_end":14},"name":"banks","qualname":"::isa::registers::RegInfo::banks","value":"&'static [isa::registers::RegBank]","parent":{"krate":0,"index":7909},"children":[],"decl_id":null,"docs":" All register banks, ordered by their `first_unit`. The register banks are disjoint, but\n there may be holes of unused register unit numbers between banks due to alignment.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7911},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":588997,"byte_end":589004,"line_start":281,"line_end":281,"column_start":9,"column_end":16},"name":"classes","qualname":"::isa::registers::RegInfo::classes","value":"&'static [&'static isa::registers::RegClassData]","parent":{"krate":0,"index":7909},"children":[],"decl_id":null,"docs":" All register classes ordered topologically so a sub-class always follows its parent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":589105,"byte_end":589128,"line_start":286,"line_end":286,"column_start":12,"column_end":35},"name":"bank_containing_regunit","qualname":"<RegInfo>::bank_containing_regunit","value":"fn (&self, regunit: RegUnit) -> Option<&RegBank>","parent":null,"children":[],"decl_id":null,"docs":" Get the register bank holding `regunit`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2326},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":589417,"byte_end":589430,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"parse_regunit","qualname":"<RegInfo>::parse_regunit","value":"fn (&self, name: &str) -> Option<RegUnit>","parent":null,"children":[],"decl_id":null,"docs":" Try to parse a regunit name. The name is not expected to begin with `%`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":589665,"byte_end":589680,"line_start":300,"line_end":300,"column_start":12,"column_end":27},"name":"display_regunit","qualname":"<RegInfo>::display_regunit","value":"fn (&self, regunit: RegUnit) -> DisplayRegUnit","parent":null,"children":[],"decl_id":null,"docs":" Make a temporary object that can display a register unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2329},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":589882,"byte_end":589884,"line_start":308,"line_end":308,"column_start":12,"column_end":14},"name":"rc","qualname":"<RegInfo>::rc","value":"fn (&self, idx: RegClassIndex) -> RegClass","parent":null,"children":[],"decl_id":null,"docs":" Get the register class corresponding to `idx`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2330},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":590047,"byte_end":590052,"line_start":313,"line_end":313,"column_start":12,"column_end":17},"name":"toprc","qualname":"<RegInfo>::toprc","value":"fn (&self, idx: RegClassIndex) -> RegClass","parent":null,"children":[],"decl_id":null,"docs":" Get the top-level register class containing the `idx` class.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2331},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":590241,"byte_end":590255,"line_start":319,"line_end":319,"column_start":12,"column_end":26},"name":"DisplayRegUnit","qualname":"::isa::registers::DisplayRegUnit","value":"DisplayRegUnit {  }","parent":null,"children":[{"krate":0,"index":2333},{"krate":0,"index":2334}],"decl_id":null,"docs":" Temporary object that holds enough information to print a register unit.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7914},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":591873,"byte_end":591881,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"StackRef","qualname":"::isa::stack::StackRef","value":"StackRef { base, offset }","parent":null,"children":[{"krate":0,"index":7915},{"krate":0,"index":7916}],"decl_id":null,"docs":" A method for referencing a stack slot in the current stack frame.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7915},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":591941,"byte_end":591945,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"name":"base","qualname":"::isa::stack::StackRef::base","value":"isa::stack::StackBase","parent":{"krate":0,"index":7914},"children":[],"decl_id":null,"docs":" The base register to use for addressing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7916},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":592052,"byte_end":592058,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"offset","qualname":"::isa::stack::StackRef::offset","value":"i32","parent":{"krate":0,"index":7914},"children":[],"decl_id":null,"docs":" Immediate offset from the base register to the first byte of the stack slot.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":592192,"byte_end":592198,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"masked","qualname":"<StackRef>::masked","value":"fn (ss: StackSlot, mask: StackBaseMask, frame: &StackSlots) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the stack slot `ss` using one of the base pointers in `mask`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":592560,"byte_end":592562,"line_start":37,"line_end":37,"column_start":12,"column_end":14},"name":"sp","qualname":"<StackRef>::sp","value":"fn (ss: StackSlot, frame: &StackSlots) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to `ss` using the stack pointer as a base.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7923},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":593619,"byte_end":593621,"line_start":65,"line_end":65,"column_start":5,"column_end":7},"name":"SP","qualname":"::isa::stack::StackBase::SP","value":"StackBase::SP","parent":{"krate":0,"index":7922},"children":[],"decl_id":null,"docs":" Use the stack pointer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7926},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":593683,"byte_end":593685,"line_start":68,"line_end":68,"column_start":5,"column_end":7},"name":"FP","qualname":"::isa::stack::StackBase::FP","value":"StackBase::FP","parent":{"krate":0,"index":7922},"children":[],"decl_id":null,"docs":" Use the frame pointer (if one is present).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7929},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":593817,"byte_end":593821,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"Zone","qualname":"::isa::stack::StackBase::Zone","value":"StackBase::Zone","parent":{"krate":0,"index":7922},"children":[],"decl_id":null,"docs":" Use an explicit zone pointer in a general-purpose register.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7922},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":593572,"byte_end":593581,"line_start":63,"line_end":63,"column_start":10,"column_end":19},"name":"StackBase","qualname":"::isa::stack::StackBase","value":"StackBase::{SP, FP, Zone}","parent":null,"children":[{"krate":0,"index":7923},{"krate":0,"index":7926},{"krate":0,"index":7929}],"decl_id":null,"docs":" Generic base register for referencing stack slots.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7943},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":594369,"byte_end":594382,"line_start":87,"line_end":87,"column_start":12,"column_end":25},"name":"StackBaseMask","qualname":"::isa::stack::StackBaseMask","value":"","parent":null,"children":[],"decl_id":null,"docs":" Bit mask of supported stack bases.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":594481,"byte_end":594489,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"name":"contains","qualname":"<StackBaseMask>::contains","value":"fn (self, base: StackBase) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this mask contains the `base` variant.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2350},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":426262,"byte_end":426268,"line_start":107,"line_end":107,"column_start":8,"column_end":14},"name":"lookup","qualname":"::isa::lookup","value":"fn (triple: Triple) -> Result<Builder, LookupError>","parent":null,"children":[],"decl_id":null,"docs":" Look for an ISA for the given `triple`.\n Return a builder that can create a corresponding `TargetIsa`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2351},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":426928,"byte_end":426942,"line_start":121,"line_end":121,"column_start":8,"column_end":22},"name":"lookup_by_name","qualname":"::isa::lookup_by_name","value":"fn (name: &str) -> Result<Builder, LookupError>","parent":null,"children":[],"decl_id":null,"docs":" Look for a supported ISA with the given `name`.\n Return a builder that can create a corresponding `TargetIsa`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7959},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427292,"byte_end":427307,"line_start":131,"line_end":131,"column_start":5,"column_end":20},"name":"SupportDisabled","qualname":"::isa::LookupError::SupportDisabled","value":"LookupError::SupportDisabled","parent":{"krate":0,"index":7958},"children":[],"decl_id":null,"docs":" Support for this target was disabled in the current build.\n","sig":null,"attributes":[{"value":"error(\"Support for this target is disabled\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427240,"byte_end":427287,"line_start":130,"line_end":130,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7961},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427445,"byte_end":427456,"line_start":135,"line_end":135,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::isa::LookupError::Unsupported","value":"LookupError::Unsupported","parent":{"krate":0,"index":7958},"children":[],"decl_id":null,"docs":" Support for this target has not yet been implemented.\n","sig":null,"attributes":[{"value":"error(\"Support for this target has not been implemented yet\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427376,"byte_end":427440,"line_start":134,"line_end":134,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":7958},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427155,"byte_end":427166,"line_start":128,"line_end":128,"column_start":10,"column_end":21},"name":"LookupError","qualname":"::isa::LookupError","value":"LookupError::{SupportDisabled, Unsupported}","parent":null,"children":[{"krate":0,"index":7959},{"krate":0,"index":7961}],"decl_id":null,"docs":" Describes reason for target lookup failure\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2353},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427600,"byte_end":427607,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"Builder","qualname":"::isa::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356}],"decl_id":null,"docs":" Builder for a `TargetIsa`.\n Modify the ISA-specific settings before creating the `TargetIsa` trait object with `finish`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427927,"byte_end":427933,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"finish","qualname":"<Builder>::finish","value":"fn (self, shared_flags: settings::Flags) -> Box<dyn TargetIsa>","parent":null,"children":[],"decl_id":null,"docs":" Combine the ISA-specific settings with the provided ISA-independent settings and allocate a\n fully configured `TargetIsa` trait object.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428511,"byte_end":428519,"line_start":168,"line_end":168,"column_start":10,"column_end":18},"name":"Legalize","qualname":"::isa::Legalize","value":"fn(ir::Inst, &mut ir::Function, &mut flowgraph::ControlFlowGraph,\n   &dyn TargetIsa) -> bool","parent":null,"children":[],"decl_id":null,"docs":" After determining that an instruction doesn't have an encoding, how should we proceed to\n legalize it?","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7977},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428781,"byte_end":428801,"line_start":174,"line_end":174,"column_start":12,"column_end":32},"name":"TargetFrontendConfig","qualname":"::isa::TargetFrontendConfig","value":"TargetFrontendConfig { default_call_conv, pointer_width }","parent":null,"children":[{"krate":0,"index":7978},{"krate":0,"index":7979}],"decl_id":null,"docs":" This struct provides information that a frontend may need to know about a target to\n produce Cranelift IR for the target.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7978},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428866,"byte_end":428883,"line_start":176,"line_end":176,"column_start":9,"column_end":26},"name":"default_call_conv","qualname":"::isa::TargetFrontendConfig::default_call_conv","value":"isa::call_conv::CallConv","parent":{"krate":0,"index":7977},"children":[],"decl_id":null,"docs":" The default calling convention of the target.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7979},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428945,"byte_end":428958,"line_start":179,"line_end":179,"column_start":9,"column_end":22},"name":"pointer_width","qualname":"::isa::TargetFrontendConfig::pointer_width","value":"target_lexicon::triple::PointerWidth","parent":{"krate":0,"index":7977},"children":[],"decl_id":null,"docs":" The pointer width of the target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429061,"byte_end":429073,"line_start":184,"line_end":184,"column_start":12,"column_end":24},"name":"pointer_type","qualname":"<TargetFrontendConfig>::pointer_type","value":"fn (self) -> ir::Type","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer type of this target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429243,"byte_end":429255,"line_start":189,"line_end":189,"column_start":12,"column_end":24},"name":"pointer_bits","qualname":"<TargetFrontendConfig>::pointer_bits","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the width of pointers on this target, in units of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429391,"byte_end":429404,"line_start":194,"line_end":194,"column_start":12,"column_end":25},"name":"pointer_bytes","qualname":"<TargetFrontendConfig>::pointer_bytes","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the width of pointers on this target, in units of bytes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2367},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429615,"byte_end":429624,"line_start":201,"line_end":201,"column_start":11,"column_end":20},"name":"TargetIsa","qualname":"::isa::TargetIsa","value":"TargetIsa: fmt::Display + Sync","parent":null,"children":[{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396}],"decl_id":null,"docs":" Methods that are specialized to a target ISA. Implies a Display trait that shows the\n shared flags, as well as any isa-specific flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2368},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429689,"byte_end":429693,"line_start":203,"line_end":203,"column_start":8,"column_end":12},"name":"name","qualname":"::isa::TargetIsa::name","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the name of this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2369},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429797,"byte_end":429803,"line_start":206,"line_end":206,"column_start":8,"column_end":14},"name":"triple","qualname":"::isa::TargetIsa::triple","value":"fn (&self) -> &Triple","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the target triple that was used to make this trait object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429911,"byte_end":429916,"line_start":209,"line_end":209,"column_start":8,"column_end":13},"name":"flags","qualname":"::isa::TargetIsa::flags","value":"fn (&self) -> &settings::Flags","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the ISA-independent flags that were used to make this trait object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2371},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":430012,"byte_end":430029,"line_start":212,"line_end":212,"column_start":8,"column_end":25},"name":"default_call_conv","qualname":"::isa::TargetIsa::default_call_conv","value":"fn (&self) -> CallConv","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the default calling convention of this target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2372},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":430155,"byte_end":430167,"line_start":217,"line_end":217,"column_start":8,"column_end":20},"name":"pointer_type","qualname":"::isa::TargetIsa::pointer_type","value":"fn (&self) -> ir::Type","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the pointer type of this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2373},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":430313,"byte_end":430326,"line_start":222,"line_end":222,"column_start":8,"column_end":21},"name":"pointer_width","qualname":"::isa::TargetIsa::pointer_width","value":"fn (&self) -> PointerWidth","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the width of pointers on this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2374},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":430478,"byte_end":430490,"line_start":227,"line_end":227,"column_start":8,"column_end":20},"name":"pointer_bits","qualname":"::isa::TargetIsa::pointer_bits","value":"fn (&self) -> u8","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the width of pointers on this ISA, in units of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":430622,"byte_end":430635,"line_start":232,"line_end":232,"column_start":8,"column_end":21},"name":"pointer_bytes","qualname":"::isa::TargetIsa::pointer_bytes","value":"fn (&self) -> u8","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the width of pointers on this ISA, in units of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":430774,"byte_end":430789,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"frontend_config","qualname":"::isa::TargetIsa::frontend_config","value":"fn (&self) -> TargetFrontendConfig","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the information needed by frontends producing Cranelift IR.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":431062,"byte_end":431076,"line_start":245,"line_end":245,"column_start":8,"column_end":22},"name":"uses_cpu_flags","qualname":"::isa::TargetIsa::uses_cpu_flags","value":"fn (&self) -> bool","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Does the CPU implement scalar comparisons using a CPU flags register?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2378},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":431180,"byte_end":431202,"line_start":250,"line_end":250,"column_start":8,"column_end":30},"name":"uses_complex_addresses","qualname":"::isa::TargetIsa::uses_complex_addresses","value":"fn (&self) -> bool","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Does the CPU implement multi-register addressing?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2379},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":431315,"byte_end":431328,"line_start":255,"line_end":255,"column_start":8,"column_end":21},"name":"register_info","qualname":"::isa::TargetIsa::register_info","value":"fn (&self) -> RegInfo","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get a data structure describing the registers in this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":431426,"byte_end":431441,"line_start":258,"line_end":258,"column_start":8,"column_end":23},"name":"legal_encodings","qualname":"::isa::TargetIsa::legal_encodings","value":"fn <'a> (&'a self, func: &'a ir::Function, inst: &'a ir::InstructionData, ctrl_typevar: ir::Type) -> Encodings<'a>","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Returns an iterator over legal encodings for the instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":431907,"byte_end":431913,"line_start":271,"line_end":271,"column_start":8,"column_end":14},"name":"encode","qualname":"::isa::TargetIsa::encode","value":"fn (&self, func: &ir::Function, inst: &ir::InstructionData, ctrl_typevar: ir::Type) -> Result<Encoding, Legalize>","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Encode an instruction after determining it is legal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":432280,"byte_end":432293,"line_start":282,"line_end":282,"column_start":8,"column_end":21},"name":"encoding_info","qualname":"::isa::TargetIsa::encoding_info","value":"fn (&self) -> EncInfo","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get a data structure describing the instruction encodings in this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":434252,"byte_end":434270,"line_start":317,"line_end":317,"column_start":8,"column_end":26},"name":"legalize_signature","qualname":"::isa::TargetIsa::legalize_signature","value":"fn (&self, sig: &mut Cow<ir::Signature>, current: bool) -> ()","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Legalize a function signature.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":434722,"byte_end":434743,"line_start":325,"line_end":325,"column_start":8,"column_end":29},"name":"regclass_for_abi_type","qualname":"::isa::TargetIsa::regclass_for_abi_type","value":"fn (&self, ty: ir::Type) -> RegClass","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the register class that should be used to represent an ABI argument or return value of\n type `ty`. This should be the top-level register class that contains the argument\n registers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":434992,"byte_end":435013,"line_start":331,"line_end":331,"column_start":8,"column_end":29},"name":"allocatable_registers","qualname":"::isa::TargetIsa::allocatable_registers","value":"fn (&self, func: &ir::Function) -> regalloc::RegisterSet","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Get the set of allocatable registers that can be used when compiling `func`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":435225,"byte_end":435242,"line_start":336,"line_end":336,"column_start":8,"column_end":25},"name":"prologue_epilogue","qualname":"::isa::TargetIsa::prologue_epilogue","value":"fn (&self, func: &mut ir::Function) -> CodegenResult<()>","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Compute the stack layout and insert prologue and epilogue code into `func`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":436803,"byte_end":436826,"line_start":374,"line_end":374,"column_start":8,"column_end":31},"name":"emit_function_to_memory","qualname":"::isa::TargetIsa::emit_function_to_memory","value":"fn (&self, func: &ir::Function, sink: &mut binemit::MemoryCodeSink) -> ()","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Emit a whole function into memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":436964,"byte_end":436995,"line_start":377,"line_end":377,"column_start":8,"column_end":39},"name":"unsigned_add_overflow_condition","qualname":"::isa::TargetIsa::unsigned_add_overflow_condition","value":"fn (&self) -> ir::condcodes::IntCC","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" IntCC condition for Unsigned Addition Overflow (Carry).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":437110,"byte_end":437141,"line_start":380,"line_end":380,"column_start":8,"column_end":39},"name":"unsigned_sub_overflow_condition","qualname":"::isa::TargetIsa::unsigned_sub_overflow_condition","value":"fn (&self) -> ir::condcodes::IntCC","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" IntCC condition for Unsigned Subtraction Overflow (Borrow/Carry).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":437338,"byte_end":437354,"line_start":385,"line_end":385,"column_start":8,"column_end":24},"name":"emit_unwind_info","qualname":"::isa::TargetIsa::emit_unwind_info","value":"fn (&self, _func: &ir::Function, _mem: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":2367},"children":[],"decl_id":null,"docs":" Emit unwind information for the given function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2397},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"loop_analysis","qualname":"::loop_analysis","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2404},{"krate":0,"index":2407},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":7983},{"krate":0,"index":7998},{"krate":0,"index":7996},{"krate":0,"index":7992},{"krate":0,"index":7993},{"krate":0,"index":7989},{"krate":0,"index":7990},{"krate":0,"index":7986},{"krate":0,"index":8003},{"krate":0,"index":8006},{"krate":0,"index":8008},{"krate":0,"index":7999},{"krate":0,"index":8001},{"krate":0,"index":2414},{"krate":0,"index":2418},{"krate":0,"index":2421},{"krate":0,"index":2423},{"krate":0,"index":2430}],"decl_id":null,"docs":" A loop analysis represented as mappings of loops to their header Ebb\n and parent in the loop tree.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7983},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":595097,"byte_end":595101,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"Loop","qualname":"::loop_analysis::Loop","value":"","parent":null,"children":[],"decl_id":null,"docs":" A opaque reference to a code loop.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":595375,"byte_end":595387,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"LoopAnalysis","qualname":"::loop_analysis::LoopAnalysis","value":"LoopAnalysis {  }","parent":null,"children":[{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417}],"decl_id":null,"docs":" Loop tree information for a single function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":596033,"byte_end":596036,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<LoopAnalysis>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new blank loop analysis struct. Use `compute` to compute the loop analysis for\n a function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":596258,"byte_end":596263,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"loops","qualname":"<LoopAnalysis>::loops","value":"fn (&self) -> Keys<Loop>","parent":null,"children":[],"decl_id":null,"docs":" Returns all the loops contained in a function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":596506,"byte_end":596517,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"loop_header","qualname":"<LoopAnalysis>::loop_header","value":"fn (&self, lp: Loop) -> Ebb","parent":null,"children":[],"decl_id":null,"docs":" Returns the header EBB of a particular loop.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":596655,"byte_end":596666,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"loop_parent","qualname":"<LoopAnalysis>::loop_parent","value":"fn (&self, lp: Loop) -> Option<Loop>","parent":null,"children":[],"decl_id":null,"docs":" Return the eventual parent of a loop in the loop tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":596903,"byte_end":596913,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"is_in_loop","qualname":"<LoopAnalysis>::is_in_loop","value":"fn (&self, ebb: Ebb, lp: Loop) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if an Ebb belongs to a loop by running a finger along the loop tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":597354,"byte_end":597367,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"is_child_loop","qualname":"<LoopAnalysis>::is_child_loop","value":"fn (&self, child: Loop, parent: Loop) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determines if a loop is contained in another loop.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":597789,"byte_end":597796,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"compute","qualname":"<LoopAnalysis>::compute","value":"fn (&mut self, func: &Function, cfg: &ControlFlowGraph, domtree: &DominatorTree) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Detects the loops in a function. Needs the control flow graph and the dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":598507,"byte_end":598515,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<LoopAnalysis>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the loop analysis is in a valid state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":598779,"byte_end":598784,"line_start":125,"line_end":125,"column_start":12,"column_end":17},"name":"clear","qualname":"<LoopAnalysis>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all the data structures contained in the loop analysis. This will leave the\n analysis in a similar state to a context returned by `new()` except that allocated\n memory be retained.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2436},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/print_errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print_errors","qualname":"::print_errors","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/print_errors.rs","parent":null,"children":[{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2450},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2464},{"krate":0,"index":2469},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479}],"decl_id":null,"docs":" Utility routines for pretty-printing error messages.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2461},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/print_errors.rs","byte_start":608562,"byte_end":608583,"line_start":18,"line_end":18,"column_start":8,"column_end":29},"name":"pretty_verifier_error","qualname":"::print_errors::pretty_verifier_error","value":"fn <'a> (func: &ir::Function, isa: Option<&dyn TargetIsa>, func_w: Option<Box<dyn FuncWriter + 'a>>, errors: VerifierErrors) -> String","parent":null,"children":[],"decl_id":null,"docs":" Pretty-print a verifier error.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2479},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/print_errors.rs","byte_start":613765,"byte_end":613777,"line_start":221,"line_end":221,"column_start":8,"column_end":20},"name":"pretty_error","qualname":"::print_errors::pretty_error","value":"fn (func: &ir::Function, isa: Option<&dyn TargetIsa>, err: CodegenError) -> String","parent":null,"children":[],"decl_id":null,"docs":" Pretty-print a Cranelift error.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2480},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"settings","qualname":"::settings","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","parent":null,"children":[{"krate":0,"index":2481},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":8011},{"krate":0,"index":8014},{"krate":0,"index":2495},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":8016},{"krate":0,"index":8034},{"krate":0,"index":8035},{"krate":0,"index":8032},{"krate":0,"index":8028},{"krate":0,"index":8029},{"krate":0,"index":8025},{"krate":0,"index":8026},{"krate":0,"index":2510},{"krate":0,"index":8040},{"krate":0,"index":8046},{"krate":0,"index":8044},{"krate":0,"index":2512},{"krate":0,"index":2516},{"krate":0,"index":8109},{"krate":0,"index":8112},{"krate":0,"index":8062},{"krate":0,"index":8114},{"krate":0,"index":8133},{"krate":0,"index":8132},{"krate":0,"index":8130},{"krate":0,"index":8127},{"krate":0,"index":8128},{"krate":0,"index":8124},{"krate":0,"index":8125},{"krate":0,"index":8121},{"krate":0,"index":8065},{"krate":0,"index":8067},{"krate":0,"index":8135},{"krate":0,"index":8164},{"krate":0,"index":8163},{"krate":0,"index":8161},{"krate":0,"index":8158},{"krate":0,"index":8159},{"krate":0,"index":8155},{"krate":0,"index":8156},{"krate":0,"index":8152},{"krate":0,"index":8070},{"krate":0,"index":8072},{"krate":0,"index":8075},{"krate":0,"index":8097},{"krate":0,"index":8099},{"krate":0,"index":8101},{"krate":0,"index":8103},{"krate":0,"index":8105},{"krate":0,"index":8106},{"krate":0,"index":8107},{"krate":0,"index":8166},{"krate":0,"index":8172},{"krate":0,"index":8170},{"krate":0,"index":2539},{"krate":0,"index":2542}],"decl_id":null,"docs":" Shared settings module.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2492},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615139,"byte_end":615151,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"name":"Configurable","qualname":"::settings::Configurable","value":"Configurable","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2494}],"decl_id":null,"docs":" A string-based configurator for settings groups.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615310,"byte_end":615313,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"set","qualname":"::settings::Configurable::set","value":"fn (&mut self, name: &str, value: &str) -> SetResult<()>","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Set the string value of any setting by name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615530,"byte_end":615536,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"enable","qualname":"::settings::Configurable::enable","value":"fn (&mut self, name: &str) -> SetResult<()>","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Enable a boolean setting or apply a preset.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8011},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615658,"byte_end":615665,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"Builder","qualname":"::settings::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":8012},{"krate":0,"index":8013}],"decl_id":null,"docs":" Collect settings values based on a template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615838,"byte_end":615841,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"fn (tmpl: &'static detail::Template) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder with defaults and names from the given template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":616064,"byte_end":616073,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"state_for","qualname":"<Builder>::state_for","value":"fn (self, name: &str) -> Box<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Extract contents of builder once everything is configured.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8017},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619634,"byte_end":619641,"line_start":172,"line_end":172,"column_start":5,"column_end":12},"name":"BadName","qualname":"::settings::SetError::BadName","value":"SetError::BadName(String)","parent":{"krate":0,"index":8016},"children":[],"decl_id":null,"docs":" No setting by this name exists.\n","sig":null,"attributes":[{"value":"error(\"No existing setting named '{0}'\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619586,"byte_end":619629,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8020},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619793,"byte_end":619800,"line_start":176,"line_end":176,"column_start":5,"column_end":12},"name":"BadType","qualname":"::settings::SetError::BadType","value":"SetError::BadType","parent":{"krate":0,"index":8016},"children":[],"decl_id":null,"docs":" Type mismatch for setting (e.g., setting an enum setting as a bool).\n","sig":null,"attributes":[{"value":"error(\"Trying to set a setting with the wrong type\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619733,"byte_end":619788,"line_start":175,"line_end":175,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8022},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619920,"byte_end":619928,"line_start":180,"line_end":180,"column_start":5,"column_end":13},"name":"BadValue","qualname":"::settings::SetError::BadValue","value":"SetError::BadValue(String)","parent":{"krate":0,"index":8016},"children":[],"decl_id":null,"docs":" This is not a valid value for this setting.\n","sig":null,"attributes":[{"value":"error(\"Unexpected value for a setting, expected {0}\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619859,"byte_end":619915,"line_start":179,"line_end":179,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":8016},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619531,"byte_end":619539,"line_start":169,"line_end":169,"column_start":10,"column_end":18},"name":"SetError","qualname":"::settings::SetError","value":"SetError::{BadName, BadType, BadValue}","parent":null,"children":[{"krate":0,"index":8017},{"krate":0,"index":8020},{"krate":0,"index":8022}],"decl_id":null,"docs":" An error produced when changing a setting.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":619997,"byte_end":620006,"line_start":184,"line_end":184,"column_start":10,"column_end":19},"name":"SetResult","qualname":"::settings::SetResult","value":"Result<T, SetError>","parent":null,"children":[],"decl_id":null,"docs":" A result returned when changing a setting.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8040},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":620362,"byte_end":620375,"line_start":192,"line_end":192,"column_start":12,"column_end":25},"name":"PredicateView","qualname":"::settings::PredicateView","value":"","parent":null,"children":[],"decl_id":null,"docs":" A reference to just the boolean predicates of a settings object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":620594,"byte_end":620597,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<PredicateView>::new","value":"fn (bits: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new view of a precomputed predicate vector.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":620706,"byte_end":620710,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"test","qualname":"<PredicateView>::test","value":"fn (self, p: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check a numbered predicate.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2516},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":620973,"byte_end":620979,"line_start":212,"line_end":212,"column_start":9,"column_end":15},"name":"detail","qualname":"::settings::detail","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2526},{"krate":0,"index":2529},{"krate":0,"index":2533},{"krate":0,"index":8049},{"krate":0,"index":8060},{"krate":0,"index":8059},{"krate":0,"index":2537}],"decl_id":null,"docs":" Implementation details for generated code.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2519},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621086,"byte_end":621094,"line_start":217,"line_end":217,"column_start":16,"column_end":24},"name":"Template","qualname":"::settings::detail::Template","value":"Template { name, descriptors, enumerators, hash_table, defaults, presets }","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525}],"decl_id":null,"docs":" An instruction group template.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2520},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621152,"byte_end":621156,"line_start":219,"line_end":219,"column_start":13,"column_end":17},"name":"name","qualname":"::settings::detail::Template::name","value":"&'static str","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":" Name of the instruction group.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621225,"byte_end":621236,"line_start":221,"line_end":221,"column_start":13,"column_end":24},"name":"descriptors","qualname":"::settings::detail::Template::descriptors","value":"&'static [settings::detail::Descriptor]","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":" List of setting descriptors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2522},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621311,"byte_end":621322,"line_start":223,"line_end":223,"column_start":13,"column_end":24},"name":"enumerators","qualname":"::settings::detail::Template::enumerators","value":"&'static [&'static str]","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":" Union of all enumerators.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621397,"byte_end":621407,"line_start":225,"line_end":225,"column_start":13,"column_end":23},"name":"hash_table","qualname":"::settings::detail::Template::hash_table","value":"&'static [u16]","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":" Hash table of settings.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2524},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621465,"byte_end":621473,"line_start":227,"line_end":227,"column_start":13,"column_end":21},"name":"defaults","qualname":"::settings::detail::Template::defaults","value":"&'static [u8]","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":" Default values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621550,"byte_end":621557,"line_start":229,"line_end":229,"column_start":13,"column_end":20},"name":"presets","qualname":"::settings::detail::Template::presets","value":"&'static [(u8, u8)]","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":" Pairs of (mask, value) for presets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621686,"byte_end":621691,"line_start":234,"line_end":234,"column_start":16,"column_end":21},"name":"enums","qualname":"<Template>::enums","value":"fn (&self, last: u8, enumerators: u16) -> &[&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Get enumerators corresponding to a `Details::Enum`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":622043,"byte_end":622060,"line_start":242,"line_end":242,"column_start":16,"column_end":33},"name":"format_toml_value","qualname":"<Template>::format_toml_value","value":"fn (&self, detail: Detail, byte: u8, f: &mut fmt::Formatter) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Format a setting value as a TOML string. This is mostly for use by the generated\n `Display` implementation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2533},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":623538,"byte_end":623548,"line_start":284,"line_end":284,"column_start":16,"column_end":26},"name":"Descriptor","qualname":"::settings::detail::Descriptor","value":"Descriptor { name, offset, detail }","parent":null,"children":[{"krate":0,"index":2534},{"krate":0,"index":2535},{"krate":0,"index":2536}],"decl_id":null,"docs":" A setting descriptor holds the information needed to generically set and print a setting.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2534},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":623628,"byte_end":623632,"line_start":286,"line_end":286,"column_start":13,"column_end":17},"name":"name","qualname":"::settings::detail::Descriptor::name","value":"&'static str","parent":{"krate":0,"index":2533},"children":[],"decl_id":null,"docs":" Lower snake-case name of setting as defined in meta.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2535},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":623713,"byte_end":623719,"line_start":289,"line_end":289,"column_start":13,"column_end":19},"name":"offset","qualname":"::settings::detail::Descriptor::offset","value":"u32","parent":{"krate":0,"index":2533},"children":[],"decl_id":null,"docs":" Offset of byte containing this setting.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2536},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":623805,"byte_end":623811,"line_start":292,"line_end":292,"column_start":13,"column_end":19},"name":"detail","qualname":"::settings::detail::Descriptor::detail","value":"settings::detail::Detail","parent":{"krate":0,"index":2533},"children":[],"decl_id":null,"docs":" Additional details, depending on the kind of setting.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":8050},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624044,"byte_end":624048,"line_start":299,"line_end":299,"column_start":9,"column_end":13},"name":"Bool","qualname":"::settings::detail::Detail::Bool","value":"Detail::Bool { bit }","parent":{"krate":0,"index":8049},"children":[],"decl_id":null,"docs":" A boolean setting only uses one bit, numbered from LSB.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8052},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624166,"byte_end":624169,"line_start":305,"line_end":305,"column_start":9,"column_end":12},"name":"Num","qualname":"::settings::detail::Detail::Num","value":"Detail::Num","parent":{"krate":0,"index":8049},"children":[],"decl_id":null,"docs":" A numerical setting uses the whole byte.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":8054},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624237,"byte_end":624241,"line_start":308,"line_end":308,"column_start":9,"column_end":13},"name":"Enum","qualname":"::settings::detail::Detail::Enum","value":"Detail::Enum { last, enumerators }","parent":{"krate":0,"index":8049},"children":[],"decl_id":null,"docs":" An Enum setting uses a range of enumerators.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8057},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624645,"byte_end":624651,"line_start":319,"line_end":319,"column_start":9,"column_end":15},"name":"Preset","qualname":"::settings::detail::Detail::Preset","value":"Detail::Preset","parent":{"krate":0,"index":8049},"children":[],"decl_id":null,"docs":" A preset is not an individual setting, it is a collection of settings applied at once.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8049},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":623959,"byte_end":623965,"line_start":297,"line_end":297,"column_start":14,"column_end":20},"name":"Detail","qualname":"::settings::detail::Detail","value":"Detail::{Bool, Num, Enum, Preset}","parent":null,"children":[{"krate":0,"index":8050},{"krate":0,"index":8052},{"krate":0,"index":8054},{"krate":0,"index":8057}],"decl_id":null,"docs":" The different kind of settings along with descriptor bits that depend on the kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624852,"byte_end":624861,"line_start":325,"line_end":325,"column_start":16,"column_end":25},"name":"is_preset","qualname":"<Detail>::is_preset","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a detail is a Detail::Preset. Useful because the Descriptor\n offset field has a different meaning when the detail is a preset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8109},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11816844,"byte_end":11816849,"line_start":3,"line_end":3,"column_start":12,"column_end":17},"name":"Flags","qualname":"::settings::Flags","value":"Flags {  }","parent":null,"children":[{"krate":0,"index":8110}],"decl_id":null,"docs":" Flags group `shared`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8063},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11816973,"byte_end":11816976,"line_start":9,"line_end":9,"column_start":12,"column_end":15},"name":"new","qualname":"<Flags>::new","value":"fn (builder: Builder) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create flags shared settings group.\n","sig":null,"attributes":[{"value":"allow(unused_variables)","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11816935,"byte_end":11816961,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8115},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817343,"byte_end":11817347,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"None","qualname":"::settings::OptLevel::None","value":"OptLevel::None","parent":{"krate":0,"index":8114},"children":[],"decl_id":null,"docs":" `none`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8117},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817370,"byte_end":11817375,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Speed","qualname":"::settings::OptLevel::Speed","value":"OptLevel::Speed","parent":{"krate":0,"index":8114},"children":[],"decl_id":null,"docs":" `speed`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8119},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817407,"byte_end":11817419,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"SpeedAndSize","qualname":"::settings::OptLevel::SpeedAndSize","value":"OptLevel::SpeedAndSize","parent":{"krate":0,"index":8114},"children":[],"decl_id":null,"docs":" `speed_and_size`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8114},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817312,"byte_end":11817320,"line_start":19,"line_end":19,"column_start":10,"column_end":18},"name":"OptLevel","qualname":"::settings::OptLevel","value":"OptLevel::{None, Speed, SpeedAndSize}","parent":null,"children":[{"krate":0,"index":8115},{"krate":0,"index":8117},{"krate":0,"index":8119}],"decl_id":null,"docs":" Values for `shared.opt_level`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8136},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818140,"byte_end":11818150,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"IsaDefault","qualname":"::settings::LibcallCallConv::IsaDefault","value":"LibcallCallConv::IsaDefault","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `isa_default`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8138},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818172,"byte_end":11818176,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"Fast","qualname":"::settings::LibcallCallConv::Fast","value":"LibcallCallConv::Fast","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `fast`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8140},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818198,"byte_end":11818202,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Cold","qualname":"::settings::LibcallCallConv::Cold","value":"LibcallCallConv::Cold","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `cold`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8142},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818228,"byte_end":11818235,"line_start":57,"line_end":57,"column_start":5,"column_end":12},"name":"SystemV","qualname":"::settings::LibcallCallConv::SystemV","value":"LibcallCallConv::SystemV","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `system_v`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8144},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818269,"byte_end":11818284,"line_start":59,"line_end":59,"column_start":5,"column_end":20},"name":"WindowsFastcall","qualname":"::settings::LibcallCallConv::WindowsFastcall","value":"LibcallCallConv::WindowsFastcall","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `windows_fastcall`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8146},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818320,"byte_end":11818336,"line_start":61,"line_end":61,"column_start":5,"column_end":21},"name":"BaldrdashSystemV","qualname":"::settings::LibcallCallConv::BaldrdashSystemV","value":"LibcallCallConv::BaldrdashSystemV","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `baldrdash_system_v`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8148},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818371,"byte_end":11818387,"line_start":63,"line_end":63,"column_start":5,"column_end":21},"name":"BaldrdashWindows","qualname":"::settings::LibcallCallConv::BaldrdashWindows","value":"LibcallCallConv::BaldrdashWindows","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `baldrdash_windows`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8150},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818415,"byte_end":11818425,"line_start":65,"line_end":65,"column_start":5,"column_end":15},"name":"Probestack","qualname":"::settings::LibcallCallConv::Probestack","value":"LibcallCallConv::Probestack","parent":{"krate":0,"index":8135},"children":[],"decl_id":null,"docs":" `probestack`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8135},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818095,"byte_end":11818110,"line_start":49,"line_end":49,"column_start":10,"column_end":25},"name":"LibcallCallConv","qualname":"::settings::LibcallCallConv","value":"LibcallCallConv::{IsaDefault, Fast, Cold, SystemV, WindowsFastcall, BaldrdashSystemV, BaldrdashWindows, Probestack}","parent":null,"children":[{"krate":0,"index":8136},{"krate":0,"index":8138},{"krate":0,"index":8140},{"krate":0,"index":8142},{"krate":0,"index":8144},{"krate":0,"index":8146},{"krate":0,"index":8148},{"krate":0,"index":8150}],"decl_id":null,"docs":" Values for `shared.libcall_call_conv`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8076},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11819661,"byte_end":11819675,"line_start":101,"line_end":101,"column_start":12,"column_end":26},"name":"predicate_view","qualname":"<Flags>::predicate_view","value":"fn (&self) -> crate::settings::PredicateView","parent":null,"children":[],"decl_id":null,"docs":" Get a view of the boolean predicates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8078},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11820223,"byte_end":11820232,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"opt_level","qualname":"<Flags>::opt_level","value":"fn (&self) -> OptLevel","parent":null,"children":[],"decl_id":null,"docs":" Optimization level:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8079},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11820984,"byte_end":11821001,"line_start":138,"line_end":138,"column_start":12,"column_end":29},"name":"libcall_call_conv","qualname":"<Flags>::libcall_call_conv","value":"fn (&self) -> LibcallCallConv","parent":null,"children":[],"decl_id":null,"docs":" Defines the calling convention to use for LibCalls call expansion,\n since it may be different from the ISA default calling convention.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8080},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11822325,"byte_end":11822349,"line_start":179,"line_end":179,"column_start":12,"column_end":36},"name":"baldrdash_prologue_words","qualname":"<Flags>::baldrdash_prologue_words","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Number of pointer-sized words pushed by the baldrdash prologue.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8081},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11822659,"byte_end":11822679,"line_start":188,"line_end":188,"column_start":12,"column_end":32},"name":"probestack_size_log2","qualname":"<Flags>::probestack_size_log2","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The log2 of the size of the stack guard region.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8082},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11822967,"byte_end":11822982,"line_start":195,"line_end":195,"column_start":12,"column_end":27},"name":"enable_verifier","qualname":"<Flags>::enable_verifier","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Run the Cranelift IR verifier at strategic times during compilation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8083},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11823104,"byte_end":11823110,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"is_pic","qualname":"<Flags>::is_pic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable Position-Independent Code generation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8084},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11823426,"byte_end":11823444,"line_start":207,"line_end":207,"column_start":12,"column_end":30},"name":"colocated_libcalls","qualname":"<Flags>::colocated_libcalls","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Use colocated libcalls.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8085},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11823936,"byte_end":11823951,"line_start":218,"line_end":218,"column_start":12,"column_end":27},"name":"avoid_div_traps","qualname":"<Flags>::avoid_div_traps","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Generate explicit checks around native division instructions to avoid\n their trapping.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8086},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11824160,"byte_end":11824172,"line_start":224,"line_end":224,"column_start":12,"column_end":24},"name":"enable_float","qualname":"<Flags>::enable_float","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of floating-point instructions","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8087},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11824507,"byte_end":11824534,"line_start":232,"line_end":232,"column_start":12,"column_end":39},"name":"enable_nan_canonicalization","qualname":"<Flags>::enable_nan_canonicalization","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable NaN canonicalization","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8088},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11824901,"byte_end":11824918,"line_start":240,"line_end":240,"column_start":12,"column_end":29},"name":"enable_pinned_reg","qualname":"<Flags>::enable_pinned_reg","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of the pinned register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8089},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11825587,"byte_end":11825614,"line_start":252,"line_end":252,"column_start":12,"column_end":39},"name":"use_pinned_reg_as_heap_base","qualname":"<Flags>::use_pinned_reg_as_heap_base","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Use the pinned register as the heap base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8090},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11825729,"byte_end":11825740,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"enable_simd","qualname":"<Flags>::enable_simd","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of SIMD instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8091},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11825856,"byte_end":11825870,"line_start":260,"line_end":260,"column_start":12,"column_end":26},"name":"enable_atomics","qualname":"<Flags>::enable_atomics","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of atomic instructions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8092},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11826215,"byte_end":11826232,"line_start":268,"line_end":268,"column_start":12,"column_end":29},"name":"enable_safepoints","qualname":"<Flags>::enable_safepoints","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable safepoint instruction insertions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8093},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11826379,"byte_end":11826396,"line_start":272,"line_end":272,"column_start":12,"column_end":29},"name":"allones_funcaddrs","qualname":"<Flags>::allones_funcaddrs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Emit not-yet-relocated function addresses as all-ones bit patterns.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8094},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11826573,"byte_end":11826591,"line_start":277,"line_end":277,"column_start":12,"column_end":30},"name":"probestack_enabled","qualname":"<Flags>::probestack_enabled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of stack probes, for calling conventions which support this\n functionality.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8095},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11826758,"byte_end":11826784,"line_start":282,"line_end":282,"column_start":12,"column_end":38},"name":"probestack_func_adjusts_sp","qualname":"<Flags>::probestack_func_adjusts_sp","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Set this to true of the stack probe function modifies the stack pointer\n itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8096},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11826920,"byte_end":11826939,"line_start":286,"line_end":286,"column_start":12,"column_end":31},"name":"jump_tables_enabled","qualname":"<Flags>::jump_tables_enabled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of jump tables in generated machine code.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8106},"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11830558,"byte_end":11830565,"line_start":445,"line_end":445,"column_start":8,"column_end":15},"name":"builder","qualname":"::settings::builder","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Create a `settings::Builder` for the shared settings group.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8166},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625560,"byte_end":625570,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"FlagsOrIsa","qualname":"::settings::FlagsOrIsa","value":"FlagsOrIsa { flags, isa }","parent":null,"children":[{"krate":0,"index":8168},{"krate":0,"index":8169}],"decl_id":null,"docs":" Wrapper containing flags and optionally a `TargetIsa` trait object.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8168},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625619,"byte_end":625624,"line_start":346,"line_end":346,"column_start":9,"column_end":14},"name":"flags","qualname":"::settings::FlagsOrIsa::flags","value":"&'a settings::Flags","parent":{"krate":0,"index":8166},"children":[],"decl_id":null,"docs":" Flags are always present.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8169},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625682,"byte_end":625685,"line_start":349,"line_end":349,"column_start":9,"column_end":12},"name":"isa","qualname":"::settings::FlagsOrIsa::isa","value":"core::option::Option<&'a (dyn isa::TargetIsa + 'a)>","parent":{"krate":0,"index":8166},"children":[],"decl_id":null,"docs":" The ISA may not be present.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2545},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timing","qualname":"::timing","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","parent":null,"children":[{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2552},{"krate":0,"index":8210},{"krate":0,"index":8286},{"krate":0,"index":8285},{"krate":0,"index":8283},{"krate":0,"index":8280},{"krate":0,"index":8281},{"krate":0,"index":8277},{"krate":0,"index":8278},{"krate":0,"index":8175},{"krate":0,"index":8176},{"krate":0,"index":8178},{"krate":0,"index":8179},{"krate":0,"index":8180},{"krate":0,"index":8181},{"krate":0,"index":8182},{"krate":0,"index":8183},{"krate":0,"index":8184},{"krate":0,"index":8185},{"krate":0,"index":8186},{"krate":0,"index":8187},{"krate":0,"index":8188},{"krate":0,"index":8189},{"krate":0,"index":8190},{"krate":0,"index":8191},{"krate":0,"index":8192},{"krate":0,"index":8193},{"krate":0,"index":8194},{"krate":0,"index":8195},{"krate":0,"index":8196},{"krate":0,"index":8197},{"krate":0,"index":8198},{"krate":0,"index":8199},{"krate":0,"index":8200},{"krate":0,"index":8201},{"krate":0,"index":8202},{"krate":0,"index":8203},{"krate":0,"index":8204},{"krate":0,"index":8205},{"krate":0,"index":8206},{"krate":0,"index":8207},{"krate":0,"index":8208},{"krate":0,"index":8209},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2557}],"decl_id":null,"docs":" Pass timing.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8178},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":629830,"byte_end":629842,"line_start":43,"line_end":43,"column_start":5,"column_end":17},"name":"process_file","qualname":"::timing::process_file","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Processing test file\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8179},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":629872,"byte_end":629882,"line_start":44,"line_end":44,"column_start":5,"column_end":15},"name":"parse_text","qualname":"::timing::parse_text","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Parsing textual Cranelift IR\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8180},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":629920,"byte_end":629941,"line_start":45,"line_end":45,"column_start":5,"column_end":26},"name":"wasm_translate_module","qualname":"::timing::wasm_translate_module","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Translate WASM module\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8181},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":629972,"byte_end":629995,"line_start":46,"line_end":46,"column_start":5,"column_end":28},"name":"wasm_translate_function","qualname":"::timing::wasm_translate_function","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Translate WASM function\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8182},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630029,"byte_end":630037,"line_start":48,"line_end":48,"column_start":5,"column_end":13},"name":"verifier","qualname":"::timing::verifier","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify Cranelift IR\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8183},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630066,"byte_end":630077,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"verify_cssa","qualname":"::timing::verify_cssa","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify CSSA\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8184},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630098,"byte_end":630113,"line_start":50,"line_end":50,"column_start":5,"column_end":20},"name":"verify_liveness","qualname":"::timing::verify_liveness","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify live ranges\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8185},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630141,"byte_end":630157,"line_start":51,"line_end":51,"column_start":5,"column_end":21},"name":"verify_locations","qualname":"::timing::verify_locations","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify value locations\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8186},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630189,"byte_end":630201,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"verify_flags","qualname":"::timing::verify_flags","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify CPU flags\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8187},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630228,"byte_end":630235,"line_start":54,"line_end":54,"column_start":5,"column_end":12},"name":"compile","qualname":"::timing::compile","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Compilation passes\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8188},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630263,"byte_end":630272,"line_start":55,"line_end":55,"column_start":5,"column_end":14},"name":"flowgraph","qualname":"::timing::flowgraph","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Control flow graph\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8189},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630300,"byte_end":630307,"line_start":56,"line_end":56,"column_start":5,"column_end":12},"name":"domtree","qualname":"::timing::domtree","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Dominator tree\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8190},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630331,"byte_end":630344,"line_start":57,"line_end":57,"column_start":5,"column_end":18},"name":"loop_analysis","qualname":"::timing::loop_analysis","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Loop analysis\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8191},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630367,"byte_end":630374,"line_start":58,"line_end":58,"column_start":5,"column_end":12},"name":"postopt","qualname":"::timing::postopt","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Post-legalization rewriting\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8192},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630411,"byte_end":630417,"line_start":59,"line_end":59,"column_start":5,"column_end":11},"name":"preopt","qualname":"::timing::preopt","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Pre-legalization rewriting\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8193},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630453,"byte_end":630456,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"dce","qualname":"::timing::dce","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Dead code elimination\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8194},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630487,"byte_end":630495,"line_start":61,"line_end":61,"column_start":5,"column_end":13},"name":"legalize","qualname":"::timing::legalize","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Legalization\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8195},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630517,"byte_end":630520,"line_start":62,"line_end":62,"column_start":5,"column_end":8},"name":"gvn","qualname":"::timing::gvn","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Global value numbering\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8196},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630552,"byte_end":630556,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"licm","qualname":"::timing::licm","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Loop invariant code motion\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8197},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630592,"byte_end":630608,"line_start":64,"line_end":64,"column_start":5,"column_end":21},"name":"unreachable_code","qualname":"::timing::unreachable_code","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Remove unreachable blocks\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8198},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630644,"byte_end":630652,"line_start":66,"line_end":66,"column_start":5,"column_end":13},"name":"regalloc","qualname":"::timing::regalloc","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Register allocation\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8199},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630681,"byte_end":630692,"line_start":67,"line_end":67,"column_start":5,"column_end":16},"name":"ra_liveness","qualname":"::timing::ra_liveness","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA liveness analysis\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8200},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630722,"byte_end":630729,"line_start":68,"line_end":68,"column_start":5,"column_end":12},"name":"ra_cssa","qualname":"::timing::ra_cssa","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA coalescing CSSA\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8201},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630757,"byte_end":630768,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ra_spilling","qualname":"::timing::ra_spilling","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA spilling\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8202},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630789,"byte_end":630798,"line_start":70,"line_end":70,"column_start":5,"column_end":14},"name":"ra_reload","qualname":"::timing::ra_reload","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA reloading\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8203},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630820,"byte_end":630831,"line_start":71,"line_end":71,"column_start":5,"column_end":16},"name":"ra_coloring","qualname":"::timing::ra_coloring","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA coloring\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8204},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630853,"byte_end":630870,"line_start":73,"line_end":73,"column_start":5,"column_end":22},"name":"prologue_epilogue","qualname":"::timing::prologue_epilogue","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Prologue/epilogue insertion\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8205},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630907,"byte_end":630926,"line_start":74,"line_end":74,"column_start":5,"column_end":24},"name":"shrink_instructions","qualname":"::timing::shrink_instructions","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Instruction encoding shrinking\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8206},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":630966,"byte_end":630980,"line_start":75,"line_end":75,"column_start":5,"column_end":19},"name":"relax_branches","qualname":"::timing::relax_branches","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Branch relaxation\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8207},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631007,"byte_end":631014,"line_start":76,"line_end":76,"column_start":5,"column_end":12},"name":"binemit","qualname":"::timing::binemit","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Binary machine code emission\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8208},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631052,"byte_end":631067,"line_start":77,"line_end":77,"column_start":5,"column_end":20},"name":"layout_renumber","qualname":"::timing::layout_renumber","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Layout full renumbering\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8209},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631101,"byte_end":631118,"line_start":79,"line_end":79,"column_start":5,"column_end":22},"name":"canonicalize_nans","qualname":"::timing::canonicalize_nans","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Canonicalization of NaNs\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2571},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":632297,"byte_end":632308,"line_start":116,"line_end":116,"column_start":16,"column_end":27},"name":"TimingToken","qualname":"::timing::details::TimingToken","value":"TimingToken {  }","parent":null,"children":[{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":2574}],"decl_id":null,"docs":" A timing token is responsible for timing the currently running pass. Timing starts when it\n is created and ends when it is dropped.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":632901,"byte_end":632910,"line_start":138,"line_end":138,"column_start":16,"column_end":25},"name":"PassTimes","qualname":"::timing::details::PassTimes","value":"PassTimes {  }","parent":null,"children":[{"krate":0,"index":2576}],"decl_id":null,"docs":" Accumulated timing for all passes.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2590},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":635877,"byte_end":635889,"line_start":216,"line_end":216,"column_start":12,"column_end":24},"name":"take_current","qualname":"::timing::details::take_current","value":"fn () -> PassTimes","parent":null,"children":[],"decl_id":null,"docs":" Take the current accumulated pass timings and reset the timings for the current thread.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2592},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":636083,"byte_end":636097,"line_start":221,"line_end":221,"column_start":12,"column_end":26},"name":"add_to_current","qualname":"::timing::details::add_to_current","value":"fn (times: &PassTimes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add `timings` to the accumulated timings for the current thread.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2594},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"verifier","qualname":"::verifier","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2609},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2679},{"krate":0,"index":2709},{"krate":0,"index":2738},{"krate":0,"index":8304},{"krate":0,"index":8319},{"krate":0,"index":8320},{"krate":0,"index":8317},{"krate":0,"index":8313},{"krate":0,"index":8314},{"krate":0,"index":8310},{"krate":0,"index":8311},{"krate":0,"index":8308},{"krate":0,"index":2768},{"krate":0,"index":2769},{"krate":0,"index":2774},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":8322},{"krate":0,"index":8338},{"krate":0,"index":8336},{"krate":0,"index":8334},{"krate":0,"index":8330},{"krate":0,"index":8331},{"krate":0,"index":8327},{"krate":0,"index":8328},{"krate":0,"index":8325},{"krate":0,"index":2782},{"krate":0,"index":2793},{"krate":0,"index":2795},{"krate":0,"index":2797},{"krate":0,"index":2799},{"krate":0,"index":2801},{"krate":0,"index":2804},{"krate":0,"index":2807},{"krate":0,"index":2813}],"decl_id":null,"docs":" A verifier for ensuring that functions are well formed.\n It verifies:","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2666},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/cssa.rs","byte_start":712977,"byte_end":712988,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"verify_cssa","qualname":"::verifier::cssa::verify_cssa","value":"fn (func: &Function, cfg: &ControlFlowGraph, domtree: &DominatorTree, liveness: &Liveness, virtregs: &VirtRegs, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify conventional SSA form for `func`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2726},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/liveness.rs","byte_start":726077,"byte_end":726092,"line_start":24,"line_end":24,"column_start":8,"column_end":23},"name":"verify_liveness","qualname":"::verifier::liveness::verify_liveness","value":"fn (isa: &dyn TargetIsa, func: &Function, cfg: &ControlFlowGraph, liveness: &Liveness, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify liveness information for `func`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2748},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/locations.rs","byte_start":734474,"byte_end":734490,"line_start":22,"line_end":22,"column_start":8,"column_end":24},"name":"verify_locations","qualname":"::verifier::locations::verify_locations","value":"fn (isa: &dyn isa::TargetIsa, func: &ir::Function, cfg: &ControlFlowGraph, liveness: Option<&Liveness>, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify value locations for `func`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8304},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":640766,"byte_end":640779,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"VerifierError","qualname":"::verifier::VerifierError","value":"VerifierError { location, context, message }","parent":null,"children":[{"krate":0,"index":8305},{"krate":0,"index":8306},{"krate":0,"index":8307}],"decl_id":null,"docs":" A verifier error.\n","sig":null,"attributes":[{"value":"error(\"{}{}: {}\", . location, format_context (. context), . message)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":640687,"byte_end":640754,"line_start":95,"line_end":95,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8305},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":640837,"byte_end":640845,"line_start":98,"line_end":98,"column_start":9,"column_end":17},"name":"location","qualname":"::verifier::VerifierError::location","value":"ir::entities::AnyEntity","parent":{"krate":0,"index":8304},"children":[],"decl_id":null,"docs":" The entity causing the verifier error.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8306},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":641025,"byte_end":641032,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"name":"context","qualname":"::verifier::VerifierError::context","value":"core::option::Option<alloc::string::String>","parent":{"krate":0,"index":8304},"children":[],"decl_id":null,"docs":" Optionally provide some context for the given location; e.g., for `inst42` provide\n `Some(\"v3 = iconst.i32 0\")` for more comprehensible errors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8307},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":641085,"byte_end":641092,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"name":"message","qualname":"::verifier::VerifierError::message","value":"alloc::string::String","parent":{"krate":0,"index":8304},"children":[],"decl_id":null,"docs":" The error message.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2778},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643040,"byte_end":643058,"line_start":168,"line_end":168,"column_start":10,"column_end":28},"name":"VerifierStepResult","qualname":"::verifier::VerifierStepResult","value":"Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Result of a step in the verification process.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2780},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643299,"byte_end":643313,"line_start":174,"line_end":174,"column_start":10,"column_end":24},"name":"VerifierResult","qualname":"::verifier::VerifierResult","value":"Result<T, VerifierErrors>","parent":null,"children":[],"decl_id":null,"docs":" Result of a verification operation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8322},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643442,"byte_end":643456,"line_start":178,"line_end":178,"column_start":12,"column_end":26},"name":"VerifierErrors","qualname":"::verifier::VerifierErrors","value":"","parent":null,"children":[],"decl_id":null,"docs":" List of verifier errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2783},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643576,"byte_end":643579,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<VerifierErrors>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a new `VerifierErrors` struct.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643555,"byte_end":643564,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2784},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643697,"byte_end":643705,"line_start":189,"line_end":189,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VerifierErrors>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether no errors were reported.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643676,"byte_end":643685,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643838,"byte_end":643847,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"has_error","qualname":"<VerifierErrors>::has_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether one or more errors were reported.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643817,"byte_end":643826,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644045,"byte_end":644054,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"as_result","qualname":"<VerifierErrors>::as_result","value":"fn (&self) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Return a `VerifierStepResult` that is fatal if at least one error was reported,\n and non-fatal otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644024,"byte_end":644033,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644261,"byte_end":644267,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"report","qualname":"<VerifierErrors>::report","value":"fn (&mut self, error: impl Into<VerifierError>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Report an error, adding it to the list of errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2789},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644414,"byte_end":644419,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"fatal","qualname":"<VerifierErrors>::fatal","value":"fn (&mut self, error: impl Into<VerifierError>) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Report a fatal error and return `Err`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644604,"byte_end":644612,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"nonfatal","qualname":"<VerifierErrors>::nonfatal","value":"fn (&mut self, error: impl Into<VerifierError>) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Report a non-fatal error and return `Ok`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2801},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":645390,"byte_end":645405,"line_start":260,"line_end":260,"column_start":8,"column_end":23},"name":"verify_function","qualname":"::verifier::verify_function","value":"fn <'a, FOI> (func: &Function, fisa: FOI) -> VerifierResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify `func`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2804},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":645905,"byte_end":645919,"line_start":278,"line_end":278,"column_start":8,"column_end":22},"name":"verify_context","qualname":"::verifier::verify_context","value":"fn <'a, FOI> (func: &Function, cfg: &ControlFlowGraph, domtree: &DominatorTree, fisa: FOI, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify `func` after checking the integrity of associated context data structures `cfg` and\n `domtree`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2870},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2884},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2895},{"krate":0,"index":2902},{"krate":0,"index":2904},{"krate":0,"index":2907},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2918},{"krate":0,"index":2919},{"krate":0,"index":2920},{"krate":0,"index":2921},{"krate":0,"index":2923},{"krate":0,"index":2924},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2936}],"decl_id":null,"docs":" Converting Cranelift IR to text.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2895},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":748111,"byte_end":748121,"line_start":21,"line_end":21,"column_start":11,"column_end":21},"name":"FuncWriter","qualname":"::write::FuncWriter","value":"FuncWriter","parent":null,"children":[{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901}],"decl_id":null,"docs":" A `FuncWriter` used to decorate functions during printing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":748203,"byte_end":748219,"line_start":23,"line_end":23,"column_start":8,"column_end":24},"name":"write_ebb_header","qualname":"::write::FuncWriter::write_ebb_header","value":"fn (&mut self, w: &mut dyn Write, func: &Function, isa: Option<&dyn TargetIsa>, ebb: Ebb, indent: usize) -> fmt::Result","parent":{"krate":0,"index":2895},"children":[],"decl_id":null,"docs":" Write the extended basic block header for the current function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2897},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":748439,"byte_end":748456,"line_start":33,"line_end":33,"column_start":8,"column_end":25},"name":"write_instruction","qualname":"::write::FuncWriter::write_instruction","value":"fn (&mut self, w: &mut dyn Write, func: &Function, aliases: &SecondaryMap<Value, Vec<Value>>, isa: Option<&dyn TargetIsa>, inst: Inst, indent: usize) -> fmt::Result","parent":{"krate":0,"index":2895},"children":[],"decl_id":null,"docs":" Write the given `inst` to `w`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":748774,"byte_end":748788,"line_start":44,"line_end":44,"column_start":8,"column_end":22},"name":"write_preamble","qualname":"::write::FuncWriter::write_preamble","value":"fn (&mut self, w: &mut dyn Write, func: &Function, regs: Option<&RegInfo>) -> Result<bool, fmt::Error>","parent":{"krate":0,"index":2895},"children":[],"decl_id":null,"docs":" Write the preamble to `w`. By default, this uses `write_entity_definition`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2899},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":749027,"byte_end":749041,"line_start":54,"line_end":54,"column_start":8,"column_end":22},"name":"super_preamble","qualname":"::write::FuncWriter::super_preamble","value":"fn (&mut self, w: &mut dyn Write, func: &Function, regs: Option<&RegInfo>) -> Result<bool, fmt::Error>","parent":{"krate":0,"index":2895},"children":[],"decl_id":null,"docs":" Default impl of `write_preamble`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2900},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":750796,"byte_end":750819,"line_start":109,"line_end":109,"column_start":8,"column_end":31},"name":"write_entity_definition","qualname":"::write::FuncWriter::write_entity_definition","value":"fn (&mut self, w: &mut dyn Write, func: &Function, entity: AnyEntity, value: &dyn fmt::Display) -> fmt::Result","parent":{"krate":0,"index":2895},"children":[],"decl_id":null,"docs":" Write an entity definition defined in the preamble to `w`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2901},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":751132,"byte_end":751155,"line_start":121,"line_end":121,"column_start":8,"column_end":31},"name":"super_entity_definition","qualname":"::write::FuncWriter::super_entity_definition","value":"fn (&mut self, w: &mut dyn Write, func: &Function, entity: AnyEntity, value: &dyn fmt::Display) -> fmt::Result","parent":{"krate":0,"index":2895},"children":[],"decl_id":null,"docs":" Default impl of `write_entity_definition`\n","sig":null,"attributes":[{"value":"allow(unused_variables)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":751098,"byte_end":751124,"line_start":120,"line_end":120,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2902},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":751438,"byte_end":751449,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"PlainWriter","qualname":"::write::PlainWriter","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `PlainWriter` that doesn't decorate the function.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2907},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":752165,"byte_end":752179,"line_start":162,"line_end":162,"column_start":8,"column_end":22},"name":"write_function","qualname":"::write::write_function","value":"fn (w: &mut dyn Write, func: &Function, annotations: &DisplayFunctionAnnotations) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write `func` to `w` as equivalent text.\n Use `isa` to emit ISA-dependent annotations.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2909},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":752996,"byte_end":753013,"line_start":185,"line_end":185,"column_start":8,"column_end":25},"name":"decorate_function","qualname":"::write::decorate_function","value":"fn <FW> (func_w: &mut FW, w: &mut dyn Write, func: &Function, annotations: &DisplayFunctionAnnotations) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Writes `func` to `w` as text.\n write_function_plain is passed as 'closure' to print instructions as text.\n pretty_function_error is passed as 'closure' to add error decoration.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2913},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":754417,"byte_end":754433,"line_start":242,"line_end":242,"column_start":8,"column_end":24},"name":"write_ebb_header","qualname":"::write::write_ebb_header","value":"fn (w: &mut dyn Write, func: &Function, isa: Option<&dyn TargetIsa>, ebb: Ebb, indent: usize) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write out the basic block header, outdented:","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2921},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":761521,"byte_end":761535,"line_start":482,"line_end":482,"column_start":8,"column_end":22},"name":"write_operands","qualname":"::write::write_operands","value":"fn (w: &mut dyn Write, dfg: &DataFlowGraph, isa: Option<&dyn TargetIsa>, inst: Inst) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write the operands of `inst` to `w` with a prepended space.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8376},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":782518,"byte_end":782524,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"BitSet","qualname":"::bitset::BitSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" A small bitset built on a single primitive integer type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2973},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":782830,"byte_end":782834,"line_start":28,"line_end":28,"column_start":12,"column_end":16},"name":"bits","qualname":"<BitSet<T>>::bits","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bits supported by this BitSet instance\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":782962,"byte_end":782970,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"max_bits","qualname":"<BitSet<T>>::max_bits","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bits supported by any bitset instance atm.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2975},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":783084,"byte_end":783092,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitSet<T>>::contains","value":"fn (&self, num: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this BitSet contains the number num\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":783365,"byte_end":783368,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"min","qualname":"<BitSet<T>>::min","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return the smallest number contained in the bitset or None if empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":783616,"byte_end":783619,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"max","qualname":"<BitSet<T>>::max","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return the largest number contained in the bitset or None if empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":783944,"byte_end":783954,"line_start":64,"line_end":64,"column_start":12,"column_end":22},"name":"from_range","qualname":"<BitSet<T>>::from_range","value":"fn (lo: u8, hi: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a BitSet with the half-open range [lo,hi) filled in\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3028},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790473,"byte_end":790480,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"Context","qualname":"::context::Context","value":"Context { func, cfg, domtree, regalloc, loop_analysis, redundant_reload_remover }","parent":null,"children":[{"krate":0,"index":3029},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034}],"decl_id":null,"docs":" Persistent data structures and compilation pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3029},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790529,"byte_end":790533,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"func","qualname":"::context::Context::func","value":"ir::function::Function","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" The function we're compiling.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3030},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790596,"byte_end":790599,"line_start":45,"line_end":45,"column_start":9,"column_end":12},"name":"cfg","qualname":"::context::Context::cfg","value":"flowgraph::ControlFlowGraph","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" The control flow graph of `func`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3031},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790663,"byte_end":790670,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"domtree","qualname":"::context::Context::domtree","value":"dominator_tree::DominatorTree","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" Dominator tree for `func`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3032},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790733,"byte_end":790741,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"regalloc","qualname":"::context::Context::regalloc","value":"regalloc::context::Context","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" Register allocation context.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3033},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790804,"byte_end":790817,"line_start":54,"line_end":54,"column_start":9,"column_end":22},"name":"loop_analysis","qualname":"::context::Context::loop_analysis","value":"loop_analysis::LoopAnalysis","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" Loop analysis of `func`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3034},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790884,"byte_end":790908,"line_start":57,"line_end":57,"column_start":9,"column_end":33},"name":"redundant_reload_remover","qualname":"::context::Context::redundant_reload_remover","value":"redundant_reload_remover::RedundantReloadRemover","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" Redundant-reload remover context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3036},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":791151,"byte_end":791154,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new compilation context.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3037},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":791443,"byte_end":791455,"line_start":73,"line_end":73,"column_start":12,"column_end":24},"name":"for_function","qualname":"<Context>::for_function","value":"fn (func: Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new compilation context with an existing Function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3038},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":791844,"byte_end":791849,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"clear","qualname":"<Context>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3039},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":792682,"byte_end":792698,"line_start":105,"line_end":105,"column_start":12,"column_end":28},"name":"compile_and_emit","qualname":"<Context>::compile_and_emit","value":"fn (&mut self, isa: &dyn TargetIsa, mem: &mut Vec<u8>, relocs: &mut dyn RelocSink, traps: &mut dyn TrapSink, stackmaps: &mut dyn StackmapSink) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Compile the function, and emit machine code into a `Vec<u8>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3040},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":793598,"byte_end":793605,"line_start":130,"line_end":130,"column_start":12,"column_end":19},"name":"compile","qualname":"<Context>::compile","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Compile the function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":795494,"byte_end":795508,"line_start":184,"line_end":184,"column_start":19,"column_end":33},"name":"emit_to_memory","qualname":"<Context>::emit_to_memory","value":"fn (&self, isa: &dyn TargetIsa, mem: *mut u8, relocs: &mut dyn RelocSink, traps: &mut dyn TrapSink, stackmaps: &mut dyn StackmapSink) -> CodeInfo","parent":null,"children":[],"decl_id":null,"docs":" Emit machine code directly into raw memory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3042},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":796204,"byte_end":796220,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"emit_unwind_info","qualname":"<Context>::emit_unwind_info","value":"fn (&self, isa: &dyn TargetIsa, mem: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emit unwind information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3043},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":796485,"byte_end":796491,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"verify","qualname":"<Context>::verify","value":"fn <'a, FOI> (&self, fisa: FOI) -> VerifierResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the verifier on the function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3046},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":796898,"byte_end":796907,"line_start":223,"line_end":223,"column_start":12,"column_end":21},"name":"verify_if","qualname":"<Context>::verify_if","value":"fn <'a, FOI> (&self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the verifier only if the `enable_verifier` setting is true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3049},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":797181,"byte_end":797197,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"verify_locations","qualname":"<Context>::verify_locations","value":"fn (&self, isa: &dyn TargetIsa) -> VerifierResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the locations verifier on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":797585,"byte_end":797604,"line_start":244,"line_end":244,"column_start":12,"column_end":31},"name":"verify_locations_if","qualname":"<Context>::verify_locations_if","value":"fn (&self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the locations verifier only if the `enable_verifier` setting is true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3051},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":797838,"byte_end":797841,"line_start":252,"line_end":252,"column_start":12,"column_end":15},"name":"dce","qualname":"<Context>::dce","value":"fn <'a, FOI> (&mut self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform dead-code elimination on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3054},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":798092,"byte_end":798098,"line_start":259,"line_end":259,"column_start":12,"column_end":18},"name":"preopt","qualname":"<Context>::preopt","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform pre-legalization rewrites on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3055},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":798333,"byte_end":798350,"line_start":266,"line_end":266,"column_start":12,"column_end":29},"name":"canonicalize_nans","qualname":"<Context>::canonicalize_nans","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform NaN canonicalizing rewrites on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3056},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":798554,"byte_end":798562,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"legalize","qualname":"<Context>::legalize","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the legalizer for `isa` on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3057},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":799083,"byte_end":799090,"line_start":283,"line_end":283,"column_start":12,"column_end":19},"name":"postopt","qualname":"<Context>::postopt","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform post-legalization rewrites on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3058},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":799290,"byte_end":799301,"line_start":290,"line_end":290,"column_start":12,"column_end":23},"name":"compute_cfg","qualname":"<Context>::compute_cfg","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the control flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3059},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":799402,"byte_end":799417,"line_start":295,"line_end":295,"column_start":12,"column_end":27},"name":"compute_domtree","qualname":"<Context>::compute_domtree","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3060},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":799536,"byte_end":799557,"line_start":300,"line_end":300,"column_start":12,"column_end":33},"name":"compute_loop_analysis","qualname":"<Context>::compute_loop_analysis","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the loop analysis.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3061},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":799734,"byte_end":799743,"line_start":306,"line_end":306,"column_start":12,"column_end":21},"name":"flowgraph","qualname":"<Context>::flowgraph","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the control flow graph and dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3062},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":799878,"byte_end":799888,"line_start":312,"line_end":312,"column_start":12,"column_end":22},"name":"simple_gvn","qualname":"<Context>::simple_gvn","value":"fn <'a, FOI> (&mut self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform simple GVN on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":800108,"byte_end":800112,"line_start":318,"line_end":318,"column_start":12,"column_end":16},"name":"licm","qualname":"<Context>::licm","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform LICM on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":800428,"byte_end":800454,"line_start":330,"line_end":330,"column_start":12,"column_end":38},"name":"eliminate_unreachable_code","qualname":"<Context>::eliminate_unreachable_code","value":"fn <'a, FOI> (&mut self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform unreachable code elimination.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3069},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":800723,"byte_end":800731,"line_start":339,"line_end":339,"column_start":12,"column_end":20},"name":"regalloc","qualname":"<Context>::regalloc","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the register allocator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3070},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":800977,"byte_end":800994,"line_start":345,"line_end":345,"column_start":12,"column_end":29},"name":"prologue_epilogue","qualname":"<Context>::prologue_epilogue","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert prologue and epilogues after computing the stack frame layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":801289,"byte_end":801313,"line_start":353,"line_end":353,"column_start":12,"column_end":36},"name":"redundant_reload_remover","qualname":"<Context>::redundant_reload_remover","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Do redundant-reload removal after allocation of both registers and stack slots.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":801564,"byte_end":801583,"line_start":361,"line_end":361,"column_start":12,"column_end":31},"name":"shrink_instructions","qualname":"<Context>::shrink_instructions","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the instruction shrinking pass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":801908,"byte_end":801922,"line_start":370,"line_end":370,"column_start":12,"column_end":26},"name":"relax_branches","qualname":"<Context>::relax_branches","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Run the branch relaxation pass and return information about the function's code and\n read-only data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":802243,"byte_end":802268,"line_start":378,"line_end":378,"column_start":12,"column_end":37},"name":"build_value_labels_ranges","qualname":"<Context>::build_value_labels_ranges","value":"fn (&self, isa: &dyn TargetIsa) -> CodegenResult<ValueLabelsRanges>","parent":null,"children":[],"decl_id":null,"docs":" Builds ranges and location for specified value labels.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3358},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/legalizer/mod.rs","byte_start":852372,"byte_end":852389,"line_start":140,"line_end":140,"column_start":8,"column_end":25},"name":"legalize_function","qualname":"::legalizer::legalize_function","value":"fn (func: &mut ir::Function, cfg: &mut ControlFlowGraph, isa: &dyn TargetIsa) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Legalize `func` for `isa`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3560},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":988460,"byte_end":988482,"line_start":219,"line_end":219,"column_start":12,"column_end":34},"name":"RedundantReloadRemover","qualname":"::redundant_reload_remover::RedundantReloadRemover","value":"RedundantReloadRemover {  }","parent":null,"children":[{"krate":0,"index":3561},{"krate":0,"index":3562},{"krate":0,"index":3563},{"krate":0,"index":3564},{"krate":0,"index":3565},{"krate":0,"index":3566}],"decl_id":null,"docs":" The redundant reload remover's state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3605},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1013753,"byte_end":1013756,"line_start":765,"line_end":765,"column_start":12,"column_end":15},"name":"new","qualname":"<RedundantReloadRemover>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new remover state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3606},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1014215,"byte_end":1014220,"line_start":777,"line_end":777,"column_start":12,"column_end":17},"name":"clear","qualname":"<RedundantReloadRemover>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the state of the remover.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3617},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1017925,"byte_end":1017928,"line_start":880,"line_end":880,"column_start":12,"column_end":15},"name":"run","qualname":"<RedundantReloadRemover>::run","value":"fn (&mut self, isa: &dyn TargetIsa, func: &mut Function, cfg: &ControlFlowGraph) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Run the remover.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3817},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1102848,"byte_end":1102856,"line_start":290,"line_end":290,"column_start":12,"column_end":20},"name":"Liveness","qualname":"::regalloc::liveness::Liveness","value":"Liveness {  }","parent":null,"children":[{"krate":0,"index":3818},{"krate":0,"index":3819}],"decl_id":null,"docs":" Liveness analysis for a function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3821},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1103411,"byte_end":1103414,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"new","qualname":"<Liveness>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty liveness analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1103574,"byte_end":1103580,"line_start":313,"line_end":313,"column_start":12,"column_end":18},"name":"ranges","qualname":"<Liveness>::ranges","value":"fn (&self) -> &LiveRangeSet","parent":null,"children":[],"decl_id":null,"docs":" Current live ranges.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3823},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1103707,"byte_end":1103712,"line_start":318,"line_end":318,"column_start":12,"column_end":17},"name":"clear","qualname":"<Liveness>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this liveness analysis.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3824},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1103858,"byte_end":1103861,"line_start":324,"line_end":324,"column_start":12,"column_end":15},"name":"get","qualname":"<Liveness>::get","value":"fn (&self, value: Value) -> Option<&LiveRange>","parent":null,"children":[],"decl_id":null,"docs":" Get the live range for `value`, if it exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1104176,"byte_end":1104187,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"create_dead","qualname":"<Liveness>::create_dead","value":"fn <PP> (&mut self, value: Value, def: PP, affinity: Affinity) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create a new live range for `value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3827},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1104652,"byte_end":1104668,"line_start":346,"line_end":346,"column_start":12,"column_end":28},"name":"move_def_locally","qualname":"<Liveness>::move_def_locally","value":"fn <PP> (&mut self, value: Value, def: PP) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Move the definition of `value` to `def`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3829},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1105149,"byte_end":1105163,"line_start":359,"line_end":359,"column_start":12,"column_end":26},"name":"extend_locally","qualname":"<Liveness>::extend_locally","value":"fn (&mut self, value: Value, ebb: Ebb, user: Inst, layout: &Layout) -> &mut Affinity","parent":null,"children":[],"decl_id":null,"docs":" Locally extend the live range for `value` to reach `user`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3830},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1105697,"byte_end":1105702,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"spill","qualname":"<Liveness>::spill","value":"fn (&mut self, value: Value) -> Affinity","parent":null,"children":[],"decl_id":null,"docs":" Change the affinity of `value` to `Stack` and return the previous affinity.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3831},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1106038,"byte_end":1106045,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"compute","qualname":"<Liveness>::compute","value":"fn (&mut self, isa: &dyn TargetIsa, func: &mut Function, cfg: &ControlFlowGraph) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the live ranges of all SSA values used in `func`.\n This clears out any existing analysis stored in this data structure.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3855},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1117464,"byte_end":1117480,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"GenericLiveRange","qualname":"::regalloc::liverange::GenericLiveRange","value":"GenericLiveRange { affinity }","parent":null,"children":[{"krate":0,"index":3857},{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3863}],"decl_id":null,"docs":" Generic live range implementation.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3858},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1117723,"byte_end":1117731,"line_start":169,"line_end":169,"column_start":9,"column_end":17},"name":"affinity","qualname":"::regalloc::liverange::GenericLiveRange::affinity","value":"regalloc::affinity::Affinity","parent":{"krate":0,"index":3855},"children":[],"decl_id":null,"docs":" The preferred register allocation for this value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3867},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1119304,"byte_end":1119307,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericLiveRange<PO>>::new","value":"fn (value: Value, def: ProgramPoint, affinity: Affinity) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new live range for `value` defined at `def`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3871},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1120850,"byte_end":1120863,"line_start":251,"line_end":251,"column_start":12,"column_end":25},"name":"extend_in_ebb","qualname":"<GenericLiveRange<PO>>::extend_in_ebb","value":"fn (&mut self, ebb: Ebb, inst: Inst, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extend the local interval for `ebb` so it reaches `to` which must belong to `ebb`.\n Create a live-in interval if necessary.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1125267,"byte_end":1125274,"line_start":352,"line_end":352,"column_start":12,"column_end":19},"name":"is_dead","qualname":"<GenericLiveRange<PO>>::is_dead","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the live range of a dead value?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3875},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1125540,"byte_end":1125548,"line_start":360,"line_end":360,"column_start":12,"column_end":20},"name":"is_local","qualname":"<GenericLiveRange<PO>>::is_local","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a local live range?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3876},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1125808,"byte_end":1125811,"line_start":368,"line_end":368,"column_start":12,"column_end":15},"name":"def","qualname":"<GenericLiveRange<PO>>::def","value":"fn (&self) -> ProgramPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the program point where this live range is defined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3877},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1126077,"byte_end":1126093,"line_start":376,"line_end":376,"column_start":12,"column_end":28},"name":"move_def_locally","qualname":"<GenericLiveRange<PO>>::move_def_locally","value":"fn (&mut self, def: ProgramPoint) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Move the definition of this value to a new program point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3878},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1126429,"byte_end":1126442,"line_start":384,"line_end":384,"column_start":12,"column_end":25},"name":"def_local_end","qualname":"<GenericLiveRange<PO>>::def_local_end","value":"fn (&self) -> ProgramPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the local end-point of this live range in the EBB where it is defined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1127004,"byte_end":1127020,"line_start":396,"line_end":396,"column_start":12,"column_end":28},"name":"livein_local_end","qualname":"<GenericLiveRange<PO>>::livein_local_end","value":"fn (&self, ebb: Ebb, order: &PO) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Get the local end-point of this live range in an EBB where it is live-in.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3881},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1127581,"byte_end":1127590,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"is_livein","qualname":"<GenericLiveRange<PO>>::is_livein","value":"fn (&self, ebb: Ebb, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this value live-in to `ebb`?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1127884,"byte_end":1127891,"line_start":421,"line_end":421,"column_start":12,"column_end":19},"name":"liveins","qualname":"<GenericLiveRange<PO>>::liveins","value":"fn <'a> (&'a self) -> impl Iterator<Item = (Ebb, Inst)> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Get all the live-in intervals.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3886},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1128134,"byte_end":1128146,"line_start":428,"line_end":428,"column_start":12,"column_end":24},"name":"overlaps_def","qualname":"<GenericLiveRange<PO>>::overlaps_def","value":"fn (&self, def: ExpandedProgramPoint, ebb: Ebb, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this live range overlaps a definition in `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3887},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1128824,"byte_end":1128835,"line_start":447,"line_end":447,"column_start":12,"column_end":23},"name":"reaches_use","qualname":"<GenericLiveRange<PO>>::reaches_use","value":"fn (&self, user: Inst, ebb: Ebb, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this live range reaches a use at `user` in `ebb`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3888},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1129337,"byte_end":1129346,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"killed_at","qualname":"<GenericLiveRange<PO>>::killed_at","value":"fn (&self, user: Inst, ebb: Ebb, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this live range is killed at `user` in `ebb`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8497},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1139112,"byte_end":1139123,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"RegisterSet","qualname":"::regalloc::register_set::RegisterSet","value":"RegisterSet {  }","parent":null,"children":[{"krate":0,"index":8498}],"decl_id":null,"docs":" Set of registers available for allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3904},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1140039,"byte_end":1140042,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<RegisterSet>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new register set with all registers available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1140168,"byte_end":1140173,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"empty","qualname":"<RegisterSet>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new register set with no registers available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3908},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1140298,"byte_end":1140306,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"is_avail","qualname":"<RegisterSet>::is_avail","value":"fn (&self, rc: RegClass, reg: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the specified register is available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3909},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1140623,"byte_end":1140627,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"take","qualname":"<RegisterSet>::take","value":"fn (&mut self, rc: RegClass, reg: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allocate `reg` from `rc` so it is no longer available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1141064,"byte_end":1141068,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"free","qualname":"<RegisterSet>::free","value":"fn (&mut self, rc: RegClass, reg: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Return `reg` and all of its register units to the set of available registers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3911},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1141595,"byte_end":1141599,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"iter","qualname":"<RegisterSet>::iter","value":"fn (&self, rc: RegClass) -> RegSetIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all available registers belonging to the register class `rc`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3912},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1142473,"byte_end":1142488,"line_start":106,"line_end":106,"column_start":12,"column_end":27},"name":"interferes_with","qualname":"<RegisterSet>::interferes_with","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if any register units allocated out of this set interferes with units allocated out\n of `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1142803,"byte_end":1142812,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"intersect","qualname":"<RegisterSet>::intersect","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this set of registers with `other`. This has the effect of removing any register\n units from this set that are not in `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3915},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1143068,"byte_end":1143075,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"display","qualname":"<RegisterSet>::display","value":"fn <'a, R> (&self, regs: R) -> DisplayRegisterSet<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this register set, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8501},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1143304,"byte_end":1143314,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"RegSetIter","qualname":"::regalloc::register_set::RegSetIter","value":"RegSetIter {  }","parent":null,"children":[{"krate":0,"index":8502}],"decl_id":null,"docs":" Iterator over available registers in a register class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3924},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1144333,"byte_end":1144338,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"rnext","qualname":"<RegSetIter>::rnext","value":"fn (&mut self) -> Option<RegUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3926},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1145202,"byte_end":1145220,"line_start":193,"line_end":193,"column_start":12,"column_end":30},"name":"DisplayRegisterSet","qualname":"::regalloc::register_set::DisplayRegisterSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying an `RegisterSet` correctly requires the associated `RegInfo` from the target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8507},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1152555,"byte_end":1152562,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"VirtReg","qualname":"::regalloc::virtregs::VirtReg","value":"","parent":null,"children":[],"decl_id":null,"docs":" A virtual register reference.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3958},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1152815,"byte_end":1152823,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"VirtRegs","qualname":"::regalloc::virtregs::VirtRegs","value":"VirtRegs {  }","parent":null,"children":[{"krate":0,"index":3959},{"krate":0,"index":3960},{"krate":0,"index":3961},{"krate":0,"index":3962},{"krate":0,"index":3963},{"krate":0,"index":3964}],"decl_id":null,"docs":" Collection of virtual registers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3966},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1153595,"byte_end":1153598,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<VirtRegs>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new virtual register collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3967},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1153933,"byte_end":1153938,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"clear","qualname":"<VirtRegs>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all virtual registers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3968},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1154225,"byte_end":1154228,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"get","qualname":"<VirtRegs>::get","value":"fn (&self, value: Value) -> Option<VirtReg>","parent":null,"children":[],"decl_id":null,"docs":" Get the virtual register containing `value`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3969},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1154370,"byte_end":1154376,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"name":"values","qualname":"<VirtRegs>::values","value":"fn (&self, vreg: VirtReg) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the list of values in `vreg`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3970},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1154529,"byte_end":1154541,"line_start":93,"line_end":93,"column_start":12,"column_end":24},"name":"all_virtregs","qualname":"<VirtRegs>::all_virtregs","value":"fn (&self) -> Keys<VirtReg>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all virtual registers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3971},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1154907,"byte_end":1154923,"line_start":102,"line_end":102,"column_start":12,"column_end":28},"name":"congruence_class","qualname":"<VirtRegs>::congruence_class","value":"fn <'a, 'b> (&'a self, value: &'b Value) -> &'b [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the congruence class of `value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3976},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1155190,"byte_end":1155200,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"same_class","qualname":"<VirtRegs>::same_class","value":"fn (&self, a: Value, b: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `a` and `b` belong to the same congruence class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3977},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1155559,"byte_end":1155570,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"sort_values","qualname":"<VirtRegs>::sort_values","value":"fn (&mut self, vreg: VirtReg, func: &Function, preorder: &DominatorTreePreorder) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Sort the values in `vreg` according to the dominator tree pre-order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3979},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1156190,"byte_end":1156203,"line_start":138,"line_end":138,"column_start":12,"column_end":25},"name":"insert_single","qualname":"<VirtRegs>::insert_single","value":"fn (&mut self, big: Value, single: Value, func: &Function, preorder: &DominatorTreePreorder) -> VirtReg","parent":null,"children":[],"decl_id":null,"docs":" Insert a single value into a sorted virtual register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1157294,"byte_end":1157300,"line_start":172,"line_end":172,"column_start":12,"column_end":18},"name":"remove","qualname":"<VirtRegs>::remove","value":"fn (&mut self, vreg: VirtReg) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove a virtual register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3985},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1158199,"byte_end":1158204,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"unify","qualname":"<VirtRegs>::unify","value":"fn (&mut self, values: &[Value]) -> VirtReg","parent":null,"children":[],"decl_id":null,"docs":" Unify `values` into a single virtual register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1162375,"byte_end":1162380,"line_start":317,"line_end":317,"column_start":12,"column_end":17},"name":"union","qualname":"<VirtRegs>::union","value":"fn (&mut self, a: Value, b: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union the two sets containing `a` and `b`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1164365,"byte_end":1164382,"line_start":364,"line_end":364,"column_start":12,"column_end":29},"name":"finish_union_find","qualname":"<VirtRegs>::finish_union_find","value":"fn (&mut self, mut new_vregs: Option<&mut Vec<VirtReg>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute virtual registers based on previous calls to `union(a, b)`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8545},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170278,"byte_end":1170288,"line_start":22,"line_end":22,"column_start":5,"column_end":15},"name":"Unassigned","qualname":"::regalloc::affinity::Affinity::Unassigned","value":"Affinity::Unassigned","parent":{"krate":0,"index":8544},"children":[],"decl_id":null,"docs":" No affinity.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8547},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170361,"byte_end":1170366,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Stack","qualname":"::regalloc::affinity::Affinity::Stack","value":"Affinity::Stack","parent":{"krate":0,"index":8544},"children":[],"decl_id":null,"docs":" This value should be placed in a spill slot on the stack.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8549},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170442,"byte_end":1170445,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"Reg","qualname":"::regalloc::affinity::Affinity::Reg","value":"Affinity::Reg(RegClassIndex)","parent":{"krate":0,"index":8544},"children":[],"decl_id":null,"docs":" This value prefers a register from the given register class.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8544},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170081,"byte_end":1170089,"line_start":17,"line_end":17,"column_start":10,"column_end":18},"name":"Affinity","qualname":"::regalloc::affinity::Affinity","value":"Affinity::{Unassigned, Stack, Reg}","parent":null,"children":[{"krate":0,"index":8545},{"krate":0,"index":8547},{"krate":0,"index":8549}],"decl_id":null,"docs":" Preferred register allocation for an SSA value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4018},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170761,"byte_end":1170764,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Affinity>::new","value":"fn (constraint: &OperandConstraint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an affinity that satisfies a single constraint.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4019},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1171047,"byte_end":1171050,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"abi","qualname":"<Affinity>::abi","value":"fn (arg: &AbiParam, isa: &dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an affinity that matches an ABI argument for `isa`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4020},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1171401,"byte_end":1171414,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"is_unassigned","qualname":"<Affinity>::is_unassigned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the `Unassigned` affinity?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4021},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1171578,"byte_end":1171584,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"is_reg","qualname":"<Affinity>::is_reg","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the `Reg` affinity?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4022},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1171746,"byte_end":1171754,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"is_stack","qualname":"<Affinity>::is_stack","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the `Stack` affinity?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4023},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1172071,"byte_end":1172076,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"merge","qualname":"<Affinity>::merge","value":"fn (&mut self, constraint: &OperandConstraint, reginfo: &RegInfo) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Merge an operand constraint into this affinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4024},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1172994,"byte_end":1173001,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"display","qualname":"<Affinity>::display","value":"fn <'a, R> (self, regs: R) -> DisplayAffinity<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this value affinity, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4027},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1173233,"byte_end":1173248,"line_start":113,"line_end":113,"column_start":12,"column_end":27},"name":"DisplayAffinity","qualname":"::regalloc::affinity::DisplayAffinity","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying an `Affinity` correctly requires the associated `RegInfo` from the target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4232},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1222737,"byte_end":1222744,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"Context","qualname":"::regalloc::context::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":4233},{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240}],"decl_id":null,"docs":" Persistent memory allocations for register allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4242},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1223150,"byte_end":1223153,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new context for register allocation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4243},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1223576,"byte_end":1223581,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"clear","qualname":"<Context>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4244},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1223895,"byte_end":1223903,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"liveness","qualname":"<Context>::liveness","value":"fn (&self) -> &Liveness","parent":null,"children":[],"decl_id":null,"docs":" Current values liveness state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4245},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1224186,"byte_end":1224189,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"run","qualname":"<Context>::run","value":"fn (&mut self, isa: &dyn TargetIsa, func: &mut Function, cfg: &mut ControlFlowGraph, domtree: &mut DominatorTree) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Allocate registers in `func`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8568},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230416,"byte_end":1230425,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"Diversion","qualname":"::regalloc::diversion::Diversion","value":"Diversion { from, to }","parent":null,"children":[{"krate":0,"index":8569},{"krate":0,"index":8570}],"decl_id":null,"docs":" A diversion of a value from its original location to a new register or stack location.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8569},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230473,"byte_end":1230477,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"name":"from","qualname":"::regalloc::diversion::Diversion::from","value":"ir::valueloc::ValueLoc","parent":{"krate":0,"index":8568},"children":[],"decl_id":null,"docs":" The original value location.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8570},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230533,"byte_end":1230535,"line_start":30,"line_end":30,"column_start":9,"column_end":11},"name":"to","qualname":"::regalloc::diversion::Diversion::to","value":"ir::valueloc::ValueLoc","parent":{"krate":0,"index":8568},"children":[],"decl_id":null,"docs":" The current value location.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4268},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230608,"byte_end":1230611,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Diversion>::new","value":"fn (from: ValueLoc, to: ValueLoc) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a new diversion.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8583},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230818,"byte_end":1230831,"line_start":43,"line_end":43,"column_start":12,"column_end":25},"name":"RegDiversions","qualname":"::regalloc::diversion::RegDiversions","value":"RegDiversions {  }","parent":null,"children":[{"krate":0,"index":8584}],"decl_id":null,"docs":" Keep track of diversions in an EBB.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4269},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231101,"byte_end":1231119,"line_start":55,"line_end":55,"column_start":12,"column_end":30},"name":"EntryRegDiversions","qualname":"::regalloc::diversion::EntryRegDiversions","value":"EntryRegDiversions {  }","parent":null,"children":[{"krate":0,"index":4270}],"decl_id":null,"docs":" Map EBB to their matching RegDiversions at basic blocks entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4272},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231253,"byte_end":1231256,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<RegDiversions>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty diversion tracker.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4273},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231436,"byte_end":1231441,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"clear","qualname":"<RegDiversions>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the content of the diversions, to reset the state of the compiler.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4274},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231536,"byte_end":1231544,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RegDiversions>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are there any diversions?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4275},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231666,"byte_end":1231675,"line_start":78,"line_end":78,"column_start":12,"column_end":21},"name":"diversion","qualname":"<RegDiversions>::diversion","value":"fn (&self, value: Value) -> Option<&Diversion>","parent":null,"children":[],"decl_id":null,"docs":" Get the current diversion of `value`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4276},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231808,"byte_end":1231812,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"iter","qualname":"<RegDiversions>::iter","value":"fn (&self) -> Iter<'_, Value, Diversion>","parent":null,"children":[],"decl_id":null,"docs":" Get all current diversions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4277},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1232008,"byte_end":1232011,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"get","qualname":"<RegDiversions>::get","value":"fn (&self, value: Value, locations: &ValueLocations) -> ValueLoc","parent":null,"children":[],"decl_id":null,"docs":" Get the current location for `value`. Fall back to the assignment map for non-diverted\n values\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4278},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1232304,"byte_end":1232307,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"reg","qualname":"<RegDiversions>::reg","value":"fn (&self, value: Value, locations: &ValueLocations) -> RegUnit","parent":null,"children":[],"decl_id":null,"docs":" Get the current register location for `value`, or panic if `value` isn't in a register.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4279},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1232531,"byte_end":1232536,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"stack","qualname":"<RegDiversions>::stack","value":"fn (&self, value: Value, locations: &ValueLocations) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get the current stack location for `value`, or panic if `value` isn't in a stack slot.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4281},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1233591,"byte_end":1233598,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"regmove","qualname":"<RegDiversions>::regmove","value":"fn (&mut self, value: Value, from: RegUnit, to: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a register -> register move.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4282},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1233781,"byte_end":1233789,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"regspill","qualname":"<RegDiversions>::regspill","value":"fn (&mut self, value: Value, from: RegUnit, to: StackSlot) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a register -> stack move.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4283},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1233976,"byte_end":1233983,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"regfill","qualname":"<RegDiversions>::regfill","value":"fn (&mut self, value: Value, from: StackSlot, to: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a stack -> register move.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4284},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1234285,"byte_end":1234290,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"apply","qualname":"<RegDiversions>::apply","value":"fn (&mut self, inst: &InstructionData) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply the effect of `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4285},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1235080,"byte_end":1235086,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"remove","qualname":"<RegDiversions>::remove","value":"fn (&mut self, value: Value) -> Option<ValueLoc>","parent":null,"children":[],"decl_id":null,"docs":" Drop any recorded move for `value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4287},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1235414,"byte_end":1235420,"line_start":183,"line_end":183,"column_start":12,"column_end":18},"name":"at_ebb","qualname":"<RegDiversions>::at_ebb","value":"fn (&mut self, entry_diversions: &EntryRegDiversions, ebb: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of the current diversions to the recorded diversions at the entry of the\n given `ebb`. The recoded diversions is available after coloring on `func.entry_diversions`\n field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4288},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1235963,"byte_end":1235975,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"save_for_ebb","qualname":"<RegDiversions>::save_for_ebb","value":"fn (&mut self, entry_diversions: &mut EntryRegDiversions, target: Ebb) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copy the current state of the diversions, and save it for the entry of the `ebb` given as\n argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4289},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1236643,"byte_end":1236658,"line_start":213,"line_end":213,"column_start":12,"column_end":27},"name":"check_ebb_entry","qualname":"<RegDiversions>::check_ebb_entry","value":"fn (&self, entry_diversions: &EntryRegDiversions, target: Ebb) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the recorded entry for a given `ebb` matches what is recorded in the\n `entry_diversions`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4290},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237259,"byte_end":1237266,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"display","qualname":"<RegDiversions>::display","value":"fn <'a, R> (&'a self, regs: R) -> DisplayDiversions<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display the diversions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4294},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237526,"byte_end":1237529,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"new","qualname":"<EntryRegDiversions>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty entry diversion, to associate diversions to each EBB entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4295},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237620,"byte_end":1237625,"line_start":245,"line_end":245,"column_start":12,"column_end":17},"name":"clear","qualname":"<EntryRegDiversions>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4300},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1238226,"byte_end":1238243,"line_start":270,"line_end":270,"column_start":12,"column_end":29},"name":"DisplayDiversions","qualname":"::regalloc::diversion::DisplayDiversions","value":"","parent":null,"children":[],"decl_id":null,"docs":" Object that displays register diversions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8643},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1350786,"byte_end":1350794,"line_start":16,"line_end":16,"column_start":5,"column_end":13},"name":"Verifier","qualname":"::result::CodegenError::Verifier","value":"CodegenError::Verifier(VerifierErrors)","parent":{"krate":0,"index":8642},"children":[],"decl_id":null,"docs":" A list of IR verifier errors.","sig":null,"attributes":[{"value":"error(\"Verifier errors\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1350754,"byte_end":1350781,"line_start":15,"line_end":15,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8646},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1351199,"byte_end":1351216,"line_start":25,"line_end":25,"column_start":5,"column_end":22},"name":"ImplLimitExceeded","qualname":"::result::CodegenError::ImplLimitExceeded","value":"CodegenError::ImplLimitExceeded","parent":{"krate":0,"index":8642},"children":[],"decl_id":null,"docs":" An implementation limit was exceeded.","sig":null,"attributes":[{"value":"error(\"Implementation limit exceeded\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1351153,"byte_end":1351194,"line_start":24,"line_end":24,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8648},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1351470,"byte_end":1351482,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"CodeTooLarge","qualname":"::result::CodegenError::CodeTooLarge","value":"CodegenError::CodeTooLarge","parent":{"krate":0,"index":8642},"children":[],"decl_id":null,"docs":" The code size for the function is too large.","sig":null,"attributes":[{"value":"error(\"Code for function is too large\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1351423,"byte_end":1351465,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":8642},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1350561,"byte_end":1350573,"line_start":10,"line_end":10,"column_start":10,"column_end":22},"name":"CodegenError","qualname":"::result::CodegenError","value":"CodegenError::{Verifier, ImplLimitExceeded, CodeTooLarge}","parent":null,"children":[{"krate":0,"index":8643},{"krate":0,"index":8646},{"krate":0,"index":8648}],"decl_id":null,"docs":" A compilation error.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4628},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/result.rs","byte_start":1351578,"byte_end":1351591,"line_start":36,"line_end":36,"column_start":10,"column_end":23},"name":"CodegenResult","qualname":"::result::CodegenResult","value":"Result<T, CodegenError>","parent":null,"children":[],"decl_id":null,"docs":" A convenient alias for a `Result` that uses `CodegenError` as the error type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8711},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1415816,"byte_end":1415829,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"ValueLocRange","qualname":"::value_label::ValueLocRange","value":"ValueLocRange { loc, start, end }","parent":null,"children":[{"krate":0,"index":8712},{"krate":0,"index":8713},{"krate":0,"index":8714}],"decl_id":null,"docs":" Value location range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8712},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1415904,"byte_end":1415907,"line_start":20,"line_end":20,"column_start":9,"column_end":12},"name":"loc","qualname":"::value_label::ValueLocRange::loc","value":"ir::valueloc::ValueLoc","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" The ValueLoc containing a ValueLabel during this range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8713},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1415959,"byte_end":1415964,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"start","qualname":"::value_label::ValueLocRange::start","value":"u32","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" The start of the range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8714},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1416009,"byte_end":1416012,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"end","qualname":"::value_label::ValueLocRange::end","value":"u32","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" The end of the range.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4852},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1416093,"byte_end":1416110,"line_start":28,"line_end":28,"column_start":10,"column_end":27},"name":"ValueLabelsRanges","qualname":"::value_label::ValueLabelsRanges","value":"HashMap<ValueLabel, Vec<ValueLocRange>>","parent":null,"children":[],"decl_id":null,"docs":" Resulting map of Value labels and their ranges/locations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4877},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":3047,"byte_end":3054,"line_start":110,"line_end":110,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::VERSION","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Version number of this crate.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":12358,"byte_end":12372,"line_start":46,"line_end":46,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":14166,"byte_end":14180,"line_start":99,"line_end":99,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":14501,"byte_end":14515,"line_start":109,"line_end":109,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":16477,"byte_end":16490,"line_start":179,"line_end":179,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":16958,"byte_end":16970,"line_start":190,"line_end":190,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":17386,"byte_end":17402,"line_start":203,"line_end":203,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/stackmap.rs","byte_start":35966,"byte_end":35974,"line_start":15,"line_end":15,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4840,"byte_end":4845,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6326,"byte_end":6334,"line_start":98,"line_end":98,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":40202,"byte_end":40212,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":42079,"byte_end":42089,"line_start":75,"line_end":75,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":62515,"byte_end":62525,"line_start":581,"line_end":581,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":63168,"byte_end":63178,"line_start":602,"line_end":602,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":65757,"byte_end":65766,"line_start":686,"line_end":686,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":67175,"byte_end":67184,"line_start":728,"line_end":728,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dbg.rs","byte_start":70138,"byte_end":70149,"line_start":12,"line_end":12,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":72337,"byte_end":72350,"line_start":53,"line_end":53,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":78353,"byte_end":78366,"line_start":215,"line_end":215,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":88519,"byte_end":88532,"line_start":451,"line_end":451,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":92367,"byte_end":92388,"line_start":541,"line_end":541,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":94748,"byte_end":94757,"line_start":605,"line_end":605,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":95035,"byte_end":95056,"line_start":618,"line_end":618,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":108446,"byte_end":108456,"line_start":42,"line_end":42,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":110037,"byte_end":110053,"line_start":81,"line_end":81,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":114418,"byte_end":114426,"line_start":201,"line_end":201,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":124830,"byte_end":124831,"line_start":42,"line_end":42,"column_start":54,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":126136,"byte_end":126149,"line_start":74,"line_end":74,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":127797,"byte_end":127810,"line_start":116,"line_end":116,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":128733,"byte_end":128751,"line_start":147,"line_end":147,"column_start":46,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":130124,"byte_end":130138,"line_start":186,"line_end":186,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":130341,"byte_end":130355,"line_start":193,"line_end":193,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":133886,"byte_end":133898,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134057,"byte_end":134069,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134152,"byte_end":134164,"line_start":43,"line_end":43,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134256,"byte_end":134268,"line_start":49,"line_end":49,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134344,"byte_end":134356,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":135356,"byte_end":135368,"line_start":92,"line_end":92,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":136280,"byte_end":136292,"line_start":117,"line_end":117,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":138598,"byte_end":138615,"line_start":175,"line_end":175,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":139586,"byte_end":139598,"line_start":204,"line_end":204,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152458,"byte_end":152471,"line_start":81,"line_end":81,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":155868,"byte_end":155874,"line_start":202,"line_end":202,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":156167,"byte_end":156180,"line_start":216,"line_end":216,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":162003,"byte_end":162011,"line_start":382,"line_end":382,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":163512,"byte_end":163525,"line_start":432,"line_end":432,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":175886,"byte_end":175899,"line_start":747,"line_end":747,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176106,"byte_end":176119,"line_start":756,"line_end":756,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176259,"byte_end":176272,"line_start":763,"line_end":763,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":182194,"byte_end":182201,"line_start":918,"line_end":918,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":182450,"byte_end":182461,"line_start":929,"line_end":929,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":183193,"byte_end":183206,"line_start":954,"line_end":954,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":197234,"byte_end":197237,"line_start":38,"line_end":38,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":198328,"byte_end":198333,"line_start":68,"line_end":68,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":200191,"byte_end":200200,"line_start":115,"line_end":115,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":201658,"byte_end":201669,"line_start":149,"line_end":149,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":202313,"byte_end":202321,"line_start":171,"line_end":171,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":203052,"byte_end":203061,"line_start":194,"line_end":194,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":204148,"byte_end":204157,"line_start":222,"line_end":222,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":205638,"byte_end":205645,"line_start":255,"line_end":255,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":206884,"byte_end":206890,"line_start":284,"line_end":284,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":207650,"byte_end":207654,"line_start":307,"line_end":307,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":208587,"byte_end":208592,"line_start":331,"line_end":331,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209538,"byte_end":209547,"line_start":371,"line_end":371,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210136,"byte_end":210145,"line_start":389,"line_end":389,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210278,"byte_end":210287,"line_start":395,"line_end":395,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210370,"byte_end":210379,"line_start":401,"line_end":401,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210465,"byte_end":210474,"line_start":407,"line_end":407,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210566,"byte_end":210575,"line_start":413,"line_end":413,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210677,"byte_end":210686,"line_start":419,"line_end":419,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210790,"byte_end":210799,"line_start":425,"line_end":425,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210897,"byte_end":210906,"line_start":431,"line_end":431,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210999,"byte_end":211008,"line_start":437,"line_end":437,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":211097,"byte_end":211106,"line_start":443,"line_end":443,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":211192,"byte_end":211201,"line_start":449,"line_end":449,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213254,"byte_end":213263,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":216323,"byte_end":216339,"line_start":123,"line_end":123,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":216712,"byte_end":216721,"line_start":136,"line_end":136,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217486,"byte_end":217494,"line_start":160,"line_end":160,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":219391,"byte_end":219406,"line_start":218,"line_end":218,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":220001,"byte_end":220009,"line_start":238,"line_end":238,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":223387,"byte_end":223402,"line_start":334,"line_end":334,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":223541,"byte_end":223556,"line_start":340,"line_end":340,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":224663,"byte_end":224674,"line_start":372,"line_end":372,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":228849,"byte_end":228861,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":230069,"byte_end":230081,"line_start":85,"line_end":85,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":230167,"byte_end":230179,"line_start":91,"line_end":91,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":230696,"byte_end":230708,"line_start":107,"line_end":107,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233968,"byte_end":233979,"line_start":56,"line_end":56,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":238065,"byte_end":238073,"line_start":104,"line_end":104,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":245984,"byte_end":246010,"line_start":312,"line_end":312,"column_start":46,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246385,"byte_end":246400,"line_start":324,"line_end":324,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246544,"byte_end":246552,"line_start":330,"line_end":330,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246719,"byte_end":246727,"line_start":336,"line_end":336,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":247173,"byte_end":247187,"line_start":352,"line_end":352,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":250018,"byte_end":250033,"line_start":69,"line_end":69,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":250646,"byte_end":250661,"line_start":87,"line_end":87,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":253204,"byte_end":253212,"line_start":44,"line_end":44,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":254868,"byte_end":254871,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255193,"byte_end":255198,"line_start":50,"line_end":50,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255455,"byte_end":255460,"line_start":62,"line_end":62,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255533,"byte_end":255538,"line_start":68,"line_end":68,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255644,"byte_end":255649,"line_start":74,"line_end":74,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255724,"byte_end":255729,"line_start":80,"line_end":80,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":256594,"byte_end":256599,"line_start":114,"line_end":114,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257060,"byte_end":257066,"line_start":130,"line_end":130,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257326,"byte_end":257332,"line_start":142,"line_end":142,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257405,"byte_end":257411,"line_start":148,"line_end":148,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257891,"byte_end":257897,"line_start":170,"line_end":170,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260121,"byte_end":260127,"line_start":241,"line_end":241,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260658,"byte_end":260664,"line_start":261,"line_end":261,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260737,"byte_end":260743,"line_start":267,"line_end":267,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260827,"byte_end":260833,"line_start":273,"line_end":273,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260908,"byte_end":260914,"line_start":279,"line_end":279,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261133,"byte_end":261139,"line_start":289,"line_end":289,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261707,"byte_end":261714,"line_start":310,"line_end":310,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1073},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262094,"byte_end":262101,"line_start":327,"line_end":327,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262558,"byte_end":262566,"line_start":343,"line_end":343,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263267,"byte_end":263275,"line_start":370,"line_end":370,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1083}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263348,"byte_end":263356,"line_start":376,"line_end":376,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263440,"byte_end":263448,"line_start":382,"line_end":382,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263523,"byte_end":263531,"line_start":388,"line_end":388,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263982,"byte_end":263990,"line_start":407,"line_end":407,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":272762,"byte_end":272768,"line_start":676,"line_end":676,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274041,"byte_end":274047,"line_start":719,"line_end":719,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274210,"byte_end":274216,"line_start":726,"line_end":726,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274453,"byte_end":274459,"line_start":737,"line_end":737,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274548,"byte_end":274554,"line_start":743,"line_end":743,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274646,"byte_end":274652,"line_start":749,"line_end":749,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":275926,"byte_end":275932,"line_start":792,"line_end":792,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276085,"byte_end":276091,"line_start":799,"line_end":799,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276322,"byte_end":276328,"line_start":810,"line_end":810,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276417,"byte_end":276423,"line_start":816,"line_end":816,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276528,"byte_end":276534,"line_start":822,"line_end":822,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10711179,"byte_end":10711196,"line_start":110,"line_end":110,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6203}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721579,"byte_end":10721594,"line_start":524,"line_end":524,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":6205},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":6209},{"krate":0,"index":6211},{"krate":0,"index":6212},{"krate":0,"index":6213},{"krate":0,"index":6214}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784562,"byte_end":10784568,"line_start":2008,"line_end":2008,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":6217},{"krate":0,"index":6218},{"krate":0,"index":6219},{"krate":0,"index":6220},{"krate":0,"index":6221},{"krate":0,"index":6222},{"krate":0,"index":6223},{"krate":0,"index":6224},{"krate":0,"index":6225},{"krate":0,"index":6226},{"krate":0,"index":6227}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":297827,"byte_end":297833,"line_start":47,"line_end":47,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":297948,"byte_end":297954,"line_start":53,"line_end":53,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":298655,"byte_end":298661,"line_start":70,"line_end":70,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1164},{"krate":0,"index":1165}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":299631,"byte_end":299643,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300338,"byte_end":300350,"line_start":127,"line_end":127,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1180},{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300458,"byte_end":300470,"line_start":135,"line_end":135,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300565,"byte_end":300577,"line_start":141,"line_end":141,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300882,"byte_end":300894,"line_start":154,"line_end":154,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":301102,"byte_end":301117,"line_start":164,"line_end":164,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":307614,"byte_end":307631,"line_start":342,"line_end":342,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311786,"byte_end":311798,"line_start":450,"line_end":450,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":313925,"byte_end":313942,"line_start":523,"line_end":523,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":321812,"byte_end":321825,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":323073,"byte_end":323086,"line_start":69,"line_end":69,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":325882,"byte_end":325888,"line_start":45,"line_end":45,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":328171,"byte_end":328177,"line_start":118,"line_end":118,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1310},{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":328664,"byte_end":328670,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1317},{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":336329,"byte_end":336335,"line_start":338,"line_end":338,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":340789,"byte_end":340793,"line_start":484,"line_end":484,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":341434,"byte_end":341440,"line_start":512,"line_end":512,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":347922,"byte_end":347927,"line_start":715,"line_end":715,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":348336,"byte_end":348341,"line_start":732,"line_end":732,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365111,"byte_end":365118,"line_start":51,"line_end":51,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365239,"byte_end":365246,"line_start":57,"line_end":57,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365941,"byte_end":365948,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":370980,"byte_end":370988,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":373627,"byte_end":373635,"line_start":108,"line_end":108,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374372,"byte_end":374384,"line_start":19,"line_end":19,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374566,"byte_end":374578,"line_start":27,"line_end":27,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1447}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374766,"byte_end":374778,"line_start":35,"line_end":35,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375238,"byte_end":375258,"line_start":54,"line_end":54,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375499,"byte_end":375519,"line_start":64,"line_end":64,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375609,"byte_end":375629,"line_start":70,"line_end":70,"column_start":20,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375720,"byte_end":375740,"line_start":76,"line_end":76,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375952,"byte_end":375972,"line_start":85,"line_end":85,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1459}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376196,"byte_end":376216,"line_start":95,"line_end":95,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376438,"byte_end":376450,"line_start":104,"line_end":104,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376616,"byte_end":376636,"line_start":111,"line_end":111,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376779,"byte_end":376791,"line_start":117,"line_end":117,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379135,"byte_end":379144,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379511,"byte_end":379520,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379598,"byte_end":379607,"line_start":44,"line_end":44,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":383192,"byte_end":383205,"line_start":83,"line_end":83,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":383682,"byte_end":383695,"line_start":100,"line_end":100,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384867,"byte_end":384880,"line_start":134,"line_end":134,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1513},{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":385603,"byte_end":385616,"line_start":155,"line_end":155,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":386764,"byte_end":386774,"line_start":191,"line_end":191,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388694,"byte_end":388704,"line_start":256,"line_end":256,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388858,"byte_end":388868,"line_start":264,"line_end":264,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":389033,"byte_end":389043,"line_start":271,"line_end":271,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395751,"byte_end":395760,"line_start":27,"line_end":27,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397760,"byte_end":397768,"line_start":59,"line_end":59,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":398500,"byte_end":398508,"line_start":80,"line_end":80,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":401712,"byte_end":401716,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":409914,"byte_end":409918,"line_start":306,"line_end":306,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":410695,"byte_end":410699,"line_start":329,"line_end":329,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":411524,"byte_end":411528,"line_start":352,"line_end":352,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418130,"byte_end":418138,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418207,"byte_end":418215,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":419476,"byte_end":419491,"line_start":69,"line_end":69,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421240,"byte_end":421251,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421320,"byte_end":421331,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":422490,"byte_end":422508,"line_start":154,"line_end":154,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/abi.rs","byte_start":444852,"byte_end":444856,"line_start":77,"line_end":77,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/abi.rs","byte_start":445638,"byte_end":445642,"line_start":108,"line_end":108,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/registers-x86.rs","byte_start":11747956,"byte_end":11747958,"line_start":164,"line_end":164,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":7605}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings-x86.rs","byte_start":11748111,"byte_end":11748116,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":7710}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings-x86.rs","byte_start":11750038,"byte_end":11750043,"line_start":71,"line_end":71,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":7713},{"krate":0,"index":7714},{"krate":0,"index":7715},{"krate":0,"index":7716},{"krate":0,"index":7717},{"krate":0,"index":7718},{"krate":0,"index":7719},{"krate":0,"index":7720},{"krate":0,"index":7721},{"krate":0,"index":7722},{"krate":0,"index":7723},{"krate":0,"index":7724},{"krate":0,"index":7725},{"krate":0,"index":7726},{"krate":0,"index":7727},{"krate":0,"index":7728},{"krate":0,"index":7729},{"krate":0,"index":7730},{"krate":0,"index":7731},{"krate":0,"index":7732},{"krate":0,"index":7733},{"krate":0,"index":7734},{"krate":0,"index":7735},{"krate":0,"index":7736}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings-x86.rs","byte_start":11756921,"byte_end":11756926,"line_start":330,"line_end":330,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":7748}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/unwind.rs","byte_start":536307,"byte_end":536317,"line_start":38,"line_end":38,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2066}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/unwind.rs","byte_start":538595,"byte_end":538605,"line_start":106,"line_end":106,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2072}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/mod.rs","byte_start":439093,"byte_end":439096,"line_start":62,"line_end":62,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/mod.rs","byte_start":441849,"byte_end":441852,"line_start":165,"line_end":165,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553847,"byte_end":553855,"line_start":26,"line_end":26,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":555597,"byte_end":555605,"line_start":69,"line_end":69,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2140}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":556074,"byte_end":556082,"line_start":83,"line_end":83,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2143}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":557547,"byte_end":557564,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2155}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":561338,"byte_end":561355,"line_start":123,"line_end":123,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":563327,"byte_end":563338,"line_start":173,"line_end":173,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":566434,"byte_end":566445,"line_start":52,"line_end":52,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":570916,"byte_end":570925,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":572845,"byte_end":572854,"line_start":247,"line_end":247,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2225},{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575048,"byte_end":575056,"line_start":21,"line_end":21,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575629,"byte_end":575637,"line_start":44,"line_end":44,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575776,"byte_end":575784,"line_start":51,"line_end":51,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2245}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":576263,"byte_end":576278,"line_start":68,"line_end":68,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2250}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":578029,"byte_end":578036,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2262}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":581637,"byte_end":581644,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2285}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584811,"byte_end":584823,"line_start":156,"line_end":156,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586921,"byte_end":586933,"line_start":212,"line_end":212,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2310}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587055,"byte_end":587067,"line_start":218,"line_end":218,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587264,"byte_end":587276,"line_start":225,"line_end":225,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2314}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587666,"byte_end":587679,"line_start":238,"line_end":238,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2317}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587837,"byte_end":587850,"line_start":248,"line_end":248,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587943,"byte_end":587956,"line_start":254,"line_end":254,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":589035,"byte_end":589042,"line_start":284,"line_end":284,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2330}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":590339,"byte_end":590353,"line_start":324,"line_end":324,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2337}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":592081,"byte_end":592089,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2345},{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":594398,"byte_end":594411,"line_start":89,"line_end":89,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427755,"byte_end":427762,"line_start":146,"line_end":146,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428102,"byte_end":428109,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2360},{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428982,"byte_end":429002,"line_start":182,"line_end":182,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":595581,"byte_end":595589,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2422}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":595889,"byte_end":595901,"line_start":45,"line_end":45,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":597669,"byte_end":597681,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/print_errors.rs","byte_start":609337,"byte_end":609356,"line_start":49,"line_end":49,"column_start":25,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615739,"byte_end":615746,"line_start":54,"line_end":54,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":618153,"byte_end":618160,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2505},{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":620401,"byte_end":620414,"line_start":194,"line_end":194,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621596,"byte_end":621604,"line_start":232,"line_end":232,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2527},{"krate":0,"index":2528}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":622977,"byte_end":622985,"line_start":266,"line_end":266,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2532}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624669,"byte_end":624675,"line_start":322,"line_end":322,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2538}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11816879,"byte_end":11816884,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":8063}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817445,"byte_end":11817453,"line_start":27,"line_end":27,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":8066}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817712,"byte_end":11817720,"line_start":36,"line_end":36,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":8068},{"krate":0,"index":8069}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818451,"byte_end":11818466,"line_start":67,"line_end":67,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":8071}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818981,"byte_end":11818996,"line_start":81,"line_end":81,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":8073},{"krate":0,"index":8074}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11819596,"byte_end":11819601,"line_start":99,"line_end":99,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":8076},{"krate":0,"index":8077},{"krate":0,"index":8078},{"krate":0,"index":8079},{"krate":0,"index":8080},{"krate":0,"index":8081},{"krate":0,"index":8082},{"krate":0,"index":8083},{"krate":0,"index":8084},{"krate":0,"index":8085},{"krate":0,"index":8086},{"krate":0,"index":8087},{"krate":0,"index":8088},{"krate":0,"index":8089},{"krate":0,"index":8090},{"krate":0,"index":8091},{"krate":0,"index":8092},{"krate":0,"index":8093},{"krate":0,"index":8094},{"krate":0,"index":8095},{"krate":0,"index":8096}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11830633,"byte_end":11830638,"line_start":448,"line_end":448,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8108}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625746,"byte_end":625756,"line_start":352,"line_end":352,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2541}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625895,"byte_end":625905,"line_start":358,"line_end":358,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2544}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631156,"byte_end":631160,"line_start":82,"line_end":82,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631248,"byte_end":631252,"line_start":88,"line_end":88,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2556}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":632979,"byte_end":632988,"line_start":142,"line_end":142,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2579}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":633154,"byte_end":633163,"line_start":150,"line_end":150,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2582}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":635149,"byte_end":635160,"line_start":199,"line_end":199,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2587}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/cssa.rs","byte_start":713761,"byte_end":713773,"line_start":61,"line_end":61,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2677},{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/flags.rs","byte_start":720038,"byte_end":720051,"line_start":49,"line_end":49,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2704},{"krate":0,"index":2705}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/liveness.rs","byte_start":726636,"byte_end":726652,"line_start":50,"line_end":50,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/locations.rs","byte_start":735171,"byte_end":735187,"line_start":51,"line_end":51,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2766}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":641809,"byte_end":641822,"line_start":124,"line_end":124,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":642280,"byte_end":642293,"line_start":143,"line_end":143,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2777}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643488,"byte_end":643502,"line_start":180,"line_end":180,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2789},{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644771,"byte_end":644785,"line_start":228,"line_end":228,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644892,"byte_end":644906,"line_start":234,"line_end":234,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2796}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":645009,"byte_end":645023,"line_start":240,"line_end":240,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2798}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":645191,"byte_end":645205,"line_start":250,"line_end":250,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2800}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":646554,"byte_end":646562,"line_start":303,"line_end":303,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2815},{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2827},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2869}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":751472,"byte_end":751483,"line_start":135,"line_end":135,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2905},{"krate":0,"index":2906}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":769857,"byte_end":769870,"line_start":729,"line_end":729,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2930}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":770246,"byte_end":770272,"line_start":744,"line_end":744,"column_start":27,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/abi.rs","byte_start":774712,"byte_end":774721,"line_start":28,"line_end":28,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/abi.rs","byte_start":774826,"byte_end":774835,"line_start":34,"line_end":34,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2952}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/abi.rs","byte_start":775494,"byte_end":775509,"line_start":59,"line_end":59,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2954},{"krate":0,"index":2955}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":782545,"byte_end":782551,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790942,"byte_end":790949,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3046},{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3057},{"krate":0,"index":3058},{"krate":0,"index":3059},{"krate":0,"index":3060},{"krate":0,"index":3061},{"krate":0,"index":3062},{"krate":0,"index":3065},{"krate":0,"index":3066},{"krate":0,"index":3069},{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3072},{"krate":0,"index":3073},{"krate":0,"index":3074}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/fx.rs","byte_start":843963,"byte_end":843971,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/fx.rs","byte_start":844054,"byte_end":844062,"line_start":58,"line_end":58,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3124}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/fx.rs","byte_start":844218,"byte_end":844226,"line_start":65,"line_end":65,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/iterators.rs","byte_start":845588,"byte_end":845589,"line_start":16,"line_end":16,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/iterators.rs","byte_start":845900,"byte_end":845913,"line_start":30,"line_end":30,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3144},{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":991827,"byte_end":991849,"line_start":302,"line_end":302,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3574},{"krate":0,"index":3575}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":994282,"byte_end":994290,"line_start":348,"line_end":348,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3577},{"krate":0,"index":3578},{"krate":0,"index":3579},{"krate":0,"index":3580},{"krate":0,"index":3581},{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3585}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":999481,"byte_end":999503,"line_start":482,"line_end":482,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3588}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1008072,"byte_end":1008094,"line_start":653,"line_end":653,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3602}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1013681,"byte_end":1013703,"line_start":763,"line_end":763,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3605},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1017864,"byte_end":1017886,"line_start":878,"line_end":878,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3617}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coloring.rs","byte_start":1024038,"byte_end":1024046,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":3689}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coloring.rs","byte_start":1025261,"byte_end":1025268,"line_start":156,"line_end":156,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3692},{"krate":0,"index":3693},{"krate":0,"index":3694},{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3699},{"krate":0,"index":3700},{"krate":0,"index":3701},{"krate":0,"index":3705},{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3710},{"krate":0,"index":3711},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715},{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720},{"krate":0,"index":3724},{"krate":0,"index":3727},{"krate":0,"index":3728},{"krate":0,"index":3729}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coloring.rs","byte_start":1074382,"byte_end":1074395,"line_start":1298,"line_end":1298,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3734},{"krate":0,"index":3735},{"krate":0,"index":3736}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/live_value_tracker.rs","byte_start":1077507,"byte_end":1077519,"line_start":68,"line_end":68,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3769},{"krate":0,"index":3770}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/live_value_tracker.rs","byte_start":1079375,"byte_end":1079391,"line_start":126,"line_end":126,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3773},{"krate":0,"index":3774},{"krate":0,"index":3775},{"krate":0,"index":3776},{"krate":0,"index":3777},{"krate":0,"index":3778},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3781},{"krate":0,"index":3782},{"krate":0,"index":3784}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1103171,"byte_end":1103179,"line_start":300,"line_end":300,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3821},{"krate":0,"index":3822},{"krate":0,"index":3823},{"krate":0,"index":3824},{"krate":0,"index":3825},{"krate":0,"index":3827},{"krate":0,"index":3829},{"krate":0,"index":3830},{"krate":0,"index":3831}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1108830,"byte_end":1108838,"line_start":436,"line_end":436,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3834},{"krate":0,"index":3835}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1119105,"byte_end":1119121,"line_start":210,"line_end":210,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3867},{"krate":0,"index":3868},{"krate":0,"index":3871},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3886},{"krate":0,"index":3887},{"krate":0,"index":3888}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1129624,"byte_end":1129640,"line_start":467,"line_end":467,"column_start":50,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3891}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1139769,"byte_end":1139780,"line_start":35,"line_end":35,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3904},{"krate":0,"index":3906},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3914},{"krate":0,"index":3915}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1143361,"byte_end":1143371,"line_start":134,"line_end":134,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1144309,"byte_end":1144319,"line_start":165,"line_end":165,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1145079,"byte_end":1145089,"line_start":190,"line_end":190,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1145287,"byte_end":1145305,"line_start":195,"line_end":195,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3933}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1147437,"byte_end":1147448,"line_start":248,"line_end":248,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3936}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1153523,"byte_end":1153531,"line_start":59,"line_end":59,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3966},{"krate":0,"index":3967},{"krate":0,"index":3968},{"krate":0,"index":3969},{"krate":0,"index":3970},{"krate":0,"index":3971},{"krate":0,"index":3976},{"krate":0,"index":3977},{"krate":0,"index":3979},{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":3985}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1159196,"byte_end":1159204,"line_start":230,"line_end":230,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3987}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1160164,"byte_end":1160171,"line_start":258,"line_end":258,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3996},{"krate":0,"index":3997}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1161473,"byte_end":1161481,"line_start":292,"line_end":292,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3999},{"krate":0,"index":4001},{"krate":0,"index":4002}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170482,"byte_end":1170490,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4016}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170559,"byte_end":1170567,"line_start":37,"line_end":37,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4018},{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":4022},{"krate":0,"index":4023},{"krate":0,"index":4024}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1173312,"byte_end":1173327,"line_start":115,"line_end":115,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4034}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/branch_splitting.rs","byte_start":1174967,"byte_end":1174974,"line_start":46,"line_end":46,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1183691,"byte_end":1183701,"line_start":86,"line_end":86,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4128}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1185688,"byte_end":1185695,"line_start":151,"line_end":151,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1194566,"byte_end":1194573,"line_start":390,"line_end":390,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4139},{"krate":0,"index":4140},{"krate":0,"index":4141},{"krate":0,"index":4142},{"krate":0,"index":4143},{"krate":0,"index":4146},{"krate":0,"index":4147}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1206831,"byte_end":1206835,"line_start":697,"line_end":697,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4153},{"krate":0,"index":4154},{"krate":0,"index":4155}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1207644,"byte_end":1207648,"line_start":730,"line_end":730,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4157}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1207923,"byte_end":1207932,"line_start":740,"line_end":740,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4159},{"krate":0,"index":4160},{"krate":0,"index":4161},{"krate":0,"index":4162}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1213848,"byte_end":1213861,"line_start":882,"line_end":882,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4170},{"krate":0,"index":4172},{"krate":0,"index":4173},{"krate":0,"index":4175},{"krate":0,"index":4177},{"krate":0,"index":4178}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1219648,"byte_end":1219657,"line_start":1038,"line_end":1038,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4187},{"krate":0,"index":4188}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1220427,"byte_end":1220437,"line_start":1066,"line_end":1066,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4201}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1220800,"byte_end":1220810,"line_start":1081,"line_end":1081,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4206},{"krate":0,"index":4207}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1222951,"byte_end":1222958,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230555,"byte_end":1230564,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4268}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231180,"byte_end":1231193,"line_start":59,"line_end":59,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4272},{"krate":0,"index":4273},{"krate":0,"index":4274},{"krate":0,"index":4275},{"krate":0,"index":4276},{"krate":0,"index":4277},{"krate":0,"index":4278},{"krate":0,"index":4279},{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4283},{"krate":0,"index":4284},{"krate":0,"index":4285},{"krate":0,"index":4287},{"krate":0,"index":4288},{"krate":0,"index":4289},{"krate":0,"index":4290}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237407,"byte_end":1237425,"line_start":237,"line_end":237,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4294},{"krate":0,"index":4295}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237689,"byte_end":1237707,"line_start":250,"line_end":250,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4297}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1238090,"byte_end":1238113,"line_start":263,"line_end":263,"column_start":30,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4299}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1238316,"byte_end":1238333,"line_start":272,"line_end":272,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4307}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/pressure.rs","byte_start":1242355,"byte_end":1242360,"line_start":68,"line_end":68,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4319}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/pressure.rs","byte_start":1242793,"byte_end":1242801,"line_start":83,"line_end":83,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4325},{"krate":0,"index":4327},{"krate":0,"index":4328},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4333},{"krate":0,"index":4334}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/pressure.rs","byte_start":1249161,"byte_end":1249169,"line_start":261,"line_end":261,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4336}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/reload.rs","byte_start":1255076,"byte_end":1255082,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4386},{"krate":0,"index":4387},{"krate":0,"index":4388}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/reload.rs","byte_start":1256529,"byte_end":1256542,"line_start":108,"line_end":108,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4397}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/reload.rs","byte_start":1256611,"byte_end":1256618,"line_start":114,"line_end":114,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4400},{"krate":0,"index":4401},{"krate":0,"index":4402},{"krate":0,"index":4403},{"krate":0,"index":4404},{"krate":0,"index":4405},{"krate":0,"index":4406},{"krate":0,"index":4407},{"krate":0,"index":4408},{"krate":0,"index":4409}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1281102,"byte_end":1281110,"line_start":154,"line_end":154,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1282635,"byte_end":1282643,"line_start":206,"line_end":206,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4463}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1283465,"byte_end":1283475,"line_start":239,"line_end":239,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4465}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1283557,"byte_end":1283567,"line_start":245,"line_end":245,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4467}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1284399,"byte_end":1284403,"line_start":283,"line_end":283,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4469},{"krate":0,"index":4470},{"krate":0,"index":4471},{"krate":0,"index":4472},{"krate":0,"index":4473},{"krate":0,"index":4474},{"krate":0,"index":4475}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1286842,"byte_end":1286846,"line_start":362,"line_end":362,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4477}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1287963,"byte_end":1287967,"line_start":408,"line_end":408,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4479}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1291466,"byte_end":1291472,"line_start":489,"line_end":489,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4489},{"krate":0,"index":4490},{"krate":0,"index":4491},{"krate":0,"index":4492},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4497},{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4504},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4508}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1305371,"byte_end":1305377,"line_start":839,"line_end":839,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4517},{"krate":0,"index":4518},{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1310504,"byte_end":1310510,"line_start":977,"line_end":977,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4525},{"krate":0,"index":4526},{"krate":0,"index":4529}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1316916,"byte_end":1316922,"line_start":1129,"line_end":1129,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4531}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1328575,"byte_end":1328583,"line_start":76,"line_end":76,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1329862,"byte_end":1329869,"line_start":122,"line_end":122,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4593},{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":4596},{"krate":0,"index":4597},{"krate":0,"index":4598},{"krate":0,"index":4599},{"krate":0,"index":4600},{"krate":0,"index":4601},{"krate":0,"index":4602},{"krate":0,"index":4606},{"krate":0,"index":4611},{"krate":0,"index":4612},{"krate":0,"index":4614}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1349626,"byte_end":1349632,"line_start":604,"line_end":604,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4616}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1349904,"byte_end":1349910,"line_start":617,"line_end":617,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4618}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/scoped_hash_map.rs","byte_start":1352521,"byte_end":1352534,"line_start":30,"line_end":30,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4649}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/scoped_hash_map.rs","byte_start":1353052,"byte_end":1353063,"line_start":47,"line_end":47,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4661}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/scoped_hash_map.rs","byte_start":1353998,"byte_end":1354011,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4681},{"krate":0,"index":4682},{"krate":0,"index":4684},{"krate":0,"index":4685}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/simple_gvn.rs","byte_start":1360522,"byte_end":1360529,"line_start":41,"line_end":41,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4712}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/simple_gvn.rs","byte_start":1360752,"byte_end":1360759,"line_start":48,"line_end":48,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4717}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/simple_gvn.rs","byte_start":1360966,"byte_end":1360973,"line_start":54,"line_end":54,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/topo_order.rs","byte_start":1410123,"byte_end":1410132,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4818},{"krate":0,"index":4819},{"krate":0,"index":4820},{"krate":0,"index":4822}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424149,"byte_end":1424168,"line_start":246,"line_end":246,"column_start":26,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4864}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424247,"byte_end":1424266,"line_start":252,"line_end":252,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4866},{"krate":0,"index":4867}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424379,"byte_end":1424398,"line_start":259,"line_end":259,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4869}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424515,"byte_end":1424534,"line_start":265,"line_end":265,"column_start":14,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4871}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424654,"byte_end":1424673,"line_start":271,"line_end":271,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4873}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2269,"byte_end":2276,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":19}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2286,"byte_end":2297,"line_start":66,"line_end":66,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":195}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2307,"byte_end":2313,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":224}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2323,"byte_end":2326,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":318}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2336,"byte_end":2350,"line_start":69,"line_end":69,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":330}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2360,"byte_end":2369,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":411}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2379,"byte_end":2381,"line_start":71,"line_end":71,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":452}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119518,"byte_end":119526,"line_start":4,"line_end":4,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":524}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119536,"byte_end":119539,"line_start":5,"line_end":5,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":585}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119549,"byte_end":119557,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":729}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119610,"byte_end":119618,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":879}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119655,"byte_end":119665,"line_start":13,"line_end":13,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1008}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119675,"byte_end":119687,"line_start":14,"line_end":14,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1134}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119697,"byte_end":119706,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1262}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119716,"byte_end":119722,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1285}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119789,"byte_end":119798,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1483}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/mod.rs","byte_start":119833,"byte_end":119838,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1565}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2391,"byte_end":2394,"line_start":72,"line_end":72,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1737}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":425699,"byte_end":425708,"line_start":87,"line_end":87,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2264}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2404,"byte_end":2417,"line_start":73,"line_end":73,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":2397}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2427,"byte_end":2439,"line_start":74,"line_end":74,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":2436}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2449,"byte_end":2457,"line_start":75,"line_end":75,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2480}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2467,"byte_end":2473,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2545}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2483,"byte_end":2491,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2594}},{"kind":"Mod","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/lib.rs","byte_start":2501,"byte_end":2506,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2870}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":12358,"byte_end":12372,"line_start":46,"line_end":46,"column_start":10,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":38},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":14166,"byte_end":14180,"line_start":99,"line_end":99,"column_start":10,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":38},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":14501,"byte_end":14515,"line_start":109,"line_end":109,"column_start":23,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":38},"to":{"krate":0,"index":176}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":16477,"byte_end":16490,"line_start":179,"line_end":179,"column_start":20,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":76},"to":{"krate":0,"index":49}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":16958,"byte_end":16970,"line_start":190,"line_end":190,"column_start":19,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":82},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/memorysink.rs","byte_start":17386,"byte_end":17402,"line_start":203,"line_end":203,"column_start":23,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":87},"to":{"krate":0,"index":85}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/stackmap.rs","byte_start":35966,"byte_end":35974,"line_start":15,"line_end":15,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":4840,"byte_end":4845,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4884},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/binemit/mod.rs","byte_start":6326,"byte_end":6334,"line_start":98,"line_end":98,"column_start":6,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":4916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":40202,"byte_end":40212,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cfg_printer.rs","byte_start":42079,"byte_end":42089,"line_start":75,"line_end":75,"column_start":22,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":210},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":62515,"byte_end":62525,"line_start":581,"line_end":581,"column_start":10,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":63168,"byte_end":63178,"line_start":602,"line_end":602,"column_start":21,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":266},"to":{"krate":0,"index":227}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":65757,"byte_end":65766,"line_start":686,"line_end":686,"column_start":10,"column_end":19},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/cursor.rs","byte_start":67175,"byte_end":67184,"line_start":728,"line_end":728,"column_start":21,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":290},"to":{"krate":0,"index":227}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dbg.rs","byte_start":70138,"byte_end":70149,"line_start":12,"line_end":12,"column_start":30,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":72337,"byte_end":72350,"line_start":53,"line_end":53,"column_start":6,"column_end":19},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":78353,"byte_end":78366,"line_start":215,"line_end":215,"column_start":6,"column_end":19},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":88519,"byte_end":88532,"line_start":451,"line_end":451,"column_start":6,"column_end":19},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":92367,"byte_end":92388,"line_start":541,"line_end":541,"column_start":6,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":94748,"byte_end":94757,"line_start":605,"line_end":605,"column_start":23,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/dominator_tree.rs","byte_start":95035,"byte_end":95056,"line_start":618,"line_end":618,"column_start":6,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":108446,"byte_end":108456,"line_start":42,"line_end":42,"column_start":6,"column_end":16},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":4965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":110037,"byte_end":110053,"line_start":81,"line_end":81,"column_start":6,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/flowgraph.rs","byte_start":114418,"byte_end":114426,"line_start":201,"line_end":201,"column_start":23,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":441},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":123706,"byte_end":123711,"line_start":20,"line_end":20,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":465}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/inst_builder.rs","byte_start":10521038,"byte_end":10521053,"line_start":14,"line_end":14,"column_start":28,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":4984}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":124830,"byte_end":124831,"line_start":42,"line_end":42,"column_start":54,"column_end":55},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":472},"to":{"krate":0,"index":4984}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":125284,"byte_end":125289,"line_start":51,"line_end":51,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":473}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":126136,"byte_end":126149,"line_start":74,"line_end":74,"column_start":37,"column_end":50},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":127797,"byte_end":127810,"line_start":116,"line_end":116,"column_start":61,"column_end":74},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":479},"to":{"krate":0,"index":465}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":128733,"byte_end":128751,"line_start":147,"line_end":147,"column_start":46,"column_end":64},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":498},"to":{"krate":0,"index":465}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":130124,"byte_end":130138,"line_start":186,"line_end":186,"column_start":10,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/builder.rs","byte_start":130341,"byte_end":130355,"line_start":193,"line_end":193,"column_start":34,"column_end":48},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":512},"to":{"krate":0,"index":465}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":133886,"byte_end":133898,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":5357},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134057,"byte_end":134069,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":5357},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134152,"byte_end":134164,"line_start":43,"line_end":43,"column_start":22,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":5357},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134256,"byte_end":134268,"line_start":49,"line_end":49,"column_start":24,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5357},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":134344,"byte_end":134356,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":5357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":135356,"byte_end":135368,"line_start":92,"line_end":92,"column_start":23,"column_end":35},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":5357},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":136280,"byte_end":136292,"line_start":117,"line_end":117,"column_start":18,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":5357},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":138598,"byte_end":138615,"line_start":175,"line_end":175,"column_start":6,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":5376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/constant.rs","byte_start":139586,"byte_end":139598,"line_start":204,"line_end":204,"column_start":6,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":152458,"byte_end":152471,"line_start":81,"line_end":81,"column_start":6,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":5386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":155868,"byte_end":155874,"line_start":202,"line_end":202,"column_start":23,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":635},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":156167,"byte_end":156180,"line_start":216,"line_end":216,"column_start":6,"column_end":19},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":5386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":162003,"byte_end":162011,"line_start":382,"line_end":382,"column_start":6,"column_end":14},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":163512,"byte_end":163525,"line_start":432,"line_end":432,"column_start":6,"column_end":19},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":175886,"byte_end":175899,"line_start":747,"line_end":747,"column_start":22,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5386},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176106,"byte_end":176119,"line_start":756,"line_end":756,"column_start":25,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5386},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":176259,"byte_end":176272,"line_start":763,"line_end":763,"column_start":6,"column_end":19},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":182194,"byte_end":182201,"line_start":918,"line_end":918,"column_start":6,"column_end":13},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":182450,"byte_end":182461,"line_start":929,"line_end":929,"column_start":27,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/dfg.rs","byte_start":183193,"byte_end":183206,"line_start":954,"line_end":954,"column_start":6,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":197234,"byte_end":197237,"line_start":38,"line_end":38,"column_start":6,"column_end":9},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":198328,"byte_end":198333,"line_start":68,"line_end":68,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":200191,"byte_end":200200,"line_start":115,"line_end":115,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":201658,"byte_end":201669,"line_start":149,"line_end":149,"column_start":6,"column_end":17},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":202313,"byte_end":202321,"line_start":171,"line_end":171,"column_start":6,"column_end":14},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5605},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":203052,"byte_end":203061,"line_start":194,"line_end":194,"column_start":6,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":5641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":204148,"byte_end":204157,"line_start":222,"line_end":222,"column_start":6,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":5669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":205638,"byte_end":205645,"line_start":255,"line_end":255,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":5697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":206884,"byte_end":206890,"line_start":284,"line_end":284,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":5725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":207650,"byte_end":207654,"line_start":307,"line_end":307,"column_start":6,"column_end":10},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":5753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":208587,"byte_end":208592,"line_start":331,"line_end":331,"column_start":6,"column_end":11},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":209538,"byte_end":209547,"line_start":371,"line_end":371,"column_start":23,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210136,"byte_end":210145,"line_start":389,"line_end":389,"column_start":21,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210278,"byte_end":210287,"line_start":395,"line_end":395,"column_start":20,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210370,"byte_end":210379,"line_start":401,"line_end":401,"column_start":21,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210465,"byte_end":210474,"line_start":407,"line_end":407,"column_start":22,"column_end":31},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210566,"byte_end":210575,"line_start":413,"line_end":413,"column_start":26,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210677,"byte_end":210686,"line_start":419,"line_end":419,"column_start":28,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210790,"byte_end":210799,"line_start":425,"line_end":425,"column_start":26,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210897,"byte_end":210906,"line_start":431,"line_end":431,"column_start":24,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":210999,"byte_end":211008,"line_start":437,"line_end":437,"column_start":23,"column_end":32},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":211097,"byte_end":211106,"line_start":443,"line_end":443,"column_start":21,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/entities.rs","byte_start":211192,"byte_end":211201,"line_start":449,"line_end":449,"column_start":22,"column_end":31},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":5809},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":213254,"byte_end":213263,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":5855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":216323,"byte_end":216339,"line_start":123,"line_end":123,"column_start":27,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":811},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":216712,"byte_end":216721,"line_start":136,"line_end":136,"column_start":23,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":5855},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":217486,"byte_end":217494,"line_start":160,"line_end":160,"column_start":6,"column_end":14},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":5873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":219391,"byte_end":219406,"line_start":218,"line_end":218,"column_start":27,"column_end":42},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":831},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":220001,"byte_end":220009,"line_start":238,"line_end":238,"column_start":23,"column_end":31},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":5873},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":223387,"byte_end":223402,"line_start":334,"line_end":334,"column_start":23,"column_end":38},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5914},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":223541,"byte_end":223556,"line_start":340,"line_end":340,"column_start":18,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5914},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extfunc.rs","byte_start":224663,"byte_end":224674,"line_start":372,"line_end":372,"column_start":23,"column_end":34},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5945},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":228849,"byte_end":228861,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":5953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":230069,"byte_end":230081,"line_start":85,"line_end":85,"column_start":18,"column_end":30},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":5953},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":230167,"byte_end":230179,"line_start":91,"line_end":91,"column_start":23,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":5953},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/extname.rs","byte_start":230696,"byte_end":230708,"line_start":107,"line_end":107,"column_start":18,"column_end":30},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":5953},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/framelayout.rs","byte_start":233968,"byte_end":233979,"line_start":56,"line_end":56,"column_start":6,"column_end":17},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":6004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":238065,"byte_end":238073,"line_start":104,"line_end":104,"column_start":6,"column_end":14},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":6011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":245984,"byte_end":246010,"line_start":312,"line_end":312,"column_start":46,"column_end":72},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":6032},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246385,"byte_end":246400,"line_start":324,"line_end":324,"column_start":27,"column_end":42},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246544,"byte_end":246552,"line_start":330,"line_end":330,"column_start":23,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":6011},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":246719,"byte_end":246727,"line_start":336,"line_end":336,"column_start":21,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":6011},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/function.rs","byte_start":247173,"byte_end":247187,"line_start":352,"line_end":352,"column_start":23,"column_end":37},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":972},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":250018,"byte_end":250033,"line_start":69,"line_end":69,"column_start":6,"column_end":21},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/globalvalue.rs","byte_start":250646,"byte_end":250661,"line_start":87,"line_end":87,"column_start":23,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":6039},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/heap.rs","byte_start":253204,"byte_end":253212,"line_start":44,"line_end":44,"column_start":23,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":6057},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":254868,"byte_end":254871,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"kind":{"Impl":{"id":100}},"from":{"krate":4,"index":3846},"to":{"krate":0,"index":1018}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255193,"byte_end":255198,"line_start":50,"line_end":50,"column_start":6,"column_end":11},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":6072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255455,"byte_end":255460,"line_start":62,"line_end":62,"column_start":20,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":6072},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255533,"byte_end":255538,"line_start":68,"line_end":68,"column_start":20,"column_end":25},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":6072},"to":{"krate":0,"index":1018}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255644,"byte_end":255649,"line_start":74,"line_end":74,"column_start":20,"column_end":25},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":6072},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":255724,"byte_end":255729,"line_start":80,"line_end":80,"column_start":18,"column_end":23},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":6072},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":256594,"byte_end":256599,"line_start":114,"line_end":114,"column_start":18,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":6072},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257060,"byte_end":257066,"line_start":130,"line_end":130,"column_start":6,"column_end":12},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":6090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257326,"byte_end":257332,"line_start":142,"line_end":142,"column_start":20,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":6090},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257405,"byte_end":257411,"line_start":148,"line_end":148,"column_start":20,"column_end":26},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":6090},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":257891,"byte_end":257897,"line_start":170,"line_end":170,"column_start":18,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":6090},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260121,"byte_end":260127,"line_start":241,"line_end":241,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":6090},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260658,"byte_end":260664,"line_start":261,"line_end":261,"column_start":20,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":6108},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260737,"byte_end":260743,"line_start":267,"line_end":267,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":6108},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260827,"byte_end":260833,"line_start":273,"line_end":273,"column_start":20,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":6108},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":260908,"byte_end":260914,"line_start":279,"line_end":279,"column_start":18,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":6108},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261133,"byte_end":261139,"line_start":289,"line_end":289,"column_start":18,"column_end":24},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":6108},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":261707,"byte_end":261714,"line_start":310,"line_end":310,"column_start":6,"column_end":13},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":6126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262094,"byte_end":262101,"line_start":327,"line_end":327,"column_start":22,"column_end":29},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":6126},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":262558,"byte_end":262566,"line_start":343,"line_end":343,"column_start":6,"column_end":14},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":6147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263267,"byte_end":263275,"line_start":370,"line_end":370,"column_start":20,"column_end":28},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":6147},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263348,"byte_end":263356,"line_start":376,"line_end":376,"column_start":20,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":6147},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263440,"byte_end":263448,"line_start":382,"line_end":382,"column_start":20,"column_end":28},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":6147},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263523,"byte_end":263531,"line_start":388,"line_end":388,"column_start":18,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":6147},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":263982,"byte_end":263990,"line_start":407,"line_end":407,"column_start":18,"column_end":26},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":6147},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":272762,"byte_end":272768,"line_start":676,"line_end":676,"column_start":6,"column_end":12},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":6165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274041,"byte_end":274047,"line_start":719,"line_end":719,"column_start":18,"column_end":24},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":6165},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274210,"byte_end":274216,"line_start":726,"line_end":726,"column_start":18,"column_end":24},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":6165},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274453,"byte_end":274459,"line_start":737,"line_end":737,"column_start":20,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":6165},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274548,"byte_end":274554,"line_start":743,"line_end":743,"column_start":20,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":6165},"to":{"krate":0,"index":1018}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":274646,"byte_end":274652,"line_start":749,"line_end":749,"column_start":6,"column_end":12},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":6183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":275926,"byte_end":275932,"line_start":792,"line_end":792,"column_start":18,"column_end":24},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":6183},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276085,"byte_end":276091,"line_start":799,"line_end":799,"column_start":18,"column_end":24},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":6183},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276322,"byte_end":276328,"line_start":810,"line_end":810,"column_start":20,"column_end":26},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6183},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276417,"byte_end":276423,"line_start":816,"line_end":816,"column_start":20,"column_end":26},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":6183},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/immediates.rs","byte_start":276528,"byte_end":276534,"line_start":822,"line_end":822,"column_start":20,"column_end":26},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":6183},"to":{"krate":0,"index":1018}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10711179,"byte_end":10711196,"line_start":110,"line_end":110,"column_start":40,"column_end":57},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":6239},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10721579,"byte_end":10721594,"line_start":524,"line_end":524,"column_start":6,"column_end":21},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":6351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/opcodes.rs","byte_start":10784562,"byte_end":10784568,"line_start":2008,"line_end":2008,"column_start":6,"column_end":12},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":297827,"byte_end":297833,"line_start":47,"line_end":47,"column_start":18,"column_end":24},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":6567},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":297948,"byte_end":297954,"line_start":53,"line_end":53,"column_start":6,"column_end":12},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":6567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":298655,"byte_end":298661,"line_start":70,"line_end":70,"column_start":18,"column_end":24},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":6567},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":299631,"byte_end":299643,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":7015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300338,"byte_end":300350,"line_start":127,"line_end":127,"column_start":16,"column_end":28},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":7015},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300458,"byte_end":300470,"line_start":135,"line_end":135,"column_start":19,"column_end":31},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":7015},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300565,"byte_end":300577,"line_start":141,"line_end":141,"column_start":18,"column_end":30},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":7015},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":300882,"byte_end":300894,"line_start":154,"line_end":154,"column_start":18,"column_end":30},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":7015},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":301102,"byte_end":301117,"line_start":164,"line_end":164,"column_start":6,"column_end":21},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":307614,"byte_end":307631,"line_start":342,"line_end":342,"column_start":6,"column_end":23},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":7022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":311786,"byte_end":311798,"line_start":450,"line_end":450,"column_start":6,"column_end":18},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":7029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/instructions.rs","byte_start":313925,"byte_end":313942,"line_start":523,"line_end":523,"column_start":6,"column_end":23},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":321812,"byte_end":321825,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":7066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/jumptable.rs","byte_start":323073,"byte_end":323086,"line_start":69,"line_end":69,"column_start":18,"column_end":31},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":7066},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":325882,"byte_end":325888,"line_start":45,"line_end":45,"column_start":6,"column_end":12},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":7070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":328171,"byte_end":328177,"line_start":118,"line_end":118,"column_start":23,"column_end":29},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":7070},"to":{"krate":0,"index":1468}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":328664,"byte_end":328670,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":7070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":336329,"byte_end":336335,"line_start":338,"line_end":338,"column_start":6,"column_end":12},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":7070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":340789,"byte_end":340793,"line_start":484,"line_end":484,"column_start":23,"column_end":27},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1337},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":341434,"byte_end":341440,"line_start":512,"line_end":512,"column_start":6,"column_end":12},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":7070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":347922,"byte_end":347927,"line_start":715,"line_end":715,"column_start":23,"column_end":28},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/layout.rs","byte_start":348336,"byte_end":348341,"line_start":732,"line_end":732,"column_start":34,"column_end":39},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1363},"to":{"krate":1,"index":3910}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365111,"byte_end":365118,"line_start":51,"line_end":51,"column_start":23,"column_end":30},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":7100},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365239,"byte_end":365246,"line_start":57,"line_end":57,"column_start":18,"column_end":25},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":7100},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/libcall.rs","byte_start":365941,"byte_end":365948,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":7100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":370980,"byte_end":370988,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":7139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/memflags.rs","byte_start":373627,"byte_end":373635,"line_start":108,"line_end":108,"column_start":23,"column_end":31},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":7139},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374372,"byte_end":374384,"line_start":19,"line_end":19,"column_start":21,"column_end":33},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7156},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374566,"byte_end":374578,"line_start":27,"line_end":27,"column_start":20,"column_end":32},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7156},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":374766,"byte_end":374778,"line_start":35,"line_end":35,"column_start":25,"column_end":37},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":7156},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375238,"byte_end":375258,"line_start":54,"line_end":54,"column_start":6,"column_end":26},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":7169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375499,"byte_end":375519,"line_start":64,"line_end":64,"column_start":21,"column_end":41},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":7169},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375609,"byte_end":375629,"line_start":70,"line_end":70,"column_start":20,"column_end":40},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":7169},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375720,"byte_end":375740,"line_start":76,"line_end":76,"column_start":25,"column_end":45},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":7169},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":375952,"byte_end":375972,"line_start":85,"line_end":85,"column_start":29,"column_end":49},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":7169},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376196,"byte_end":376216,"line_start":95,"line_end":95,"column_start":23,"column_end":43},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7169},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376438,"byte_end":376450,"line_start":104,"line_end":104,"column_start":23,"column_end":35},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":7156},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376616,"byte_end":376636,"line_start":111,"line_end":111,"column_start":21,"column_end":41},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":7169},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/progpoint.rs","byte_start":376779,"byte_end":376791,"line_start":117,"line_end":117,"column_start":21,"column_end":33},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":7156},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379135,"byte_end":379144,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":7186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379511,"byte_end":379520,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":7186},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/sourceloc.rs","byte_start":379598,"byte_end":379607,"line_start":44,"line_end":44,"column_start":23,"column_end":32},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":7186},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":383192,"byte_end":383205,"line_start":83,"line_end":83,"column_start":18,"column_end":31},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":7201},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":383682,"byte_end":383695,"line_start":100,"line_end":100,"column_start":23,"column_end":36},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":7201},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":384867,"byte_end":384880,"line_start":134,"line_end":134,"column_start":6,"column_end":19},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":7225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":385603,"byte_end":385616,"line_start":155,"line_end":155,"column_start":23,"column_end":36},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":7225},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":386764,"byte_end":386774,"line_start":191,"line_end":191,"column_start":6,"column_end":16},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":7240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388694,"byte_end":388704,"line_start":256,"line_end":256,"column_start":27,"column_end":37},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7240},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":388858,"byte_end":388868,"line_start":264,"line_end":264,"column_start":30,"column_end":40},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7240},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/stackslot.rs","byte_start":389033,"byte_end":389043,"line_start":271,"line_end":271,"column_start":6,"column_end":16},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":7240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/table.rs","byte_start":395751,"byte_end":395760,"line_start":27,"line_end":27,"column_start":23,"column_end":32},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":7256},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":397760,"byte_end":397768,"line_start":59,"line_end":59,"column_start":18,"column_end":26},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":7264},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/trapcode.rs","byte_start":398500,"byte_end":398508,"line_start":80,"line_end":80,"column_start":18,"column_end":26},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":7264},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":401712,"byte_end":401716,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":409914,"byte_end":409918,"line_start":306,"line_end":306,"column_start":18,"column_end":22},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7305},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":410695,"byte_end":410699,"line_start":329,"line_end":329,"column_start":16,"column_end":20},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":7305},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/types.rs","byte_start":411524,"byte_end":411528,"line_start":352,"line_end":352,"column_start":18,"column_end":22},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":7305},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418130,"byte_end":418138,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":7379},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":418207,"byte_end":418215,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":7379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":419476,"byte_end":419491,"line_start":69,"line_end":69,"column_start":27,"column_end":42},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1627},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421240,"byte_end":421251,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":7400},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":421320,"byte_end":421331,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":7400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/ir/valueloc.rs","byte_start":422490,"byte_end":422508,"line_start":154,"line_end":154,"column_start":27,"column_end":45},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1644},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/abi.rs","byte_start":444852,"byte_end":444856,"line_start":77,"line_end":77,"column_start":6,"column_end":10},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":7470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/abi.rs","byte_start":445638,"byte_end":445642,"line_start":108,"line_end":108,"column_start":22,"column_end":26},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":7470},"to":{"krate":0,"index":2956}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/registers-x86.rs","byte_start":11747956,"byte_end":11747958,"line_start":164,"line_end":164,"column_start":24,"column_end":26},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7606},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings-x86.rs","byte_start":11748111,"byte_end":11748116,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":7749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings-x86.rs","byte_start":11750038,"byte_end":11750043,"line_start":71,"line_end":71,"column_start":6,"column_end":11},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":7749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings-x86.rs","byte_start":11756921,"byte_end":11756926,"line_start":330,"line_end":330,"column_start":23,"column_end":28},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":7749},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/unwind.rs","byte_start":536307,"byte_end":536317,"line_start":38,"line_end":38,"column_start":6,"column_end":16},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":7754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/unwind.rs","byte_start":538595,"byte_end":538605,"line_start":106,"line_end":106,"column_start":6,"column_end":16},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":7773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/mod.rs","byte_start":439093,"byte_end":439096,"line_start":62,"line_end":62,"column_start":20,"column_end":23},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2099},"to":{"krate":0,"index":2367}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/x86/mod.rs","byte_start":441849,"byte_end":441852,"line_start":165,"line_end":165,"column_start":23,"column_end":26},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2099},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":553847,"byte_end":553855,"line_start":26,"line_end":26,"column_start":6,"column_end":14},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":7788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":555597,"byte_end":555605,"line_start":69,"line_end":69,"column_start":23,"column_end":31},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":7788},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/call_conv.rs","byte_start":556074,"byte_end":556082,"line_start":83,"line_end":83,"column_start":23,"column_end":31},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":7788},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":557547,"byte_end":557564,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":7817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":561338,"byte_end":561355,"line_start":123,"line_end":123,"column_start":6,"column_end":23},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":7852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/constraints.rs","byte_start":563327,"byte_end":563338,"line_start":173,"line_end":173,"column_start":6,"column_end":17},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":7865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":566434,"byte_end":566445,"line_start":52,"line_end":52,"column_start":30,"column_end":41},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":570916,"byte_end":570925,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/enc_tables.rs","byte_start":572845,"byte_end":572854,"line_start":247,"line_end":247,"column_start":23,"column_end":32},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2206},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575048,"byte_end":575056,"line_start":21,"line_end":21,"column_start":6,"column_end":14},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":7873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575629,"byte_end":575637,"line_start":44,"line_end":44,"column_start":18,"column_end":26},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":7873},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":575776,"byte_end":575784,"line_start":51,"line_end":51,"column_start":23,"column_end":31},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":7873},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":576263,"byte_end":576278,"line_start":68,"line_end":68,"column_start":23,"column_end":38},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2246},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/encoding.rs","byte_start":578029,"byte_end":578036,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":7888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":581637,"byte_end":581644,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2271},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":584811,"byte_end":584823,"line_start":156,"line_end":156,"column_start":6,"column_end":18},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2287},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":586921,"byte_end":586933,"line_start":212,"line_end":212,"column_start":23,"column_end":35},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2287},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587055,"byte_end":587067,"line_start":218,"line_end":218,"column_start":21,"column_end":33},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2287},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587264,"byte_end":587276,"line_start":225,"line_end":225,"column_start":20,"column_end":32},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2287},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587666,"byte_end":587679,"line_start":238,"line_end":238,"column_start":20,"column_end":33},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":7894},"to":{"krate":16,"index":6}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587837,"byte_end":587850,"line_start":248,"line_end":248,"column_start":25,"column_end":38},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":7894},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":587943,"byte_end":587956,"line_start":254,"line_end":254,"column_start":23,"column_end":36},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":7894},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":589035,"byte_end":589042,"line_start":284,"line_end":284,"column_start":6,"column_end":13},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":7909},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/registers.rs","byte_start":590339,"byte_end":590353,"line_start":324,"line_end":324,"column_start":27,"column_end":41},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2331},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":592081,"byte_end":592089,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":7914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/stack.rs","byte_start":594398,"byte_end":594411,"line_start":89,"line_end":89,"column_start":6,"column_end":19},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":7943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":427755,"byte_end":427762,"line_start":146,"line_end":146,"column_start":6,"column_end":13},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428102,"byte_end":428109,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2353},"to":{"krate":0,"index":2492}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":428982,"byte_end":429002,"line_start":182,"line_end":182,"column_start":6,"column_end":26},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":7977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429631,"byte_end":429638,"line_start":201,"line_end":201,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":7641},"to":{"krate":0,"index":2367}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/isa/mod.rs","byte_start":429641,"byte_end":429645,"line_start":201,"line_end":201,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1545},"to":{"krate":0,"index":2367}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":595581,"byte_end":595589,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":595889,"byte_end":595901,"line_start":45,"line_end":45,"column_start":6,"column_end":18},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/loop_analysis.rs","byte_start":597669,"byte_end":597681,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/print_errors.rs","byte_start":609337,"byte_end":609356,"line_start":49,"line_end":49,"column_start":25,"column_end":44},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2464},"to":{"krate":0,"index":2895}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":615739,"byte_end":615746,"line_start":54,"line_end":54,"column_start":6,"column_end":13},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":8011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":618153,"byte_end":618160,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":8011},"to":{"krate":0,"index":2492}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":620401,"byte_end":620414,"line_start":194,"line_end":194,"column_start":10,"column_end":23},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":8040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":621596,"byte_end":621604,"line_start":232,"line_end":232,"column_start":10,"column_end":18},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":622977,"byte_end":622985,"line_start":266,"line_end":266,"column_start":48,"column_end":56},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2519},"to":{"krate":0,"index":2981}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":624669,"byte_end":624675,"line_start":322,"line_end":322,"column_start":10,"column_end":16},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":8049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11816879,"byte_end":11816884,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":8109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817445,"byte_end":11817453,"line_start":27,"line_end":27,"column_start":23,"column_end":31},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":8114},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11817712,"byte_end":11817720,"line_start":36,"line_end":36,"column_start":23,"column_end":31},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":8114},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818451,"byte_end":11818466,"line_start":67,"line_end":67,"column_start":23,"column_end":38},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":8135},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11818981,"byte_end":11818996,"line_start":81,"line_end":81,"column_start":23,"column_end":38},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":8135},"to":{"krate":1,"index":6808}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11819596,"byte_end":11819601,"line_start":99,"line_end":99,"column_start":6,"column_end":11},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":8109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/build/cranelift-codegen-a9acda8a8aa6c6f6/out/settings.rs","byte_start":11830633,"byte_end":11830638,"line_start":448,"line_end":448,"column_start":23,"column_end":28},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":8109},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625746,"byte_end":625756,"line_start":352,"line_end":352,"column_start":30,"column_end":40},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":8166},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/settings.rs","byte_start":625895,"byte_end":625905,"line_start":358,"line_end":358,"column_start":38,"column_end":48},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":8166},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631156,"byte_end":631160,"line_start":82,"line_end":82,"column_start":6,"column_end":10},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":8210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":631248,"byte_end":631252,"line_start":88,"line_end":88,"column_start":23,"column_end":27},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":8210},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":632979,"byte_end":632988,"line_start":142,"line_end":142,"column_start":22,"column_end":31},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":2575},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":633154,"byte_end":633163,"line_start":150,"line_end":150,"column_start":27,"column_end":36},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":2575},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/timing.rs","byte_start":635149,"byte_end":635160,"line_start":199,"line_end":199,"column_start":19,"column_end":30},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2571},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/cssa.rs","byte_start":713761,"byte_end":713773,"line_start":61,"line_end":61,"column_start":10,"column_end":22},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/flags.rs","byte_start":720038,"byte_end":720051,"line_start":49,"line_end":49,"column_start":10,"column_end":23},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/liveness.rs","byte_start":726636,"byte_end":726652,"line_start":50,"line_end":50,"column_start":10,"column_end":26},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/locations.rs","byte_start":735171,"byte_end":735187,"line_start":51,"line_end":51,"column_start":10,"column_end":26},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":641809,"byte_end":641822,"line_start":124,"line_end":124,"column_start":35,"column_end":48},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":8304},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":642280,"byte_end":642293,"line_start":143,"line_end":143,"column_start":29,"column_end":42},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":8304},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":643488,"byte_end":643502,"line_start":180,"line_end":180,"column_start":6,"column_end":20},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":8322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644771,"byte_end":644785,"line_start":228,"line_end":228,"column_start":35,"column_end":49},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":8322},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":644892,"byte_end":644906,"line_start":234,"line_end":234,"column_start":35,"column_end":49},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":8322},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":645009,"byte_end":645023,"line_start":240,"line_end":240,"column_start":35,"column_end":49},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":8322},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":645191,"byte_end":645205,"line_start":250,"line_end":250,"column_start":18,"column_end":32},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":8322},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/verifier/mod.rs","byte_start":646554,"byte_end":646562,"line_start":303,"line_end":303,"column_start":10,"column_end":18},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":751472,"byte_end":751483,"line_start":135,"line_end":135,"column_start":21,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2902},"to":{"krate":0,"index":2895}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":769857,"byte_end":769870,"line_start":729,"line_end":729,"column_start":27,"column_end":40},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2924},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/write.rs","byte_start":770246,"byte_end":770272,"line_start":744,"line_end":744,"column_start":27,"column_end":53},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":2931},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/abi.rs","byte_start":774712,"byte_end":774721,"line_start":28,"line_end":28,"column_start":28,"column_end":37},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":8339},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/abi.rs","byte_start":774826,"byte_end":774835,"line_start":34,"line_end":34,"column_start":32,"column_end":41},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":8339},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/abi.rs","byte_start":775494,"byte_end":775509,"line_start":59,"line_end":59,"column_start":6,"column_end":21},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":8351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/bitset.rs","byte_start":782545,"byte_end":782551,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":8376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/context.rs","byte_start":790942,"byte_end":790949,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":3028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/fx.rs","byte_start":843963,"byte_end":843971,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":3118},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/fx.rs","byte_start":844054,"byte_end":844062,"line_start":58,"line_end":58,"column_start":6,"column_end":14},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":3118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/fx.rs","byte_start":844218,"byte_end":844226,"line_start":65,"line_end":65,"column_start":17,"column_end":25},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":3118},"to":{"krate":1,"index":7286}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/iterators.rs","byte_start":845260,"byte_end":845268,"line_start":4,"line_end":4,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3653},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/iterators.rs","byte_start":845588,"byte_end":845589,"line_start":16,"line_end":16,"column_start":28,"column_end":29},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":3137},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/iterators.rs","byte_start":845900,"byte_end":845913,"line_start":30,"line_end":30,"column_start":22,"column_end":35},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":3138},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":991827,"byte_end":991849,"line_start":302,"line_end":302,"column_start":6,"column_end":28},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":994282,"byte_end":994290,"line_start":348,"line_end":348,"column_start":6,"column_end":14},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":8485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":999481,"byte_end":999503,"line_start":482,"line_end":482,"column_start":6,"column_end":28},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1008072,"byte_end":1008094,"line_start":653,"line_end":653,"column_start":6,"column_end":28},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1013681,"byte_end":1013703,"line_start":763,"line_end":763,"column_start":6,"column_end":28},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/redundant_reload_remover.rs","byte_start":1017864,"byte_end":1017886,"line_start":878,"line_end":878,"column_start":6,"column_end":28},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coloring.rs","byte_start":1024038,"byte_end":1024046,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coloring.rs","byte_start":1025261,"byte_end":1025268,"line_start":156,"line_end":156,"column_start":10,"column_end":17},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":3674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coloring.rs","byte_start":1074382,"byte_end":1074395,"line_start":1298,"line_end":1298,"column_start":6,"column_end":19},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":3730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/live_value_tracker.rs","byte_start":1077507,"byte_end":1077519,"line_start":68,"line_end":68,"column_start":6,"column_end":18},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":3760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/live_value_tracker.rs","byte_start":1079375,"byte_end":1079391,"line_start":126,"line_end":126,"column_start":6,"column_end":22},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":3756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1103171,"byte_end":1103179,"line_start":300,"line_end":300,"column_start":6,"column_end":14},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liveness.rs","byte_start":1108830,"byte_end":1108838,"line_start":436,"line_end":436,"column_start":23,"column_end":31},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":3817},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1119105,"byte_end":1119121,"line_start":210,"line_end":210,"column_start":24,"column_end":40},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/liverange.rs","byte_start":1129624,"byte_end":1129640,"line_start":467,"line_end":467,"column_start":50,"column_end":66},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3855},"to":{"krate":16,"index":364}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1139769,"byte_end":1139780,"line_start":35,"line_end":35,"column_start":6,"column_end":17},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":8497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1143361,"byte_end":1143371,"line_start":134,"line_end":134,"column_start":19,"column_end":29},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":8501},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1144309,"byte_end":1144319,"line_start":165,"line_end":165,"column_start":6,"column_end":16},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":8501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1145079,"byte_end":1145089,"line_start":190,"line_end":190,"column_start":28,"column_end":38},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":8501},"to":{"krate":1,"index":3939}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1145287,"byte_end":1145305,"line_start":195,"line_end":195,"column_start":27,"column_end":45},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":3926},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/register_set.rs","byte_start":1147437,"byte_end":1147448,"line_start":248,"line_end":248,"column_start":23,"column_end":34},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":8497},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1153523,"byte_end":1153531,"line_start":59,"line_end":59,"column_start":6,"column_end":14},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":3958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1159196,"byte_end":1159204,"line_start":230,"line_end":230,"column_start":23,"column_end":31},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":3958},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1160164,"byte_end":1160171,"line_start":258,"line_end":258,"column_start":6,"column_end":13},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":3988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/virtregs.rs","byte_start":1161473,"byte_end":1161481,"line_start":292,"line_end":292,"column_start":6,"column_end":14},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":3958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170482,"byte_end":1170490,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":8544},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1170559,"byte_end":1170567,"line_start":37,"line_end":37,"column_start":6,"column_end":14},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/affinity.rs","byte_start":1173312,"byte_end":1173327,"line_start":115,"line_end":115,"column_start":27,"column_end":42},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":4027},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/branch_splitting.rs","byte_start":1174967,"byte_end":1174974,"line_start":46,"line_end":46,"column_start":10,"column_end":17},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":4053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1183691,"byte_end":1183701,"line_start":86,"line_end":86,"column_start":6,"column_end":16},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":4103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1185688,"byte_end":1185695,"line_start":151,"line_end":151,"column_start":10,"column_end":17},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1194566,"byte_end":1194573,"line_start":390,"line_end":390,"column_start":10,"column_end":17},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1206831,"byte_end":1206835,"line_start":697,"line_end":697,"column_start":6,"column_end":10},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":8557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1207644,"byte_end":1207648,"line_start":730,"line_end":730,"column_start":23,"column_end":27},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8557},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1207923,"byte_end":1207932,"line_start":740,"line_end":740,"column_start":6,"column_end":15},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":4150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1213848,"byte_end":1213861,"line_start":882,"line_end":882,"column_start":6,"column_end":19},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":4163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1219648,"byte_end":1219657,"line_start":1038,"line_end":1038,"column_start":23,"column_end":32},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":4180},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1220427,"byte_end":1220437,"line_start":1066,"line_end":1066,"column_start":18,"column_end":28},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":4189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/coalescing.rs","byte_start":1220800,"byte_end":1220810,"line_start":1081,"line_end":1081,"column_start":31,"column_end":41},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":4189},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/context.rs","byte_start":1222951,"byte_end":1222958,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":4232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1230555,"byte_end":1230564,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":8568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1231180,"byte_end":1231193,"line_start":59,"line_end":59,"column_start":6,"column_end":19},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":8583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237407,"byte_end":1237425,"line_start":237,"line_end":237,"column_start":6,"column_end":24},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":4269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1237689,"byte_end":1237707,"line_start":250,"line_end":250,"column_start":16,"column_end":34},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4269},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1238090,"byte_end":1238113,"line_start":263,"line_end":263,"column_start":30,"column_end":53},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":8587},"to":{"krate":16,"index":364}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/diversion.rs","byte_start":1238316,"byte_end":1238333,"line_start":272,"line_end":272,"column_start":27,"column_end":44},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":4300},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/pressure.rs","byte_start":1242355,"byte_end":1242360,"line_start":68,"line_end":68,"column_start":6,"column_end":11},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":8592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/pressure.rs","byte_start":1242793,"byte_end":1242801,"line_start":83,"line_end":83,"column_start":6,"column_end":14},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":4320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/pressure.rs","byte_start":1249161,"byte_end":1249169,"line_start":261,"line_end":261,"column_start":23,"column_end":31},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":4320},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/reload.rs","byte_start":1255076,"byte_end":1255082,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":4373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/reload.rs","byte_start":1256529,"byte_end":1256542,"line_start":108,"line_end":108,"column_start":32,"column_end":45},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":4393},"to":{"krate":16,"index":364}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/reload.rs","byte_start":1256611,"byte_end":1256618,"line_start":114,"line_end":114,"column_start":10,"column_end":17},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1281102,"byte_end":1281110,"line_start":154,"line_end":154,"column_start":6,"column_end":14},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":4448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1282635,"byte_end":1282643,"line_start":206,"line_end":206,"column_start":23,"column_end":31},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":4448},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1283465,"byte_end":1283475,"line_start":239,"line_end":239,"column_start":32,"column_end":42},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":8601},"to":{"krate":16,"index":364}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1283557,"byte_end":1283567,"line_start":245,"line_end":245,"column_start":23,"column_end":33},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":8601},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1284399,"byte_end":1284403,"line_start":283,"line_end":283,"column_start":6,"column_end":10},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":8610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1286842,"byte_end":1286846,"line_start":362,"line_end":362,"column_start":23,"column_end":27},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":8610},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1287963,"byte_end":1287967,"line_start":408,"line_end":408,"column_start":21,"column_end":25},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":8610},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1291466,"byte_end":1291472,"line_start":489,"line_end":489,"column_start":6,"column_end":12},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":4480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1305371,"byte_end":1305377,"line_start":839,"line_end":839,"column_start":6,"column_end":12},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":4480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1310504,"byte_end":1310510,"line_start":977,"line_end":977,"column_start":6,"column_end":12},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":4480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/solver.rs","byte_start":1316916,"byte_end":1316922,"line_start":1129,"line_end":1129,"column_start":23,"column_end":29},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":4480},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1328575,"byte_end":1328583,"line_start":76,"line_end":76,"column_start":6,"column_end":14},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1329862,"byte_end":1329869,"line_start":122,"line_end":122,"column_start":10,"column_end":17},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":4575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1349626,"byte_end":1349632,"line_start":604,"line_end":604,"column_start":6,"column_end":12},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":8632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/regalloc/spilling.rs","byte_start":1349904,"byte_end":1349910,"line_start":617,"line_end":617,"column_start":23,"column_end":29},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":8632},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/scoped_hash_map.rs","byte_start":1352521,"byte_end":1352534,"line_start":30,"line_end":30,"column_start":16,"column_end":29},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":4640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/scoped_hash_map.rs","byte_start":1353052,"byte_end":1353063,"line_start":47,"line_end":47,"column_start":22,"column_end":33},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/scoped_hash_map.rs","byte_start":1353998,"byte_end":1354011,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/simple_gvn.rs","byte_start":1360522,"byte_end":1360529,"line_start":41,"line_end":41,"column_start":27,"column_end":34},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":8666},"to":{"krate":1,"index":7278}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/simple_gvn.rs","byte_start":1360752,"byte_end":1360759,"line_start":48,"line_end":48,"column_start":32,"column_end":39},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8666},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/simple_gvn.rs","byte_start":1360966,"byte_end":1360973,"line_start":54,"line_end":54,"column_start":25,"column_end":32},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":8666},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/topo_order.rs","byte_start":1410123,"byte_end":1410132,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":4812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424149,"byte_end":1424168,"line_start":246,"line_end":246,"column_start":26,"column_end":45},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":8727},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424247,"byte_end":1424266,"line_start":252,"line_end":252,"column_start":16,"column_end":35},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":8727},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424379,"byte_end":1424398,"line_start":259,"line_end":259,"column_start":21,"column_end":40},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":8727},"to":{"krate":1,"index":2077}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424515,"byte_end":1424534,"line_start":265,"line_end":265,"column_start":14,"column_end":33},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":8727},"to":{"krate":1,"index":2066}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.52.0/src/value_label.rs","byte_start":1424654,"byte_end":1424673,"line_start":271,"line_end":271,"column_start":20,"column_end":39},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":8727},"to":{"krate":1,"index":2040}}]}