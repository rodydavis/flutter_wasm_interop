{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0","program":"/Users/rodydavis/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","cranelift_bforest","/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=142e3575d65300b0","-C","extra-filename=-142e3575d65300b0","--out-dir","/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps","-L","dependency=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps","--extern","cranelift_entity=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libcranelift_entity-fec312bedc4ceb2b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/rodydavis/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libcranelift_bforest-142e3575d65300b0.rmeta"},"prelude":{"crate_id":{"name":"cranelift_bforest","disambiguator":[16839861756975015430,17480968280561536471]},"crate_root":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src","external_crates":[{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5459908120384850477,15760959269387734159]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11826469219384905814,12486183027959381912]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5497990426549684121,15109235050116755313]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","num":4,"id":{"name":"cranelift_entity","disambiguator":[17753184904274736661,13260828292095518975]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9495953968349266340,8510226981626586408]}}],"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":0,"byte_end":5783,"line_start":1,"line_end":199,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1547,"byte_end":1550,"line_start":51,"line_end":51,"column_start":21,"column_end":24},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1552,"byte_end":1561,"line_start":51,"line_end":51,"column_start":26,"column_end":35},"alias_span":null,"name":"MapCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1563,"byte_end":1572,"line_start":51,"line_end":51,"column_start":37,"column_end":46},"alias_span":null,"name":"MapForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1574,"byte_end":1581,"line_start":51,"line_end":51,"column_start":48,"column_end":55},"alias_span":null,"name":"MapIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1604,"byte_end":1607,"line_start":52,"line_end":52,"column_start":21,"column_end":24},"alias_span":null,"name":"Set","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":336},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1609,"byte_end":1618,"line_start":52,"line_end":52,"column_start":26,"column_end":35},"alias_span":null,"name":"SetCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":307},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1620,"byte_end":1629,"line_start":52,"line_end":52,"column_start":37,"column_end":46},"alias_span":null,"name":"SetForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1631,"byte_end":1638,"line_start":52,"line_end":52,"column_start":48,"column_end":55},"alias_span":null,"name":"SetIter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":0,"byte_end":5783,"line_start":1,"line_end":199,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":117},{"krate":0,"index":185},{"krate":0,"index":252},{"krate":0,"index":279},{"krate":0,"index":374},{"krate":0,"index":379},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":444},{"krate":0,"index":455},{"krate":0,"index":454},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":471},{"krate":0,"index":404},{"krate":0,"index":406}],"decl_id":null,"docs":" A forest of B+-trees.","sig":null,"attributes":[{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":709,"byte_end":776,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":777,"byte_end":807,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"no_std","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":1288,"byte_end":1298,"line_start":33,"line_end":33,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6560,"byte_end":6569,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"MapForest","qualname":"::map::MapForest","value":"MapForest {  }","parent":null,"children":[{"krate":0,"index":40}],"decl_id":null,"docs":" Memory pool for a forest of `Map` instances.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6757,"byte_end":6760,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<MapForest<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6994,"byte_end":6999,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"clear","qualname":"<MapForest<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all maps in the forest.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":408},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":7499,"byte_end":7502,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":" B-tree mapping from `K` to `V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":7702,"byte_end":7705,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":7855,"byte_end":7863,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty map?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":7967,"byte_end":7970,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"get","qualname":"<Map<K, V>>::get","value":"fn <C> (&self, key: K, forest: &MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the value stored for `key`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":8492,"byte_end":8503,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"get_or_less","qualname":"<Map<K, V>>::get_or_less","value":"fn <C> (&self, key: K, forest: &MapForest<K, V>, comp: &C) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Look up the value stored for `key`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":9017,"byte_end":9023,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<K, V>>::insert","value":"fn <C> (&mut self, key: K, value: V, forest: &mut MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `key, value` into the map and return the old value stored for `key`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":9326,"byte_end":9332,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<K, V>>::remove","value":"fn <C> (&mut self, key: K, forest: &mut MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the map and return the removed value for `key`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":9659,"byte_end":9664,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map<K, V>>::clear","value":"fn (&mut self, forest: &mut MapForest<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":10046,"byte_end":10052,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"retain","qualname":"<Map<K, V>>::retain","value":"fn <F> (&mut self, forest: &mut MapForest<K, V>, mut predicate: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":10842,"byte_end":10848,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Map<K, V>>::cursor","value":"fn <'a, C> (&'a mut self, forest: &'a mut MapForest<K, V>, comp: &'a C) -> MapCursor<'a, K, V, C>","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this map. The cursor is initially positioned off the end of\n the map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":11130,"byte_end":11134,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"iter","qualname":"<Map<K, V>>::iter","value":"fn <'a> (&'a self, forest: &'a MapForest<K, V>) -> MapIter<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this map. The iterator type is `(K, V)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":73},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":12505,"byte_end":12514,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"MapCursor","qualname":"::map::MapCursor","value":"MapCursor {  }","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" A position in a `Map` used to navigate and modify the ordered map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":13211,"byte_end":13219,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MapCursor>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty map?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":13545,"byte_end":13549,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"next","qualname":"<MapCursor>::next","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next key-value pair and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":13803,"byte_end":13807,"line_start":295,"line_end":295,"column_start":12,"column_end":16},"name":"prev","qualname":"<MapCursor>::prev","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous key-value pair and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":14027,"byte_end":14030,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"key","qualname":"<MapCursor>::key","value":"fn (&self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current key, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":14274,"byte_end":14279,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"value","qualname":"<MapCursor>::value","value":"fn (&self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":14546,"byte_end":14555,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<MapCursor>::value_mut","value":"fn (&mut self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":15007,"byte_end":15011,"line_start":328,"line_end":328,"column_start":12,"column_end":16},"name":"goto","qualname":"<MapCursor>::goto","value":"fn (&mut self, elem: K) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `key`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":15343,"byte_end":15353,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<MapCursor>::goto_first","value":"fn (&mut self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":15720,"byte_end":15726,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"insert","qualname":"<MapCursor>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `(key, value))` into the map and leave the cursor at the inserted pair.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":16658,"byte_end":16664,"line_start":371,"line_end":371,"column_start":12,"column_end":18},"name":"remove","qualname":"<MapCursor>::remove","value":"fn (&mut self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current entry (if any) and return the mapped value.\n This advances the cursor to the next entry after the removed one.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":16916,"byte_end":16923,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"MapIter","qualname":"::map::MapIter","value":"MapIter {  }","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" An iterator visiting the key-value pairs of a `Map`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":307},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":104617,"byte_end":104626,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"SetForest","qualname":"::set::SetForest","value":"SetForest {  }","parent":null,"children":[{"krate":0,"index":309}],"decl_id":null,"docs":" Memory pool for a forest of `Set` instances.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":104776,"byte_end":104779,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<SetForest<K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105013,"byte_end":105018,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"clear","qualname":"<SetForest<K>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all sets in the forest.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105563,"byte_end":105566,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"Set","qualname":"::set::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" B-tree representing an ordered set of `K`s using `C` for comparing elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105726,"byte_end":105729,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Set<K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105879,"byte_end":105887,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Set<K>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty set?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105988,"byte_end":105996,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"contains","qualname":"<Set<K>>::contains","value":"fn <C> (&self, key: K, forest: &SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the set contain `key`?.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":106440,"byte_end":106446,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"insert","qualname":"<Set<K>>::insert","value":"fn <C> (&mut self, key: K, forest: &mut SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `key` into the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":106752,"byte_end":106758,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<Set<K>>::remove","value":"fn <C> (&mut self, key: K, forest: &mut SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the set and return true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":107086,"byte_end":107091,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set<K>>::clear","value":"fn (&mut self, forest: &mut SetForest<K>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":107382,"byte_end":107388,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"retain","qualname":"<Set<K>>::retain","value":"fn <F> (&mut self, forest: &mut SetForest<K>, mut predicate: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":108053,"byte_end":108059,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Set<K>>::cursor","value":"fn <'a, C> (&'a mut self, forest: &'a mut SetForest<K>, comp: &'a C) -> SetCursor<'a, K, C>","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this set. The cursor is initially positioned off the end of\n the set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":108330,"byte_end":108334,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"iter","qualname":"<Set<K>>::iter","value":"fn <'a> (&'a self, forest: &'a SetForest<K>) -> SetIter<'a, K>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this set. The iterator type is `K`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":108848,"byte_end":108857,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"name":"SetCursor","qualname":"::set::SetCursor","value":"SetCursor {  }","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"decl_id":null,"docs":" A position in a `Set` used to navigate and modify the ordered set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":109498,"byte_end":109506,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SetCursor>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty set?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":109825,"byte_end":109829,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"next","qualname":"<SetCursor>::next","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next element and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":110089,"byte_end":110093,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"prev","qualname":"<SetCursor>::prev","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous element and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":110328,"byte_end":110332,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"elem","qualname":"<SetCursor>::elem","value":"fn (&self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current element, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":110755,"byte_end":110759,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"goto","qualname":"<SetCursor>::goto","value":"fn (&mut self, elem: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `elem`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":111195,"byte_end":111205,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<SetCursor>::goto_first","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":111609,"byte_end":111615,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"insert","qualname":"<SetCursor>::insert","value":"fn (&mut self, elem: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `elem` into the set and leave the cursor at the inserted element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":112475,"byte_end":112481,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"remove","qualname":"<SetCursor>::remove","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current element (if any) and return it.\n This advances the cursor to the next element after the removed one.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":113137,"byte_end":113144,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"SetIter","qualname":"::set::SetIter","value":"SetIter {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"decl_id":null,"docs":" An iterator visiting the elements of a `Set`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":389},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":2296,"byte_end":2306,"line_start":71,"line_end":71,"column_start":11,"column_end":21},"name":"Comparator","qualname":"::Comparator","value":"Comparator<K>","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" Key comparator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":2450,"byte_end":2453,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"cmp","qualname":"::Comparator::cmp","value":"fn (&self, a: K, b: K) -> Ordering","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" Compare keys `a` and `b`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":2805,"byte_end":2811,"line_start":86,"line_end":86,"column_start":8,"column_end":14},"name":"search","qualname":"::Comparator::search","value":"fn (&self, k: K, s: &[K]) -> Result<usize, usize>","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" Binary search for `k` in an ordered slice.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":3260,"byte_end":3263,"line_start":104,"line_end":104,"column_start":10,"column_end":13},"name":"Key","qualname":"::Forest::Key","value":"type Key: Copy;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" The key type is present for both sets and maps.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":399},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":3322,"byte_end":3327,"line_start":107,"line_end":107,"column_start":10,"column_end":15},"name":"Value","qualname":"::Forest::Value","value":"type Value: Copy;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" The value type is `()` for sets.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":400},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":3390,"byte_end":3398,"line_start":110,"line_end":110,"column_start":10,"column_end":18},"name":"LeafKeys","qualname":"::Forest::LeafKeys","value":"type LeafKeys: Copy + BorrowMut<[Self::Key]>;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" An array of keys for the leaf nodes.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":401},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/lib.rs","byte_start":3488,"byte_end":3498,"line_start":113,"line_end":113,"column_start":10,"column_end":20},"name":"LeafValues","qualname":"::Forest::LeafValues","value":"type LeafValues: Copy + BorrowMut<[Self::Value]>;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" An array of values for the leaf nodes.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6136,"byte_end":6144,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6661,"byte_end":6670,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":7620,"byte_end":7623,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":11358,"byte_end":11361,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":12751,"byte_end":12760,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":17111,"byte_end":17118,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":36531,"byte_end":36539,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":36572,"byte_end":36580,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":36655,"byte_end":36663,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":54460,"byte_end":54467,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":55051,"byte_end":55059,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":55182,"byte_end":55183,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":55313,"byte_end":55321,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/path.rs","byte_start":64730,"byte_end":64734,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/path.rs","byte_start":64944,"byte_end":64948,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/pool.rs","byte_start":96411,"byte_end":96419,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/pool.rs","byte_start":103532,"byte_end":103540,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/pool.rs","byte_start":103706,"byte_end":103714,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":104179,"byte_end":104187,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":104696,"byte_end":104705,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105660,"byte_end":105663,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":108549,"byte_end":108552,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":109064,"byte_end":109073,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":113302,"byte_end":113309,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6136,"byte_end":6144,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":0,"index":397}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":6661,"byte_end":6670,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":7620,"byte_end":7623,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":11358,"byte_end":11361,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":12751,"byte_end":12760,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":73},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/map.rs","byte_start":17111,"byte_end":17118,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":104},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":36531,"byte_end":36539,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":1543}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":36572,"byte_end":36580,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":36655,"byte_end":36663,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":54460,"byte_end":54467,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":55051,"byte_end":55059,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":469},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":55182,"byte_end":55183,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":180},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/node.rs","byte_start":55313,"byte_end":55321,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/path.rs","byte_start":64730,"byte_end":64734,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/path.rs","byte_start":64944,"byte_end":64948,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/pool.rs","byte_start":96411,"byte_end":96419,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/pool.rs","byte_start":103532,"byte_end":103540,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/pool.rs","byte_start":103706,"byte_end":103714,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":104179,"byte_end":104187,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":291},"to":{"krate":0,"index":397}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":104696,"byte_end":104705,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":105660,"byte_end":105663,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":108549,"byte_end":108552,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":437},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":109064,"byte_end":109073,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.52.0/src/set.rs","byte_start":113302,"byte_end":113309,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":3653}}]}