{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3","program":"/Users/rodydavis/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","lock_api","/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=86ce2a0ff5ef497d","-C","extra-filename=-86ce2a0ff5ef497d","--out-dir","/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps","-L","dependency=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps","--extern","scopeguard=/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/libscopeguard-ba24d8916ebd4a05.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/rodydavis/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/rodydavis/Developer/GitHub/packages/flutter_wasm_interop/example/target/rls/debug/deps/liblock_api-86ce2a0ff5ef497d.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[2168007584467776147,11622147113987953292]},"crate_root":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src","external_crates":[{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5459908120384850477,15760959269387734159]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11826469219384905814,12486183027959381912]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5497990426549684121,15109235050116755313]}},{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[15270720583694984572,2301021778427417115]}}],"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":856}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3471,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3482,"byte_end":3504,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3505,"byte_end":3531,"line_start":88,"line_end":88,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3710,"byte_end":3719,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/lib.rs","byte_start":3815,"byte_end":3826,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":4899,"byte_end":4907,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5210,"byte_end":5214,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5151,"byte_end":5199,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5379,"byte_end":5390,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5484,"byte_end":5488,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5562,"byte_end":5570,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":5623,"byte_end":5629,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6021,"byte_end":6033,"line_start":56,"line_end":56,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6110,"byte_end":6121,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6414,"byte_end":6418,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6716,"byte_end":6729,"line_start":75,"line_end":75,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6798,"byte_end":6806,"line_start":77,"line_end":77,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6866,"byte_end":6873,"line_start":80,"line_end":80,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6949,"byte_end":6961,"line_start":83,"line_end":83,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7077,"byte_end":7091,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7645,"byte_end":7650,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8282,"byte_end":8285,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8224,"byte_end":8256,"line_start":117,"line_end":117,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8261,"byte_end":8270,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8495,"byte_end":8505,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8474,"byte_end":8483,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9388,"byte_end":9392,"line_start":155,"line_end":155,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9367,"byte_end":9376,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9846,"byte_end":9854,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":9825,"byte_end":9834,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10327,"byte_end":10334,"line_start":183,"line_end":183,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10306,"byte_end":10315,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10918,"byte_end":10930,"line_start":199,"line_end":199,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":10890,"byte_end":10899,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11367,"byte_end":11370,"line_start":213,"line_end":213,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11339,"byte_end":11348,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12001,"byte_end":12018,"line_start":231,"line_end":231,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11973,"byte_end":11982,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12418,"byte_end":12430,"line_start":243,"line_end":243,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12397,"byte_end":12406,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12986,"byte_end":13000,"line_start":258,"line_end":258,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12965,"byte_end":12974,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15208,"byte_end":15218,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15137,"byte_end":15196,"line_start":336,"line_end":336,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15569,"byte_end":15574,"line_start":346,"line_end":346,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16039,"byte_end":16042,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16018,"byte_end":16027,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16877,"byte_end":16884,"line_start":383,"line_end":383,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":16856,"byte_end":16865,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17565,"byte_end":17573,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17544,"byte_end":17553,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18589,"byte_end":18600,"line_start":429,"line_end":429,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18568,"byte_end":18577,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18976,"byte_end":18989,"line_start":441,"line_end":441,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":18955,"byte_end":18964,"line_start":440,"line_end":440,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19454,"byte_end":19458,"line_start":456,"line_end":456,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19433,"byte_end":19442,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21004,"byte_end":21020,"line_start":506,"line_end":506,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20933,"byte_end":20992,"line_start":505,"line_end":505,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21848,"byte_end":21851,"line_start":531,"line_end":531,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21827,"byte_end":21836,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22679,"byte_end":22686,"line_start":555,"line_end":555,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":22658,"byte_end":22667,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23981,"byte_end":23992,"line_start":587,"line_end":587,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23960,"byte_end":23969,"line_start":586,"line_end":586,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":218},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26275,"byte_end":26286,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":219},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26567,"byte_end":26571,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26508,"byte_end":26556,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26682,"byte_end":26699,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> NonZeroUsize","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29572,"byte_end":29586,"line_start":148,"line_end":148,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30589,"byte_end":30592,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30531,"byte_end":30563,"line_start":179,"line_end":179,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30568,"byte_end":30577,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31007,"byte_end":31017,"line_start":195,"line_end":195,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":30986,"byte_end":30995,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32053,"byte_end":32057,"line_start":223,"line_end":223,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<'_, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32032,"byte_end":32041,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32523,"byte_end":32531,"line_start":237,"line_end":237,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":32502,"byte_end":32511,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33025,"byte_end":33032,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33004,"byte_end":33013,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33634,"byte_end":33646,"line_start":267,"line_end":267,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":33606,"byte_end":33615,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34092,"byte_end":34095,"line_start":281,"line_end":281,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34064,"byte_end":34073,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34778,"byte_end":34795,"line_start":299,"line_end":299,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34750,"byte_end":34759,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35223,"byte_end":35235,"line_start":311,"line_end":311,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35202,"byte_end":35211,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35803,"byte_end":35817,"line_start":326,"line_end":326,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":35782,"byte_end":35791,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38314,"byte_end":38333,"line_start":410,"line_end":410,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38234,"byte_end":38302,"line_start":409,"line_end":409,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38794,"byte_end":38801,"line_start":422,"line_end":422,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39307,"byte_end":39310,"line_start":435,"line_end":435,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":39286,"byte_end":39295,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40180,"byte_end":40187,"line_start":459,"line_end":459,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40159,"byte_end":40168,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40916,"byte_end":40924,"line_start":484,"line_end":484,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":40895,"byte_end":40904,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41990,"byte_end":42001,"line_start":510,"line_end":510,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41969,"byte_end":41978,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42373,"byte_end":42386,"line_start":522,"line_end":522,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42352,"byte_end":42361,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42855,"byte_end":42859,"line_start":537,"line_end":537,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42834,"byte_end":42843,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44444,"byte_end":44469,"line_start":591,"line_end":591,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44364,"byte_end":44432,"line_start":590,"line_end":590,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45316,"byte_end":45319,"line_start":614,"line_end":614,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":45295,"byte_end":45304,"line_start":613,"line_end":613,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46178,"byte_end":46185,"line_start":638,"line_end":638,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46157,"byte_end":46166,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47558,"byte_end":47569,"line_start":675,"line_end":675,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47537,"byte_end":47546,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":49765,"byte_end":49774,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":437},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50080,"byte_end":50084,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50021,"byte_end":50069,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":438},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50249,"byte_end":50260,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50357,"byte_end":50368,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50445,"byte_end":50460,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50517,"byte_end":50530,"line_start":49,"line_end":49,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50638,"byte_end":50652,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50733,"byte_end":50751,"line_start":55,"line_end":55,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":50812,"byte_end":50828,"line_start":58,"line_end":58,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51220,"byte_end":51233,"line_start":67,"line_end":67,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51315,"byte_end":51333,"line_start":69,"line_end":69,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51415,"byte_end":51436,"line_start":72,"line_end":72,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51747,"byte_end":51758,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52149,"byte_end":52163,"line_start":89,"line_end":89,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":450},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52380,"byte_end":52398,"line_start":97,"line_end":97,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":451}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52565,"byte_end":52574,"line_start":100,"line_end":100,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":452},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52816,"byte_end":52830,"line_start":107,"line_end":107,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":453},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52900,"byte_end":52908,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":454},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52968,"byte_end":52975,"line_start":112,"line_end":112,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53055,"byte_end":53074,"line_start":115,"line_end":115,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53194,"byte_end":53215,"line_start":118,"line_end":118,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53338,"byte_end":53360,"line_start":121,"line_end":121,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53484,"byte_end":53508,"line_start":124,"line_end":124,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":459},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53941,"byte_end":53959,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54060,"byte_end":54081,"line_start":136,"line_end":136,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54189,"byte_end":54214,"line_start":139,"line_end":139,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":462},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54335,"byte_end":54358,"line_start":143,"line_end":143,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54532,"byte_end":54561,"line_start":146,"line_end":146,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54738,"byte_end":54769,"line_start":150,"line_end":150,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55145,"byte_end":55161,"line_start":159,"line_end":159,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55274,"byte_end":55289,"line_start":161,"line_end":161,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55371,"byte_end":55390,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55452,"byte_end":55469,"line_start":167,"line_end":167,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55544,"byte_end":55551,"line_start":170,"line_end":170,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55662,"byte_end":55673,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55800,"byte_end":55820,"line_start":179,"line_end":179,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55930,"byte_end":55952,"line_start":181,"line_end":181,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56276,"byte_end":56291,"line_start":188,"line_end":188,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":474},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56490,"byte_end":56515,"line_start":196,"line_end":196,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56620,"byte_end":56640,"line_start":198,"line_end":198,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56717,"byte_end":56740,"line_start":201,"line_end":201,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56866,"byte_end":56887,"line_start":206,"line_end":206,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57007,"byte_end":57030,"line_start":208,"line_end":208,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57155,"byte_end":57180,"line_start":211,"line_end":211,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57333,"byte_end":57348,"line_start":215,"line_end":215,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":57502,"byte_end":57519,"line_start":219,"line_end":219,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":58271,"byte_end":58277,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59563,"byte_end":59566,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59505,"byte_end":59537,"line_start":283,"line_end":283,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59542,"byte_end":59551,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59809,"byte_end":59819,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59760,"byte_end":59769,"line_start":293,"line_end":293,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59774,"byte_end":59797,"line_start":294,"line_end":294,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61064,"byte_end":61068,"line_start":336,"line_end":336,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61043,"byte_end":61052,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61571,"byte_end":61579,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":61550,"byte_end":61559,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62198,"byte_end":62203,"line_start":368,"line_end":368,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62177,"byte_end":62186,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62702,"byte_end":62711,"line_start":382,"line_end":382,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":62681,"byte_end":62690,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63207,"byte_end":63214,"line_start":396,"line_end":396,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63186,"byte_end":63195,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63821,"byte_end":63838,"line_start":412,"line_end":412,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":63793,"byte_end":63802,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64429,"byte_end":64447,"line_start":428,"line_end":428,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64401,"byte_end":64410,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64913,"byte_end":64916,"line_start":442,"line_end":442,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65572,"byte_end":65594,"line_start":460,"line_end":460,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":65544,"byte_end":65553,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66219,"byte_end":66242,"line_start":476,"line_end":476,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66191,"byte_end":66200,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66694,"byte_end":66706,"line_start":489,"line_end":489,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66673,"byte_end":66682,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67319,"byte_end":67333,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67298,"byte_end":67307,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67954,"byte_end":67967,"line_start":521,"line_end":521,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":67933,"byte_end":67942,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68592,"byte_end":68607,"line_start":537,"line_end":537,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68571,"byte_end":68580,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69738,"byte_end":69752,"line_start":564,"line_end":564,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":69717,"byte_end":69726,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70436,"byte_end":70454,"line_start":581,"line_end":581,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70415,"byte_end":70424,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71301,"byte_end":71323,"line_start":603,"line_end":603,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71280,"byte_end":71289,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71969,"byte_end":71993,"line_start":622,"line_end":622,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":71948,"byte_end":71957,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73121,"byte_end":73136,"line_start":657,"line_end":657,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73100,"byte_end":73109,"line_start":656,"line_end":656,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73663,"byte_end":73682,"line_start":671,"line_end":671,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73642,"byte_end":73651,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74345,"byte_end":74368,"line_start":689,"line_end":689,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":74324,"byte_end":74333,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75028,"byte_end":75053,"line_start":708,"line_end":708,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75007,"byte_end":75016,"line_start":707,"line_end":707,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76526,"byte_end":76541,"line_start":758,"line_end":758,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76454,"byte_end":76514,"line_start":757,"line_end":757,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76907,"byte_end":76913,"line_start":767,"line_end":767,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77393,"byte_end":77396,"line_start":780,"line_end":780,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":77372,"byte_end":77381,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78240,"byte_end":78247,"line_start":804,"line_end":804,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78219,"byte_end":78228,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78999,"byte_end":79007,"line_start":828,"line_end":828,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":78978,"byte_end":78987,"line_start":827,"line_end":827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80065,"byte_end":80076,"line_start":852,"line_end":852,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80044,"byte_end":80053,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80463,"byte_end":80476,"line_start":864,"line_end":864,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80442,"byte_end":80451,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80960,"byte_end":80964,"line_start":879,"line_end":879,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":80939,"byte_end":80948,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82098,"byte_end":82114,"line_start":919,"line_end":919,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82026,"byte_end":82086,"line_start":918,"line_end":918,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82486,"byte_end":82492,"line_start":928,"line_end":928,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82975,"byte_end":82978,"line_start":941,"line_end":941,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82954,"byte_end":82963,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83839,"byte_end":83846,"line_start":965,"line_end":965,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":83818,"byte_end":83827,"line_start":964,"line_end":964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84547,"byte_end":84555,"line_start":987,"line_end":987,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84526,"byte_end":84535,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85166,"byte_end":85175,"line_start":1004,"line_end":1004,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85850,"byte_end":85873,"line_start":1022,"line_end":1022,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87018,"byte_end":87029,"line_start":1047,"line_end":1047,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86997,"byte_end":87006,"line_start":1046,"line_end":1046,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87419,"byte_end":87432,"line_start":1059,"line_end":1059,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87398,"byte_end":87407,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87923,"byte_end":87927,"line_start":1074,"line_end":1074,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":87902,"byte_end":87911,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89269,"byte_end":89294,"line_start":1121,"line_end":1121,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89197,"byte_end":89257,"line_start":1120,"line_end":1120,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89706,"byte_end":89712,"line_start":1133,"line_end":1133,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90005,"byte_end":90013,"line_start":1142,"line_end":1142,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89984,"byte_end":89993,"line_start":1141,"line_end":1141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90355,"byte_end":90362,"line_start":1153,"line_end":1153,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":90789,"byte_end":90800,"line_start":1166,"line_end":1166,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92032,"byte_end":92043,"line_start":1194,"line_end":1194,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92011,"byte_end":92020,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92434,"byte_end":92447,"line_start":1206,"line_end":1206,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92413,"byte_end":92422,"line_start":1205,"line_end":1205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92950,"byte_end":92954,"line_start":1221,"line_end":1221,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":92929,"byte_end":92938,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93495,"byte_end":93504,"line_start":1234,"line_end":1234,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94096,"byte_end":94111,"line_start":1251,"line_end":1251,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94762,"byte_end":94779,"line_start":1273,"line_end":1273,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":94741,"byte_end":94750,"line_start":1272,"line_end":1272,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":744},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96624,"byte_end":96645,"line_start":1335,"line_end":1335,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96552,"byte_end":96612,"line_start":1334,"line_end":1334,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97491,"byte_end":97494,"line_start":1357,"line_end":1357,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97470,"byte_end":97479,"line_start":1356,"line_end":1356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98329,"byte_end":98336,"line_start":1381,"line_end":1381,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98308,"byte_end":98317,"line_start":1380,"line_end":1380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99661,"byte_end":99672,"line_start":1413,"line_end":1413,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99640,"byte_end":99649,"line_start":1412,"line_end":1412,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":795},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101142,"byte_end":101164,"line_start":1464,"line_end":1464,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101070,"byte_end":101130,"line_start":1463,"line_end":1463,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102023,"byte_end":102026,"line_start":1489,"line_end":1489,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102002,"byte_end":102011,"line_start":1488,"line_end":1488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102878,"byte_end":102885,"line_start":1513,"line_end":1513,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":102857,"byte_end":102866,"line_start":1512,"line_end":1512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103907,"byte_end":103916,"line_start":1542,"line_end":1542,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"fn (s: Self) -> MappedRwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"deprecated(since = \"0.3.3\", note =\n             \"This function is unsound and will be removed in the future, see issue #198\")","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103758,"byte_end":103895,"line_start":1538,"line_end":1541,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105080,"byte_end":105091,"line_start":1569,"line_end":1569,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105059,"byte_end":105068,"line_start":1568,"line_end":1568,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7776,"byte_end":7781,"line_start":102,"line_end":102,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7850,"byte_end":7855,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7887,"byte_end":7892,"line_start":105,"line_end":105,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8588,"byte_end":8593,"line_start":133,"line_end":133,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11446,"byte_end":11451,"line_start":218,"line_end":218,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12103,"byte_end":12108,"line_start":236,"line_end":236,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13309,"byte_end":13314,"line_start":268,"line_end":268,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13452,"byte_end":13457,"line_start":275,"line_end":275,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13603,"byte_end":13608,"line_start":282,"line_end":282,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13897,"byte_end":13914,"line_start":288,"line_end":288,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15407,"byte_end":15417,"line_start":342,"line_end":342,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15475,"byte_end":15485,"line_start":344,"line_end":344,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17781,"byte_end":17791,"line_start":415,"line_end":415,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19565,"byte_end":19575,"line_start":461,"line_end":461,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19759,"byte_end":19769,"line_start":469,"line_end":469,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19944,"byte_end":19954,"line_start":476,"line_end":476,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20119,"byte_end":20129,"line_start":483,"line_end":483,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20325,"byte_end":20335,"line_start":489,"line_end":489,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21201,"byte_end":21217,"line_start":513,"line_end":513,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21291,"byte_end":21307,"line_start":516,"line_end":516,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21397,"byte_end":21413,"line_start":521,"line_end":521,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23167,"byte_end":23183,"line_start":573,"line_end":573,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24119,"byte_end":24135,"line_start":593,"line_end":593,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24307,"byte_end":24323,"line_start":601,"line_end":601,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24486,"byte_end":24502,"line_start":608,"line_end":608,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24661,"byte_end":24677,"line_start":615,"line_end":615,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24877,"byte_end":24893,"line_start":622,"line_end":622,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26909,"byte_end":26926,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28155,"byte_end":28172,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28778,"byte_end":28795,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29777,"byte_end":29791,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29891,"byte_end":29905,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29957,"byte_end":29971,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31116,"byte_end":31130,"line_start":200,"line_end":200,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34193,"byte_end":34207,"line_start":286,"line_end":286,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34896,"byte_end":34910,"line_start":304,"line_end":304,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36154,"byte_end":36168,"line_start":336,"line_end":336,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36346,"byte_end":36360,"line_start":343,"line_end":343,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36546,"byte_end":36560,"line_start":350,"line_end":350,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36912,"byte_end":36929,"line_start":359,"line_end":359,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38577,"byte_end":38596,"line_start":416,"line_end":416,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38679,"byte_end":38698,"line_start":420,"line_end":420,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41161,"byte_end":41180,"line_start":495,"line_end":495,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42993,"byte_end":43012,"line_start":543,"line_end":543,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43222,"byte_end":43241,"line_start":553,"line_end":553,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43436,"byte_end":43455,"line_start":562,"line_end":562,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43679,"byte_end":43698,"line_start":570,"line_end":570,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44714,"byte_end":44739,"line_start":598,"line_end":598,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44826,"byte_end":44851,"line_start":603,"line_end":603,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46723,"byte_end":46748,"line_start":660,"line_end":660,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47721,"byte_end":47746,"line_start":682,"line_end":682,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47942,"byte_end":47967,"line_start":692,"line_end":692,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48154,"byte_end":48179,"line_start":701,"line_end":701,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48403,"byte_end":48428,"line_start":709,"line_end":709,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59035,"byte_end":59041,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59118,"byte_end":59124,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59157,"byte_end":59163,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59914,"byte_end":59920,"line_start":300,"line_end":300,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64993,"byte_end":64999,"line_start":447,"line_end":447,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66338,"byte_end":66344,"line_start":481,"line_end":481,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68926,"byte_end":68932,"line_start":547,"line_end":547,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70749,"byte_end":70755,"line_start":591,"line_end":591,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72338,"byte_end":72344,"line_start":635,"line_end":635,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73985,"byte_end":73991,"line_start":681,"line_end":681,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75423,"byte_end":75429,"line_start":721,"line_end":721,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75570,"byte_end":75576,"line_start":728,"line_end":728,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75725,"byte_end":75731,"line_start":735,"line_end":735,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76021,"byte_end":76038,"line_start":741,"line_end":741,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76723,"byte_end":76738,"line_start":763,"line_end":763,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76797,"byte_end":76812,"line_start":765,"line_end":765,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79232,"byte_end":79247,"line_start":838,"line_end":838,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81080,"byte_end":81095,"line_start":884,"line_end":884,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81277,"byte_end":81292,"line_start":892,"line_end":892,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81466,"byte_end":81481,"line_start":899,"line_end":899,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81682,"byte_end":81697,"line_start":906,"line_end":906,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82300,"byte_end":82316,"line_start":924,"line_end":924,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82375,"byte_end":82391,"line_start":926,"line_end":926,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84791,"byte_end":84807,"line_start":997,"line_end":997,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85463,"byte_end":85479,"line_start":1015,"line_end":1015,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86183,"byte_end":86199,"line_start":1033,"line_end":1033,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88046,"byte_end":88062,"line_start":1079,"line_end":1079,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88248,"byte_end":88264,"line_start":1087,"line_end":1087,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88441,"byte_end":88457,"line_start":1094,"line_end":1094,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88634,"byte_end":88650,"line_start":1101,"line_end":1101,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88851,"byte_end":88867,"line_start":1108,"line_end":1108,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89494,"byte_end":89519,"line_start":1127,"line_end":1127,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89586,"byte_end":89611,"line_start":1131,"line_end":1131,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91179,"byte_end":91204,"line_start":1180,"line_end":1180,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93080,"byte_end":93105,"line_start":1226,"line_end":1226,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93799,"byte_end":93824,"line_start":1245,"line_end":1245,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95221,"byte_end":95246,"line_start":1290,"line_end":1290,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95435,"byte_end":95460,"line_start":1298,"line_end":1298,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95649,"byte_end":95674,"line_start":1306,"line_end":1306,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95882,"byte_end":95907,"line_start":1314,"line_end":1314,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96815,"byte_end":96836,"line_start":1341,"line_end":1341,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96910,"byte_end":96931,"line_start":1342,"line_end":1342,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97022,"byte_end":97043,"line_start":1347,"line_end":1347,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98816,"byte_end":98837,"line_start":1399,"line_end":1399,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99807,"byte_end":99828,"line_start":1419,"line_end":1419,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99997,"byte_end":100018,"line_start":1427,"line_end":1427,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100189,"byte_end":100210,"line_start":1435,"line_end":1435,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100411,"byte_end":100432,"line_start":1443,"line_end":1443,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101340,"byte_end":101362,"line_start":1471,"line_end":1471,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101437,"byte_end":101459,"line_start":1474,"line_end":1474,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101550,"byte_end":101572,"line_start":1479,"line_end":1479,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103384,"byte_end":103406,"line_start":1531,"line_end":1531,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104233,"byte_end":104255,"line_start":1555,"line_end":1555,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105229,"byte_end":105251,"line_start":1575,"line_end":1575,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105424,"byte_end":105446,"line_start":1583,"line_end":1583,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105610,"byte_end":105632,"line_start":1590,"line_end":1590,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105806,"byte_end":105828,"line_start":1598,"line_end":1598,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":106029,"byte_end":106051,"line_start":1606,"line_end":1606,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6035,"byte_end":6043,"line_start":56,"line_end":56,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":6731,"byte_end":6739,"line_start":75,"line_end":75,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":28}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7776,"byte_end":7781,"line_start":102,"line_end":102,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7850,"byte_end":7855,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":7887,"byte_end":7892,"line_start":105,"line_end":105,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":8588,"byte_end":8593,"line_start":133,"line_end":133,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":11446,"byte_end":11451,"line_start":218,"line_end":218,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":12103,"byte_end":12108,"line_start":236,"line_end":236,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13309,"byte_end":13314,"line_start":268,"line_end":268,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13452,"byte_end":13457,"line_start":275,"line_end":275,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13603,"byte_end":13608,"line_start":282,"line_end":282,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":13897,"byte_end":13914,"line_start":288,"line_end":288,"column_start":37,"column_end":54},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15407,"byte_end":15417,"line_start":342,"line_end":342,"column_start":74,"column_end":84},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":15475,"byte_end":15485,"line_start":344,"line_end":344,"column_start":44,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":17781,"byte_end":17791,"line_start":415,"line_end":415,"column_start":48,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19565,"byte_end":19575,"line_start":461,"line_end":461,"column_start":54,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19759,"byte_end":19769,"line_start":469,"line_end":469,"column_start":57,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":19944,"byte_end":19954,"line_start":476,"line_end":476,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20119,"byte_end":20129,"line_start":483,"line_end":483,"column_start":72,"column_end":82},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":20325,"byte_end":20335,"line_start":489,"line_end":489,"column_start":76,"column_end":86},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21201,"byte_end":21217,"line_start":513,"line_end":513,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21291,"byte_end":21307,"line_start":516,"line_end":516,"column_start":60,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":21397,"byte_end":21413,"line_start":521,"line_end":521,"column_start":44,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":23167,"byte_end":23183,"line_start":573,"line_end":573,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24119,"byte_end":24135,"line_start":593,"line_end":593,"column_start":54,"column_end":70},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24307,"byte_end":24323,"line_start":601,"line_end":601,"column_start":57,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24486,"byte_end":24502,"line_start":608,"line_end":608,"column_start":53,"column_end":69},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24661,"byte_end":24677,"line_start":615,"line_end":615,"column_start":72,"column_end":88},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/mutex.rs","byte_start":24877,"byte_end":24893,"line_start":622,"line_end":622,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":26909,"byte_end":26926,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28155,"byte_end":28172,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":28778,"byte_end":28795,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29777,"byte_end":29791,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29891,"byte_end":29905,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":29957,"byte_end":29971,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":31116,"byte_end":31130,"line_start":200,"line_end":200,"column_start":46,"column_end":60},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34193,"byte_end":34207,"line_start":286,"line_end":286,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":34896,"byte_end":34910,"line_start":304,"line_end":304,"column_start":51,"column_end":65},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36154,"byte_end":36168,"line_start":336,"line_end":336,"column_start":68,"column_end":82},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36346,"byte_end":36360,"line_start":343,"line_end":343,"column_start":50,"column_end":64},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36546,"byte_end":36560,"line_start":350,"line_end":350,"column_start":74,"column_end":88},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":36912,"byte_end":36929,"line_start":359,"line_end":359,"column_start":37,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38577,"byte_end":38596,"line_start":416,"line_end":416,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":38679,"byte_end":38698,"line_start":420,"line_end":420,"column_start":65,"column_end":84},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":41161,"byte_end":41180,"line_start":495,"line_end":495,"column_start":5,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":42993,"byte_end":43012,"line_start":543,"line_end":543,"column_start":9,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43222,"byte_end":43241,"line_start":553,"line_end":553,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43436,"byte_end":43455,"line_start":562,"line_end":562,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":43679,"byte_end":43698,"line_start":570,"line_end":570,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44714,"byte_end":44739,"line_start":598,"line_end":598,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":44826,"byte_end":44851,"line_start":603,"line_end":603,"column_start":5,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":46723,"byte_end":46748,"line_start":660,"line_end":660,"column_start":5,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47721,"byte_end":47746,"line_start":682,"line_end":682,"column_start":9,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":47942,"byte_end":47967,"line_start":692,"line_end":692,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48154,"byte_end":48179,"line_start":701,"line_end":701,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/remutex.rs","byte_start":48403,"byte_end":48428,"line_start":709,"line_end":709,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":51235,"byte_end":51244,"line_start":67,"line_end":67,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52400,"byte_end":52409,"line_start":97,"line_end":97,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":450}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":52832,"byte_end":52841,"line_start":107,"line_end":107,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":452}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":53961,"byte_end":53970,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":459}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54360,"byte_end":54378,"line_start":143,"line_end":143,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":459},"to":{"krate":0,"index":462}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":54381,"byte_end":54395,"line_start":143,"line_end":143,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":452},"to":{"krate":0,"index":462}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55163,"byte_end":55172,"line_start":159,"line_end":159,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":465}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55822,"byte_end":55838,"line_start":179,"line_end":179,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":471}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":55841,"byte_end":55854,"line_start":179,"line_end":179,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":471}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56517,"byte_end":56533,"line_start":196,"line_end":196,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":474}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56536,"byte_end":56554,"line_start":196,"line_end":196,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":450},"to":{"krate":0,"index":474}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56889,"byte_end":56905,"line_start":206,"line_end":206,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":477}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":56908,"byte_end":56922,"line_start":206,"line_end":206,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":452},"to":{"krate":0,"index":477}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59035,"byte_end":59041,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59118,"byte_end":59124,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59157,"byte_end":59163,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":59914,"byte_end":59920,"line_start":300,"line_end":300,"column_start":31,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":64993,"byte_end":64999,"line_start":447,"line_end":447,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":66338,"byte_end":66344,"line_start":481,"line_end":481,"column_start":36,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":68926,"byte_end":68932,"line_start":547,"line_end":547,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":70749,"byte_end":70755,"line_start":591,"line_end":591,"column_start":45,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":72338,"byte_end":72344,"line_start":635,"line_end":635,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":73985,"byte_end":73991,"line_start":681,"line_end":681,"column_start":43,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75423,"byte_end":75429,"line_start":721,"line_end":721,"column_start":53,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75570,"byte_end":75576,"line_start":728,"line_end":728,"column_start":35,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":75725,"byte_end":75731,"line_start":735,"line_end":735,"column_start":59,"column_end":65},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":482},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76021,"byte_end":76038,"line_start":741,"line_end":741,"column_start":37,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76723,"byte_end":76738,"line_start":763,"line_end":763,"column_start":68,"column_end":83},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":76797,"byte_end":76812,"line_start":765,"line_end":765,"column_start":45,"column_end":60},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":79232,"byte_end":79247,"line_start":838,"line_end":838,"column_start":49,"column_end":64},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81080,"byte_end":81095,"line_start":884,"line_end":884,"column_start":55,"column_end":70},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81277,"byte_end":81292,"line_start":892,"line_end":892,"column_start":54,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81466,"byte_end":81481,"line_start":899,"line_end":899,"column_start":73,"column_end":88},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":81682,"byte_end":81697,"line_start":906,"line_end":906,"column_start":9,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82300,"byte_end":82316,"line_start":924,"line_end":924,"column_start":68,"column_end":84},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":82375,"byte_end":82391,"line_start":926,"line_end":926,"column_start":45,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":84791,"byte_end":84807,"line_start":997,"line_end":997,"column_start":54,"column_end":70},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":85463,"byte_end":85479,"line_start":1015,"line_end":1015,"column_start":61,"column_end":77},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":86183,"byte_end":86199,"line_start":1033,"line_end":1033,"column_start":49,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88046,"byte_end":88062,"line_start":1079,"line_end":1079,"column_start":55,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88248,"byte_end":88264,"line_start":1087,"line_end":1087,"column_start":58,"column_end":74},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88441,"byte_end":88457,"line_start":1094,"line_end":1094,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88634,"byte_end":88650,"line_start":1101,"line_end":1101,"column_start":73,"column_end":89},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":88851,"byte_end":88867,"line_start":1108,"line_end":1108,"column_start":9,"column_end":25},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89494,"byte_end":89519,"line_start":1127,"line_end":1127,"column_start":9,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":89586,"byte_end":89611,"line_start":1131,"line_end":1131,"column_start":52,"column_end":77},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":91179,"byte_end":91204,"line_start":1180,"line_end":1180,"column_start":56,"column_end":81},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93080,"byte_end":93105,"line_start":1226,"line_end":1226,"column_start":61,"column_end":86},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":93799,"byte_end":93824,"line_start":1245,"line_end":1245,"column_start":57,"column_end":82},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95221,"byte_end":95246,"line_start":1290,"line_end":1290,"column_start":62,"column_end":87},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95435,"byte_end":95460,"line_start":1298,"line_end":1298,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95649,"byte_end":95674,"line_start":1306,"line_end":1306,"column_start":9,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":95882,"byte_end":95907,"line_start":1314,"line_end":1314,"column_start":9,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96815,"byte_end":96836,"line_start":1341,"line_end":1341,"column_start":68,"column_end":89},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":96910,"byte_end":96931,"line_start":1342,"line_end":1342,"column_start":61,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":97022,"byte_end":97043,"line_start":1347,"line_end":1347,"column_start":45,"column_end":66},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":98816,"byte_end":98837,"line_start":1399,"line_end":1399,"column_start":49,"column_end":70},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99807,"byte_end":99828,"line_start":1419,"line_end":1419,"column_start":55,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":99997,"byte_end":100018,"line_start":1427,"line_end":1427,"column_start":54,"column_end":75},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100189,"byte_end":100210,"line_start":1435,"line_end":1435,"column_start":9,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":100411,"byte_end":100432,"line_start":1443,"line_end":1443,"column_start":9,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":7641}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101340,"byte_end":101362,"line_start":1471,"line_end":1471,"column_start":9,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101437,"byte_end":101459,"line_start":1474,"line_end":1474,"column_start":61,"column_end":83},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":101550,"byte_end":101572,"line_start":1479,"line_end":1479,"column_start":45,"column_end":67},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":103384,"byte_end":103406,"line_start":1531,"line_end":1531,"column_start":54,"column_end":76},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":104233,"byte_end":104255,"line_start":1555,"line_end":1555,"column_start":49,"column_end":71},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105229,"byte_end":105251,"line_start":1575,"line_end":1575,"column_start":55,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105424,"byte_end":105446,"line_start":1583,"line_end":1583,"column_start":58,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105610,"byte_end":105632,"line_start":1590,"line_end":1590,"column_start":54,"column_end":76},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":105806,"byte_end":105828,"line_start":1598,"line_end":1598,"column_start":9,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/Users/rodydavis/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.3/src/rwlock.rs","byte_start":106029,"byte_end":106051,"line_start":1606,"line_end":1606,"column_start":9,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":795},"to":{"krate":1,"index":7641}}]}